#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.261
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



public partial class RIS_DB : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertAppointment(Appointment instance);
  partial void UpdateAppointment(Appointment instance);
  partial void DeleteAppointment(Appointment instance);
  partial void InsertBloodType(BloodType instance);
  partial void UpdateBloodType(BloodType instance);
  partial void DeleteBloodType(BloodType instance);
  partial void InsertCountry(Country instance);
  partial void UpdateCountry(Country instance);
  partial void DeleteCountry(Country instance);
  partial void InsertDepartment(Department instance);
  partial void UpdateDepartment(Department instance);
  partial void DeleteDepartment(Department instance);
  partial void InsertDrugAllergy(DrugAllergy instance);
  partial void UpdateDrugAllergy(DrugAllergy instance);
  partial void DeleteDrugAllergy(DrugAllergy instance);
  partial void InsertImage(Image instance);
  partial void UpdateImage(Image instance);
  partial void DeleteImage(Image instance);
  partial void InsertNote(Note instance);
  partial void UpdateNote(Note instance);
  partial void DeleteNote(Note instance);
  partial void InsertModality(Modality instance);
  partial void UpdateModality(Modality instance);
  partial void DeleteModality(Modality instance);
  partial void InsertPatient(Patient instance);
  partial void UpdatePatient(Patient instance);
  partial void DeletePatient(Patient instance);
  partial void InsertPatientsWithDrugAllergy(PatientsWithDrugAllergy instance);
  partial void UpdatePatientsWithDrugAllergy(PatientsWithDrugAllergy instance);
  partial void DeletePatientsWithDrugAllergy(PatientsWithDrugAllergy instance);
  partial void InsertSeries(Series instance);
  partial void UpdateSeries(Series instance);
  partial void DeleteSeries(Series instance);
  partial void InsertStaff(Staff instance);
  partial void UpdateStaff(Staff instance);
  partial void DeleteStaff(Staff instance);
  partial void InsertStudy(Study instance);
  partial void UpdateStudy(Study instance);
  partial void DeleteStudy(Study instance);
  partial void InsertUserParticular(UserParticular instance);
  partial void UpdateUserParticular(UserParticular instance);
  partial void DeleteUserParticular(UserParticular instance);
  #endregion
	
	public RIS_DB() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["RIS_DBConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public RIS_DB(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public RIS_DB(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public RIS_DB(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public RIS_DB(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Appointment> Appointments
	{
		get
		{
			return this.GetTable<Appointment>();
		}
	}
	
	public System.Data.Linq.Table<BloodType> BloodTypes
	{
		get
		{
			return this.GetTable<BloodType>();
		}
	}
	
	public System.Data.Linq.Table<Country> Countries
	{
		get
		{
			return this.GetTable<Country>();
		}
	}
	
	public System.Data.Linq.Table<Department> Departments
	{
		get
		{
			return this.GetTable<Department>();
		}
	}
	
	public System.Data.Linq.Table<DrugAllergy> DrugAllergies
	{
		get
		{
			return this.GetTable<DrugAllergy>();
		}
	}
	
	public System.Data.Linq.Table<Image> Images
	{
		get
		{
			return this.GetTable<Image>();
		}
	}
	
	public System.Data.Linq.Table<Note> Notes
	{
		get
		{
			return this.GetTable<Note>();
		}
	}
	
	public System.Data.Linq.Table<Modality> Modalities
	{
		get
		{
			return this.GetTable<Modality>();
		}
	}
	
	public System.Data.Linq.Table<Patient> Patients
	{
		get
		{
			return this.GetTable<Patient>();
		}
	}
	
	public System.Data.Linq.Table<PatientsWithDrugAllergy> PatientsWithDrugAllergies
	{
		get
		{
			return this.GetTable<PatientsWithDrugAllergy>();
		}
	}
	
	public System.Data.Linq.Table<Series> Series
	{
		get
		{
			return this.GetTable<Series>();
		}
	}
	
	public System.Data.Linq.Table<Staff> Staffs
	{
		get
		{
			return this.GetTable<Staff>();
		}
	}
	
	public System.Data.Linq.Table<Study> Studies
	{
		get
		{
			return this.GetTable<Study>();
		}
	}
	
	public System.Data.Linq.Table<UserParticular> UserParticulars
	{
		get
		{
			return this.GetTable<UserParticular>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Appointments")]
public partial class Appointment : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _AppointmentId;
	
	private System.DateTime _AppointmentDate;
	
	private int _StudyId;
	
	private int _PatientId;
	
	private EntityRef<Patient> _Patient;
	
	private EntityRef<Study> _Study;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAppointmentIdChanging(int value);
    partial void OnAppointmentIdChanged();
    partial void OnAppointmentDateChanging(System.DateTime value);
    partial void OnAppointmentDateChanged();
    partial void OnStudyIdChanging(int value);
    partial void OnStudyIdChanged();
    partial void OnPatientIdChanging(int value);
    partial void OnPatientIdChanged();
    #endregion
	
	public Appointment()
	{
		this._Patient = default(EntityRef<Patient>);
		this._Study = default(EntityRef<Study>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppointmentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int AppointmentId
	{
		get
		{
			return this._AppointmentId;
		}
		set
		{
			if ((this._AppointmentId != value))
			{
				this.OnAppointmentIdChanging(value);
				this.SendPropertyChanging();
				this._AppointmentId = value;
				this.SendPropertyChanged("AppointmentId");
				this.OnAppointmentIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppointmentDate", DbType="DateTime NOT NULL")]
	public System.DateTime AppointmentDate
	{
		get
		{
			return this._AppointmentDate;
		}
		set
		{
			if ((this._AppointmentDate != value))
			{
				this.OnAppointmentDateChanging(value);
				this.SendPropertyChanging();
				this._AppointmentDate = value;
				this.SendPropertyChanged("AppointmentDate");
				this.OnAppointmentDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudyId", DbType="Int NOT NULL")]
	public int StudyId
	{
		get
		{
			return this._StudyId;
		}
		set
		{
			if ((this._StudyId != value))
			{
				if (this._Study.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnStudyIdChanging(value);
				this.SendPropertyChanging();
				this._StudyId = value;
				this.SendPropertyChanged("StudyId");
				this.OnStudyIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientId", DbType="Int NOT NULL")]
	public int PatientId
	{
		get
		{
			return this._PatientId;
		}
		set
		{
			if ((this._PatientId != value))
			{
				if (this._Patient.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPatientIdChanging(value);
				this.SendPropertyChanging();
				this._PatientId = value;
				this.SendPropertyChanged("PatientId");
				this.OnPatientIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Appointment", Storage="_Patient", ThisKey="PatientId", OtherKey="PatientId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Patient Patient
	{
		get
		{
			return this._Patient.Entity;
		}
		set
		{
			Patient previousValue = this._Patient.Entity;
			if (((previousValue != value) 
						|| (this._Patient.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Patient.Entity = null;
					previousValue.Appointments.Remove(this);
				}
				this._Patient.Entity = value;
				if ((value != null))
				{
					value.Appointments.Add(this);
					this._PatientId = value.PatientId;
				}
				else
				{
					this._PatientId = default(int);
				}
				this.SendPropertyChanged("Patient");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Study_Appointment", Storage="_Study", ThisKey="StudyId", OtherKey="StudyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Study Study
	{
		get
		{
			return this._Study.Entity;
		}
		set
		{
			Study previousValue = this._Study.Entity;
			if (((previousValue != value) 
						|| (this._Study.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Study.Entity = null;
					previousValue.Appointments.Remove(this);
				}
				this._Study.Entity = value;
				if ((value != null))
				{
					value.Appointments.Add(this);
					this._StudyId = value.StudyId;
				}
				else
				{
					this._StudyId = default(int);
				}
				this.SendPropertyChanged("Study");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BloodTypes")]
public partial class BloodType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _BloodTypeId;
	
	private string _BloodType1;
	
	private EntitySet<Patient> _Patients;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBloodTypeIdChanging(int value);
    partial void OnBloodTypeIdChanged();
    partial void OnBloodType1Changing(string value);
    partial void OnBloodType1Changed();
    #endregion
	
	public BloodType()
	{
		this._Patients = new EntitySet<Patient>(new Action<Patient>(this.attach_Patients), new Action<Patient>(this.detach_Patients));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BloodTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int BloodTypeId
	{
		get
		{
			return this._BloodTypeId;
		}
		set
		{
			if ((this._BloodTypeId != value))
			{
				this.OnBloodTypeIdChanging(value);
				this.SendPropertyChanging();
				this._BloodTypeId = value;
				this.SendPropertyChanged("BloodTypeId");
				this.OnBloodTypeIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="BloodType", Storage="_BloodType1", DbType="NVarChar(3) NOT NULL", CanBeNull=false)]
	public string BloodType1
	{
		get
		{
			return this._BloodType1;
		}
		set
		{
			if ((this._BloodType1 != value))
			{
				this.OnBloodType1Changing(value);
				this.SendPropertyChanging();
				this._BloodType1 = value;
				this.SendPropertyChanged("BloodType1");
				this.OnBloodType1Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BloodType_Patient", Storage="_Patients", ThisKey="BloodTypeId", OtherKey="BloodTypeId")]
	public EntitySet<Patient> Patients
	{
		get
		{
			return this._Patients;
		}
		set
		{
			this._Patients.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Patients(Patient entity)
	{
		this.SendPropertyChanging();
		entity.BloodType = this;
	}
	
	private void detach_Patients(Patient entity)
	{
		this.SendPropertyChanging();
		entity.BloodType = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Countries")]
public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _CountryId;
	
	private string _CountryName;
	
	private EntitySet<UserParticular> _UserParticulars;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountryIdChanging(int value);
    partial void OnCountryIdChanged();
    partial void OnCountryNameChanging(string value);
    partial void OnCountryNameChanged();
    #endregion
	
	public Country()
	{
		this._UserParticulars = new EntitySet<UserParticular>(new Action<UserParticular>(this.attach_UserParticulars), new Action<UserParticular>(this.detach_UserParticulars));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int CountryId
	{
		get
		{
			return this._CountryId;
		}
		set
		{
			if ((this._CountryId != value))
			{
				this.OnCountryIdChanging(value);
				this.SendPropertyChanging();
				this._CountryId = value;
				this.SendPropertyChanged("CountryId");
				this.OnCountryIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryName", DbType="NVarChar(80) NOT NULL", CanBeNull=false)]
	public string CountryName
	{
		get
		{
			return this._CountryName;
		}
		set
		{
			if ((this._CountryName != value))
			{
				this.OnCountryNameChanging(value);
				this.SendPropertyChanging();
				this._CountryName = value;
				this.SendPropertyChanged("CountryName");
				this.OnCountryNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_UserParticular", Storage="_UserParticulars", ThisKey="CountryId", OtherKey="CountryOfResidence")]
	public EntitySet<UserParticular> UserParticulars
	{
		get
		{
			return this._UserParticulars;
		}
		set
		{
			this._UserParticulars.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_UserParticulars(UserParticular entity)
	{
		this.SendPropertyChanging();
		entity.Country = this;
	}
	
	private void detach_UserParticulars(UserParticular entity)
	{
		this.SendPropertyChanging();
		entity.Country = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Departments")]
public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _DepartmentId;
	
	private string _DepartmentName;
	
	private EntitySet<Staff> _Staffs;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepartmentIdChanging(int value);
    partial void OnDepartmentIdChanged();
    partial void OnDepartmentNameChanging(string value);
    partial void OnDepartmentNameChanged();
    #endregion
	
	public Department()
	{
		this._Staffs = new EntitySet<Staff>(new Action<Staff>(this.attach_Staffs), new Action<Staff>(this.detach_Staffs));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int DepartmentId
	{
		get
		{
			return this._DepartmentId;
		}
		set
		{
			if ((this._DepartmentId != value))
			{
				this.OnDepartmentIdChanging(value);
				this.SendPropertyChanging();
				this._DepartmentId = value;
				this.SendPropertyChanged("DepartmentId");
				this.OnDepartmentIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentName", DbType="NVarChar(80) NOT NULL", CanBeNull=false)]
	public string DepartmentName
	{
		get
		{
			return this._DepartmentName;
		}
		set
		{
			if ((this._DepartmentName != value))
			{
				this.OnDepartmentNameChanging(value);
				this.SendPropertyChanging();
				this._DepartmentName = value;
				this.SendPropertyChanged("DepartmentName");
				this.OnDepartmentNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Staff", Storage="_Staffs", ThisKey="DepartmentId", OtherKey="DepartmentId")]
	public EntitySet<Staff> Staffs
	{
		get
		{
			return this._Staffs;
		}
		set
		{
			this._Staffs.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Staffs(Staff entity)
	{
		this.SendPropertyChanging();
		entity.Department = this;
	}
	
	private void detach_Staffs(Staff entity)
	{
		this.SendPropertyChanging();
		entity.Department = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DrugAllergies")]
public partial class DrugAllergy : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _DrugAllergyId;
	
	private string _DrugName;
	
	private EntitySet<PatientsWithDrugAllergy> _PatientsWithDrugAllergies;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDrugAllergyIdChanging(int value);
    partial void OnDrugAllergyIdChanged();
    partial void OnDrugNameChanging(string value);
    partial void OnDrugNameChanged();
    #endregion
	
	public DrugAllergy()
	{
		this._PatientsWithDrugAllergies = new EntitySet<PatientsWithDrugAllergy>(new Action<PatientsWithDrugAllergy>(this.attach_PatientsWithDrugAllergies), new Action<PatientsWithDrugAllergy>(this.detach_PatientsWithDrugAllergies));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugAllergyId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int DrugAllergyId
	{
		get
		{
			return this._DrugAllergyId;
		}
		set
		{
			if ((this._DrugAllergyId != value))
			{
				this.OnDrugAllergyIdChanging(value);
				this.SendPropertyChanging();
				this._DrugAllergyId = value;
				this.SendPropertyChanged("DrugAllergyId");
				this.OnDrugAllergyIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugName", DbType="NVarChar(80) NOT NULL", CanBeNull=false)]
	public string DrugName
	{
		get
		{
			return this._DrugName;
		}
		set
		{
			if ((this._DrugName != value))
			{
				this.OnDrugNameChanging(value);
				this.SendPropertyChanging();
				this._DrugName = value;
				this.SendPropertyChanged("DrugName");
				this.OnDrugNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DrugAllergy_PatientsWithDrugAllergy", Storage="_PatientsWithDrugAllergies", ThisKey="DrugAllergyId", OtherKey="DrugAllergyId")]
	public EntitySet<PatientsWithDrugAllergy> PatientsWithDrugAllergies
	{
		get
		{
			return this._PatientsWithDrugAllergies;
		}
		set
		{
			this._PatientsWithDrugAllergies.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_PatientsWithDrugAllergies(PatientsWithDrugAllergy entity)
	{
		this.SendPropertyChanging();
		entity.DrugAllergy = this;
	}
	
	private void detach_PatientsWithDrugAllergies(PatientsWithDrugAllergy entity)
	{
		this.SendPropertyChanging();
		entity.DrugAllergy = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Images")]
public partial class Image : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ImageId;
	
	private int _TakenBy;
	
	private int _SeriesId;
	
	private System.Guid _DicomUID;
	
	private EntitySet<Note> _Notes;
	
	private EntityRef<Series> _Series;
	
	private EntityRef<Staff> _Staff;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnImageIdChanging(int value);
    partial void OnImageIdChanged();
    partial void OnTakenByChanging(int value);
    partial void OnTakenByChanged();
    partial void OnSeriesIdChanging(int value);
    partial void OnSeriesIdChanged();
    partial void OnDicomUIDChanging(System.Guid value);
    partial void OnDicomUIDChanged();
    #endregion
	
	public Image()
	{
		this._Notes = new EntitySet<Note>(new Action<Note>(this.attach_Notes), new Action<Note>(this.detach_Notes));
		this._Series = default(EntityRef<Series>);
		this._Staff = default(EntityRef<Staff>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageId", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
	public int ImageId
	{
		get
		{
			return this._ImageId;
		}
		set
		{
			if ((this._ImageId != value))
			{
				this.OnImageIdChanging(value);
				this.SendPropertyChanging();
				this._ImageId = value;
				this.SendPropertyChanged("ImageId");
				this.OnImageIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TakenBy", DbType="Int NOT NULL")]
	public int TakenBy
	{
		get
		{
			return this._TakenBy;
		}
		set
		{
			if ((this._TakenBy != value))
			{
				if (this._Staff.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTakenByChanging(value);
				this.SendPropertyChanging();
				this._TakenBy = value;
				this.SendPropertyChanged("TakenBy");
				this.OnTakenByChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeriesId", DbType="Int NOT NULL")]
	public int SeriesId
	{
		get
		{
			return this._SeriesId;
		}
		set
		{
			if ((this._SeriesId != value))
			{
				if (this._Series.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSeriesIdChanging(value);
				this.SendPropertyChanging();
				this._SeriesId = value;
				this.SendPropertyChanged("SeriesId");
				this.OnSeriesIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DicomUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid DicomUID
	{
		get
		{
			return this._DicomUID;
		}
		set
		{
			if ((this._DicomUID != value))
			{
				this.OnDicomUIDChanging(value);
				this.SendPropertyChanging();
				this._DicomUID = value;
				this.SendPropertyChanged("DicomUID");
				this.OnDicomUIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Image_Note", Storage="_Notes", ThisKey="ImageId", OtherKey="ImageId")]
	public EntitySet<Note> Notes
	{
		get
		{
			return this._Notes;
		}
		set
		{
			this._Notes.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Series_Image", Storage="_Series", ThisKey="SeriesId", OtherKey="SeriesId", IsForeignKey=true)]
	public Series Series
	{
		get
		{
			return this._Series.Entity;
		}
		set
		{
			Series previousValue = this._Series.Entity;
			if (((previousValue != value) 
						|| (this._Series.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Series.Entity = null;
					previousValue.Images.Remove(this);
				}
				this._Series.Entity = value;
				if ((value != null))
				{
					value.Images.Add(this);
					this._SeriesId = value.SeriesId;
				}
				else
				{
					this._SeriesId = default(int);
				}
				this.SendPropertyChanged("Series");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Image", Storage="_Staff", ThisKey="TakenBy", OtherKey="StaffId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Staff Staff
	{
		get
		{
			return this._Staff.Entity;
		}
		set
		{
			Staff previousValue = this._Staff.Entity;
			if (((previousValue != value) 
						|| (this._Staff.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Staff.Entity = null;
					previousValue.Images.Remove(this);
				}
				this._Staff.Entity = value;
				if ((value != null))
				{
					value.Images.Add(this);
					this._TakenBy = value.StaffId;
				}
				else
				{
					this._TakenBy = default(int);
				}
				this.SendPropertyChanged("Staff");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Notes(Note entity)
	{
		this.SendPropertyChanging();
		entity.Image = this;
	}
	
	private void detach_Notes(Note entity)
	{
		this.SendPropertyChanging();
		entity.Image = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Notes")]
public partial class Note : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _NoteId;
	
	private string _Description;
	
	private int _ImageId;
	
	private EntityRef<Image> _Image;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNoteIdChanging(int value);
    partial void OnNoteIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnImageIdChanging(int value);
    partial void OnImageIdChanged();
    #endregion
	
	public Note()
	{
		this._Image = default(EntityRef<Image>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoteId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int NoteId
	{
		get
		{
			return this._NoteId;
		}
		set
		{
			if ((this._NoteId != value))
			{
				this.OnNoteIdChanging(value);
				this.SendPropertyChanging();
				this._NoteId = value;
				this.SendPropertyChanged("NoteId");
				this.OnNoteIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageId", DbType="Int NOT NULL")]
	public int ImageId
	{
		get
		{
			return this._ImageId;
		}
		set
		{
			if ((this._ImageId != value))
			{
				if (this._Image.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnImageIdChanging(value);
				this.SendPropertyChanging();
				this._ImageId = value;
				this.SendPropertyChanged("ImageId");
				this.OnImageIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Image_Note", Storage="_Image", ThisKey="ImageId", OtherKey="ImageId", IsForeignKey=true)]
	public Image Image
	{
		get
		{
			return this._Image.Entity;
		}
		set
		{
			Image previousValue = this._Image.Entity;
			if (((previousValue != value) 
						|| (this._Image.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Image.Entity = null;
					previousValue.Notes.Remove(this);
				}
				this._Image.Entity = value;
				if ((value != null))
				{
					value.Notes.Add(this);
					this._ImageId = value.ImageId;
				}
				else
				{
					this._ImageId = default(int);
				}
				this.SendPropertyChanged("Image");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Modalities")]
public partial class Modality : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ModalityId;
	
	private string _Description;
	
	private EntitySet<Series> _Series;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnModalityIdChanging(int value);
    partial void OnModalityIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
	
	public Modality()
	{
		this._Series = new EntitySet<Series>(new Action<Series>(this.attach_Series), new Action<Series>(this.detach_Series));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModalityId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ModalityId
	{
		get
		{
			return this._ModalityId;
		}
		set
		{
			if ((this._ModalityId != value))
			{
				this.OnModalityIdChanging(value);
				this.SendPropertyChanging();
				this._ModalityId = value;
				this.SendPropertyChanged("ModalityId");
				this.OnModalityIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Modality_Series", Storage="_Series", ThisKey="ModalityId", OtherKey="ModalityType")]
	public EntitySet<Series> Series
	{
		get
		{
			return this._Series;
		}
		set
		{
			this._Series.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Series(Series entity)
	{
		this.SendPropertyChanging();
		entity.Modality = this;
	}
	
	private void detach_Series(Series entity)
	{
		this.SendPropertyChanging();
		entity.Modality = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patients")]
public partial class Patient : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _PatientId;
	
	private int _BloodTypeId;
	
	private System.Guid _UserId;
	
	private EntitySet<Appointment> _Appointments;
	
	private EntitySet<PatientsWithDrugAllergy> _PatientsWithDrugAllergies;
	
	private EntityRef<BloodType> _BloodType;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPatientIdChanging(int value);
    partial void OnPatientIdChanged();
    partial void OnBloodTypeIdChanging(int value);
    partial void OnBloodTypeIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    #endregion
	
	public Patient()
	{
		this._Appointments = new EntitySet<Appointment>(new Action<Appointment>(this.attach_Appointments), new Action<Appointment>(this.detach_Appointments));
		this._PatientsWithDrugAllergies = new EntitySet<PatientsWithDrugAllergy>(new Action<PatientsWithDrugAllergy>(this.attach_PatientsWithDrugAllergies), new Action<PatientsWithDrugAllergy>(this.detach_PatientsWithDrugAllergies));
		this._BloodType = default(EntityRef<BloodType>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientId", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
	public int PatientId
	{
		get
		{
			return this._PatientId;
		}
		set
		{
			if ((this._PatientId != value))
			{
				this.OnPatientIdChanging(value);
				this.SendPropertyChanging();
				this._PatientId = value;
				this.SendPropertyChanged("PatientId");
				this.OnPatientIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BloodTypeId", DbType="Int NOT NULL")]
	public int BloodTypeId
	{
		get
		{
			return this._BloodTypeId;
		}
		set
		{
			if ((this._BloodTypeId != value))
			{
				if (this._BloodType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnBloodTypeIdChanging(value);
				this.SendPropertyChanging();
				this._BloodTypeId = value;
				this.SendPropertyChanged("BloodTypeId");
				this.OnBloodTypeIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid UserId
	{
		get
		{
			return this._UserId;
		}
		set
		{
			if ((this._UserId != value))
			{
				this.OnUserIdChanging(value);
				this.SendPropertyChanging();
				this._UserId = value;
				this.SendPropertyChanged("UserId");
				this.OnUserIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Appointment", Storage="_Appointments", ThisKey="PatientId", OtherKey="PatientId")]
	public EntitySet<Appointment> Appointments
	{
		get
		{
			return this._Appointments;
		}
		set
		{
			this._Appointments.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_PatientsWithDrugAllergy", Storage="_PatientsWithDrugAllergies", ThisKey="PatientId", OtherKey="PatientId")]
	public EntitySet<PatientsWithDrugAllergy> PatientsWithDrugAllergies
	{
		get
		{
			return this._PatientsWithDrugAllergies;
		}
		set
		{
			this._PatientsWithDrugAllergies.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BloodType_Patient", Storage="_BloodType", ThisKey="BloodTypeId", OtherKey="BloodTypeId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public BloodType BloodType
	{
		get
		{
			return this._BloodType.Entity;
		}
		set
		{
			BloodType previousValue = this._BloodType.Entity;
			if (((previousValue != value) 
						|| (this._BloodType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._BloodType.Entity = null;
					previousValue.Patients.Remove(this);
				}
				this._BloodType.Entity = value;
				if ((value != null))
				{
					value.Patients.Add(this);
					this._BloodTypeId = value.BloodTypeId;
				}
				else
				{
					this._BloodTypeId = default(int);
				}
				this.SendPropertyChanged("BloodType");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Appointments(Appointment entity)
	{
		this.SendPropertyChanging();
		entity.Patient = this;
	}
	
	private void detach_Appointments(Appointment entity)
	{
		this.SendPropertyChanging();
		entity.Patient = null;
	}
	
	private void attach_PatientsWithDrugAllergies(PatientsWithDrugAllergy entity)
	{
		this.SendPropertyChanging();
		entity.Patient = this;
	}
	
	private void detach_PatientsWithDrugAllergies(PatientsWithDrugAllergy entity)
	{
		this.SendPropertyChanging();
		entity.Patient = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PatientsWithDrugAllergies")]
public partial class PatientsWithDrugAllergy : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _PatientId;
	
	private int _DrugAllergyId;
	
	private EntityRef<DrugAllergy> _DrugAllergy;
	
	private EntityRef<Patient> _Patient;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPatientIdChanging(int value);
    partial void OnPatientIdChanged();
    partial void OnDrugAllergyIdChanging(int value);
    partial void OnDrugAllergyIdChanged();
    #endregion
	
	public PatientsWithDrugAllergy()
	{
		this._DrugAllergy = default(EntityRef<DrugAllergy>);
		this._Patient = default(EntityRef<Patient>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientId", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int PatientId
	{
		get
		{
			return this._PatientId;
		}
		set
		{
			if ((this._PatientId != value))
			{
				if (this._Patient.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPatientIdChanging(value);
				this.SendPropertyChanging();
				this._PatientId = value;
				this.SendPropertyChanged("PatientId");
				this.OnPatientIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugAllergyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int DrugAllergyId
	{
		get
		{
			return this._DrugAllergyId;
		}
		set
		{
			if ((this._DrugAllergyId != value))
			{
				if (this._DrugAllergy.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDrugAllergyIdChanging(value);
				this.SendPropertyChanging();
				this._DrugAllergyId = value;
				this.SendPropertyChanged("DrugAllergyId");
				this.OnDrugAllergyIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DrugAllergy_PatientsWithDrugAllergy", Storage="_DrugAllergy", ThisKey="DrugAllergyId", OtherKey="DrugAllergyId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public DrugAllergy DrugAllergy
	{
		get
		{
			return this._DrugAllergy.Entity;
		}
		set
		{
			DrugAllergy previousValue = this._DrugAllergy.Entity;
			if (((previousValue != value) 
						|| (this._DrugAllergy.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._DrugAllergy.Entity = null;
					previousValue.PatientsWithDrugAllergies.Remove(this);
				}
				this._DrugAllergy.Entity = value;
				if ((value != null))
				{
					value.PatientsWithDrugAllergies.Add(this);
					this._DrugAllergyId = value.DrugAllergyId;
				}
				else
				{
					this._DrugAllergyId = default(int);
				}
				this.SendPropertyChanged("DrugAllergy");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_PatientsWithDrugAllergy", Storage="_Patient", ThisKey="PatientId", OtherKey="PatientId", IsForeignKey=true)]
	public Patient Patient
	{
		get
		{
			return this._Patient.Entity;
		}
		set
		{
			Patient previousValue = this._Patient.Entity;
			if (((previousValue != value) 
						|| (this._Patient.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Patient.Entity = null;
					previousValue.PatientsWithDrugAllergies.Remove(this);
				}
				this._Patient.Entity = value;
				if ((value != null))
				{
					value.PatientsWithDrugAllergies.Add(this);
					this._PatientId = value.PatientId;
				}
				else
				{
					this._PatientId = default(int);
				}
				this.SendPropertyChanged("Patient");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Series")]
public partial class Series : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _SeriesId;
	
	private System.Guid _SeriesUID;
	
	private int _ModalityType;
	
	private int _StudyId;
	
	private EntitySet<Image> _Images;
	
	private EntityRef<Modality> _Modality;
	
	private EntityRef<Study> _Study;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSeriesIdChanging(int value);
    partial void OnSeriesIdChanged();
    partial void OnSeriesUIDChanging(System.Guid value);
    partial void OnSeriesUIDChanged();
    partial void OnModalityTypeChanging(int value);
    partial void OnModalityTypeChanged();
    partial void OnStudyIdChanging(int value);
    partial void OnStudyIdChanged();
    #endregion
	
	public Series()
	{
		this._Images = new EntitySet<Image>(new Action<Image>(this.attach_Images), new Action<Image>(this.detach_Images));
		this._Modality = default(EntityRef<Modality>);
		this._Study = default(EntityRef<Study>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeriesId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int SeriesId
	{
		get
		{
			return this._SeriesId;
		}
		set
		{
			if ((this._SeriesId != value))
			{
				this.OnSeriesIdChanging(value);
				this.SendPropertyChanging();
				this._SeriesId = value;
				this.SendPropertyChanged("SeriesId");
				this.OnSeriesIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeriesUID", DbType="UniqueIdentifier NOT NULL")]
	public System.Guid SeriesUID
	{
		get
		{
			return this._SeriesUID;
		}
		set
		{
			if ((this._SeriesUID != value))
			{
				this.OnSeriesUIDChanging(value);
				this.SendPropertyChanging();
				this._SeriesUID = value;
				this.SendPropertyChanged("SeriesUID");
				this.OnSeriesUIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModalityType", DbType="Int NOT NULL")]
	public int ModalityType
	{
		get
		{
			return this._ModalityType;
		}
		set
		{
			if ((this._ModalityType != value))
			{
				if (this._Modality.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnModalityTypeChanging(value);
				this.SendPropertyChanging();
				this._ModalityType = value;
				this.SendPropertyChanged("ModalityType");
				this.OnModalityTypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudyId", DbType="Int NOT NULL")]
	public int StudyId
	{
		get
		{
			return this._StudyId;
		}
		set
		{
			if ((this._StudyId != value))
			{
				if (this._Study.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnStudyIdChanging(value);
				this.SendPropertyChanging();
				this._StudyId = value;
				this.SendPropertyChanged("StudyId");
				this.OnStudyIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Series_Image", Storage="_Images", ThisKey="SeriesId", OtherKey="SeriesId")]
	public EntitySet<Image> Images
	{
		get
		{
			return this._Images;
		}
		set
		{
			this._Images.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Modality_Series", Storage="_Modality", ThisKey="ModalityType", OtherKey="ModalityId", IsForeignKey=true)]
	public Modality Modality
	{
		get
		{
			return this._Modality.Entity;
		}
		set
		{
			Modality previousValue = this._Modality.Entity;
			if (((previousValue != value) 
						|| (this._Modality.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Modality.Entity = null;
					previousValue.Series.Remove(this);
				}
				this._Modality.Entity = value;
				if ((value != null))
				{
					value.Series.Add(this);
					this._ModalityType = value.ModalityId;
				}
				else
				{
					this._ModalityType = default(int);
				}
				this.SendPropertyChanged("Modality");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Study_Series", Storage="_Study", ThisKey="StudyId", OtherKey="StudyId", IsForeignKey=true)]
	public Study Study
	{
		get
		{
			return this._Study.Entity;
		}
		set
		{
			Study previousValue = this._Study.Entity;
			if (((previousValue != value) 
						|| (this._Study.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Study.Entity = null;
					previousValue.Series.Remove(this);
				}
				this._Study.Entity = value;
				if ((value != null))
				{
					value.Series.Add(this);
					this._StudyId = value.StudyId;
				}
				else
				{
					this._StudyId = default(int);
				}
				this.SendPropertyChanged("Study");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Images(Image entity)
	{
		this.SendPropertyChanging();
		entity.Series = this;
	}
	
	private void detach_Images(Image entity)
	{
		this.SendPropertyChanging();
		entity.Series = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Staff")]
public partial class Staff : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _StaffId;
	
	private int _DepartmentId;
	
	private bool _IsFellow;
	
	private System.Guid _UserId;
	
	private EntitySet<Image> _Images;
	
	private EntitySet<Study> _Studies;
	
	private EntityRef<Department> _Department;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaffIdChanging(int value);
    partial void OnStaffIdChanged();
    partial void OnDepartmentIdChanging(int value);
    partial void OnDepartmentIdChanged();
    partial void OnIsFellowChanging(bool value);
    partial void OnIsFellowChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    #endregion
	
	public Staff()
	{
		this._Images = new EntitySet<Image>(new Action<Image>(this.attach_Images), new Action<Image>(this.detach_Images));
		this._Studies = new EntitySet<Study>(new Action<Study>(this.attach_Studies), new Action<Study>(this.detach_Studies));
		this._Department = default(EntityRef<Department>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffId", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
	public int StaffId
	{
		get
		{
			return this._StaffId;
		}
		set
		{
			if ((this._StaffId != value))
			{
				this.OnStaffIdChanging(value);
				this.SendPropertyChanging();
				this._StaffId = value;
				this.SendPropertyChanged("StaffId");
				this.OnStaffIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentId", DbType="Int NOT NULL")]
	public int DepartmentId
	{
		get
		{
			return this._DepartmentId;
		}
		set
		{
			if ((this._DepartmentId != value))
			{
				if (this._Department.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDepartmentIdChanging(value);
				this.SendPropertyChanging();
				this._DepartmentId = value;
				this.SendPropertyChanged("DepartmentId");
				this.OnDepartmentIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFellow", DbType="Bit NOT NULL")]
	public bool IsFellow
	{
		get
		{
			return this._IsFellow;
		}
		set
		{
			if ((this._IsFellow != value))
			{
				this.OnIsFellowChanging(value);
				this.SendPropertyChanging();
				this._IsFellow = value;
				this.SendPropertyChanged("IsFellow");
				this.OnIsFellowChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid UserId
	{
		get
		{
			return this._UserId;
		}
		set
		{
			if ((this._UserId != value))
			{
				this.OnUserIdChanging(value);
				this.SendPropertyChanging();
				this._UserId = value;
				this.SendPropertyChanged("UserId");
				this.OnUserIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Image", Storage="_Images", ThisKey="StaffId", OtherKey="TakenBy")]
	public EntitySet<Image> Images
	{
		get
		{
			return this._Images;
		}
		set
		{
			this._Images.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Study", Storage="_Studies", ThisKey="StaffId", OtherKey="ReferredBy")]
	public EntitySet<Study> Studies
	{
		get
		{
			return this._Studies;
		}
		set
		{
			this._Studies.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Staff", Storage="_Department", ThisKey="DepartmentId", OtherKey="DepartmentId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Department Department
	{
		get
		{
			return this._Department.Entity;
		}
		set
		{
			Department previousValue = this._Department.Entity;
			if (((previousValue != value) 
						|| (this._Department.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Department.Entity = null;
					previousValue.Staffs.Remove(this);
				}
				this._Department.Entity = value;
				if ((value != null))
				{
					value.Staffs.Add(this);
					this._DepartmentId = value.DepartmentId;
				}
				else
				{
					this._DepartmentId = default(int);
				}
				this.SendPropertyChanged("Department");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Images(Image entity)
	{
		this.SendPropertyChanging();
		entity.Staff = this;
	}
	
	private void detach_Images(Image entity)
	{
		this.SendPropertyChanging();
		entity.Staff = null;
	}
	
	private void attach_Studies(Study entity)
	{
		this.SendPropertyChanging();
		entity.Staff = this;
	}
	
	private void detach_Studies(Study entity)
	{
		this.SendPropertyChanging();
		entity.Staff = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Studies")]
public partial class Study : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _StudyId;
	
	private bool _IsCompleted;
	
	private string _Diagnosis;
	
	private System.DateTime _DateStarted;
	
	private string _Description;
	
	private System.Guid _StudyUID;
	
	private System.DateTime _DateCompleted;
	
	private int _ReferredBy;
	
	private EntitySet<Appointment> _Appointments;
	
	private EntitySet<Series> _Series;
	
	private EntityRef<Staff> _Staff;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudyIdChanging(int value);
    partial void OnStudyIdChanged();
    partial void OnIsCompletedChanging(bool value);
    partial void OnIsCompletedChanged();
    partial void OnDiagnosisChanging(string value);
    partial void OnDiagnosisChanged();
    partial void OnDateStartedChanging(System.DateTime value);
    partial void OnDateStartedChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnStudyUIDChanging(System.Guid value);
    partial void OnStudyUIDChanged();
    partial void OnDateCompletedChanging(System.DateTime value);
    partial void OnDateCompletedChanged();
    partial void OnReferredByChanging(int value);
    partial void OnReferredByChanged();
    #endregion
	
	public Study()
	{
		this._Appointments = new EntitySet<Appointment>(new Action<Appointment>(this.attach_Appointments), new Action<Appointment>(this.detach_Appointments));
		this._Series = new EntitySet<Series>(new Action<Series>(this.attach_Series), new Action<Series>(this.detach_Series));
		this._Staff = default(EntityRef<Staff>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudyId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int StudyId
	{
		get
		{
			return this._StudyId;
		}
		set
		{
			if ((this._StudyId != value))
			{
				this.OnStudyIdChanging(value);
				this.SendPropertyChanging();
				this._StudyId = value;
				this.SendPropertyChanged("StudyId");
				this.OnStudyIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCompleted", DbType="Bit NOT NULL")]
	public bool IsCompleted
	{
		get
		{
			return this._IsCompleted;
		}
		set
		{
			if ((this._IsCompleted != value))
			{
				this.OnIsCompletedChanging(value);
				this.SendPropertyChanging();
				this._IsCompleted = value;
				this.SendPropertyChanged("IsCompleted");
				this.OnIsCompletedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Diagnosis", DbType="NVarChar(MAX)")]
	public string Diagnosis
	{
		get
		{
			return this._Diagnosis;
		}
		set
		{
			if ((this._Diagnosis != value))
			{
				this.OnDiagnosisChanging(value);
				this.SendPropertyChanging();
				this._Diagnosis = value;
				this.SendPropertyChanged("Diagnosis");
				this.OnDiagnosisChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateStarted", DbType="DateTime NOT NULL")]
	public System.DateTime DateStarted
	{
		get
		{
			return this._DateStarted;
		}
		set
		{
			if ((this._DateStarted != value))
			{
				this.OnDateStartedChanging(value);
				this.SendPropertyChanging();
				this._DateStarted = value;
				this.SendPropertyChanged("DateStarted");
				this.OnDateStartedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudyUID", DbType="UniqueIdentifier NOT NULL")]
	public System.Guid StudyUID
	{
		get
		{
			return this._StudyUID;
		}
		set
		{
			if ((this._StudyUID != value))
			{
				this.OnStudyUIDChanging(value);
				this.SendPropertyChanging();
				this._StudyUID = value;
				this.SendPropertyChanged("StudyUID");
				this.OnStudyUIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCompleted", DbType="DateTime NOT NULL")]
	public System.DateTime DateCompleted
	{
		get
		{
			return this._DateCompleted;
		}
		set
		{
			if ((this._DateCompleted != value))
			{
				this.OnDateCompletedChanging(value);
				this.SendPropertyChanging();
				this._DateCompleted = value;
				this.SendPropertyChanged("DateCompleted");
				this.OnDateCompletedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReferredBy", DbType="Int NOT NULL")]
	public int ReferredBy
	{
		get
		{
			return this._ReferredBy;
		}
		set
		{
			if ((this._ReferredBy != value))
			{
				if (this._Staff.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnReferredByChanging(value);
				this.SendPropertyChanging();
				this._ReferredBy = value;
				this.SendPropertyChanged("ReferredBy");
				this.OnReferredByChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Study_Appointment", Storage="_Appointments", ThisKey="StudyId", OtherKey="StudyId")]
	public EntitySet<Appointment> Appointments
	{
		get
		{
			return this._Appointments;
		}
		set
		{
			this._Appointments.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Study_Series", Storage="_Series", ThisKey="StudyId", OtherKey="StudyId")]
	public EntitySet<Series> Series
	{
		get
		{
			return this._Series;
		}
		set
		{
			this._Series.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Study", Storage="_Staff", ThisKey="ReferredBy", OtherKey="StaffId", IsForeignKey=true)]
	public Staff Staff
	{
		get
		{
			return this._Staff.Entity;
		}
		set
		{
			Staff previousValue = this._Staff.Entity;
			if (((previousValue != value) 
						|| (this._Staff.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Staff.Entity = null;
					previousValue.Studies.Remove(this);
				}
				this._Staff.Entity = value;
				if ((value != null))
				{
					value.Studies.Add(this);
					this._ReferredBy = value.StaffId;
				}
				else
				{
					this._ReferredBy = default(int);
				}
				this.SendPropertyChanged("Staff");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Appointments(Appointment entity)
	{
		this.SendPropertyChanging();
		entity.Study = this;
	}
	
	private void detach_Appointments(Appointment entity)
	{
		this.SendPropertyChanging();
		entity.Study = null;
	}
	
	private void attach_Series(Series entity)
	{
		this.SendPropertyChanging();
		entity.Study = this;
	}
	
	private void detach_Series(Series entity)
	{
		this.SendPropertyChanging();
		entity.Study = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserParticulars")]
public partial class UserParticular : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _NRIC;
	
	private string _FirstName;
	
	private string _MiddleName;
	
	private string _LastName;
	
	private char _Gender;
	
	private string _Prefix;
	
	private string _Suffix;
	
	private System.DateTime _DateOfBirth;
	
	private string _Address;
	
	private string _ContactNumber;
	
	private string _PostalCode;
	
	private int _CountryOfResidence;
	
	private string _Nationality;
	
	private System.Guid _UserId;
	
	private EntityRef<Country> _Country;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNRICChanging(string value);
    partial void OnNRICChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnMiddleNameChanging(string value);
    partial void OnMiddleNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnGenderChanging(char value);
    partial void OnGenderChanged();
    partial void OnPrefixChanging(string value);
    partial void OnPrefixChanged();
    partial void OnSuffixChanging(string value);
    partial void OnSuffixChanged();
    partial void OnDateOfBirthChanging(System.DateTime value);
    partial void OnDateOfBirthChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnContactNumberChanging(string value);
    partial void OnContactNumberChanged();
    partial void OnPostalCodeChanging(string value);
    partial void OnPostalCodeChanged();
    partial void OnCountryOfResidenceChanging(int value);
    partial void OnCountryOfResidenceChanged();
    partial void OnNationalityChanging(string value);
    partial void OnNationalityChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    #endregion
	
	public UserParticular()
	{
		this._Country = default(EntityRef<Country>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NRIC", DbType="NChar(8) NOT NULL", CanBeNull=false)]
	public string NRIC
	{
		get
		{
			return this._NRIC;
		}
		set
		{
			if ((this._NRIC != value))
			{
				this.OnNRICChanging(value);
				this.SendPropertyChanging();
				this._NRIC = value;
				this.SendPropertyChanged("NRIC");
				this.OnNRICChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(80) NOT NULL", CanBeNull=false)]
	public string FirstName
	{
		get
		{
			return this._FirstName;
		}
		set
		{
			if ((this._FirstName != value))
			{
				this.OnFirstNameChanging(value);
				this.SendPropertyChanging();
				this._FirstName = value;
				this.SendPropertyChanged("FirstName");
				this.OnFirstNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MiddleName", DbType="NVarChar(80)")]
	public string MiddleName
	{
		get
		{
			return this._MiddleName;
		}
		set
		{
			if ((this._MiddleName != value))
			{
				this.OnMiddleNameChanging(value);
				this.SendPropertyChanging();
				this._MiddleName = value;
				this.SendPropertyChanged("MiddleName");
				this.OnMiddleNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(80) NOT NULL", CanBeNull=false)]
	public string LastName
	{
		get
		{
			return this._LastName;
		}
		set
		{
			if ((this._LastName != value))
			{
				this.OnLastNameChanging(value);
				this.SendPropertyChanging();
				this._LastName = value;
				this.SendPropertyChanged("LastName");
				this.OnLastNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="NChar(1) NOT NULL")]
	public char Gender
	{
		get
		{
			return this._Gender;
		}
		set
		{
			if ((this._Gender != value))
			{
				this.OnGenderChanging(value);
				this.SendPropertyChanging();
				this._Gender = value;
				this.SendPropertyChanged("Gender");
				this.OnGenderChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prefix", DbType="NVarChar(5) NOT NULL", CanBeNull=false)]
	public string Prefix
	{
		get
		{
			return this._Prefix;
		}
		set
		{
			if ((this._Prefix != value))
			{
				this.OnPrefixChanging(value);
				this.SendPropertyChanging();
				this._Prefix = value;
				this.SendPropertyChanged("Prefix");
				this.OnPrefixChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Suffix", DbType="NVarChar(3)")]
	public string Suffix
	{
		get
		{
			return this._Suffix;
		}
		set
		{
			if ((this._Suffix != value))
			{
				this.OnSuffixChanging(value);
				this.SendPropertyChanging();
				this._Suffix = value;
				this.SendPropertyChanged("Suffix");
				this.OnSuffixChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="DateTime NOT NULL")]
	public System.DateTime DateOfBirth
	{
		get
		{
			return this._DateOfBirth;
		}
		set
		{
			if ((this._DateOfBirth != value))
			{
				this.OnDateOfBirthChanging(value);
				this.SendPropertyChanging();
				this._DateOfBirth = value;
				this.SendPropertyChanged("DateOfBirth");
				this.OnDateOfBirthChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactNumber", DbType="NVarChar(8) NOT NULL", CanBeNull=false)]
	public string ContactNumber
	{
		get
		{
			return this._ContactNumber;
		}
		set
		{
			if ((this._ContactNumber != value))
			{
				this.OnContactNumberChanging(value);
				this.SendPropertyChanging();
				this._ContactNumber = value;
				this.SendPropertyChanged("ContactNumber");
				this.OnContactNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostalCode", DbType="NVarChar(6) NOT NULL", CanBeNull=false)]
	public string PostalCode
	{
		get
		{
			return this._PostalCode;
		}
		set
		{
			if ((this._PostalCode != value))
			{
				this.OnPostalCodeChanging(value);
				this.SendPropertyChanging();
				this._PostalCode = value;
				this.SendPropertyChanged("PostalCode");
				this.OnPostalCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryOfResidence", DbType="Int NOT NULL")]
	public int CountryOfResidence
	{
		get
		{
			return this._CountryOfResidence;
		}
		set
		{
			if ((this._CountryOfResidence != value))
			{
				if (this._Country.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCountryOfResidenceChanging(value);
				this.SendPropertyChanging();
				this._CountryOfResidence = value;
				this.SendPropertyChanged("CountryOfResidence");
				this.OnCountryOfResidenceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nationality", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Nationality
	{
		get
		{
			return this._Nationality;
		}
		set
		{
			if ((this._Nationality != value))
			{
				this.OnNationalityChanging(value);
				this.SendPropertyChanging();
				this._Nationality = value;
				this.SendPropertyChanged("Nationality");
				this.OnNationalityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid UserId
	{
		get
		{
			return this._UserId;
		}
		set
		{
			if ((this._UserId != value))
			{
				this.OnUserIdChanging(value);
				this.SendPropertyChanging();
				this._UserId = value;
				this.SendPropertyChanged("UserId");
				this.OnUserIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_UserParticular", Storage="_Country", ThisKey="CountryOfResidence", OtherKey="CountryId", IsForeignKey=true)]
	public Country Country
	{
		get
		{
			return this._Country.Entity;
		}
		set
		{
			Country previousValue = this._Country.Entity;
			if (((previousValue != value) 
						|| (this._Country.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Country.Entity = null;
					previousValue.UserParticulars.Remove(this);
				}
				this._Country.Entity = value;
				if ((value != null))
				{
					value.UserParticulars.Add(this);
					this._CountryOfResidence = value.CountryId;
				}
				else
				{
					this._CountryOfResidence = default(int);
				}
				this.SendPropertyChanged("Country");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
