using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using EvilDicom.Helper;
using EvilDicom.VR;

namespace EvilDicom.Components
{
    public partial class DICOMObject
    {
        public UnsignedLong COMMAND_GROUP_LENGTH
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COMMAND_GROUP_LENGTH))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.COMMAND_GROUP_LENGTH }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COMMAND_GROUP_LENGTH) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong COMMAND_LENGTH_TO_END
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COMMAND_LENGTH_TO_END))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.COMMAND_LENGTH_TO_END }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COMMAND_LENGTH_TO_END) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier AFFECTED_SOPCLASS_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.AFFECTED_SOPCLASS_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.AFFECTED_SOPCLASS_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.AFFECTED_SOPCLASS_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier REQUESTED_SOPCLASS_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REQUESTED_SOPCLASS_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.REQUESTED_SOPCLASS_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REQUESTED_SOPCLASS_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString COMMAND_RECOGNITION_CODE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COMMAND_RECOGNITION_CODE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.COMMAND_RECOGNITION_CODE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COMMAND_RECOGNITION_CODE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort COMMAND_FIELD
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COMMAND_FIELD))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.COMMAND_FIELD }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COMMAND_FIELD) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort MESSAGE_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MESSAGE_ID))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.MESSAGE_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MESSAGE_ID) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort MESSAGE_IDBEING_RESPONDED_TO
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MESSAGE_IDBEING_RESPONDED_TO))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.MESSAGE_IDBEING_RESPONDED_TO }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MESSAGE_IDBEING_RESPONDED_TO) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ApplicationEntity INITIATOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INITIATOR))
                {
                    ApplicationEntity newOb = new ApplicationEntity { Tag = new Tag { Id = TagHelper.INITIATOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INITIATOR) as ApplicationEntity;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ApplicationEntity RECEIVER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RECEIVER))
                {
                    ApplicationEntity newOb = new ApplicationEntity { Tag = new Tag { Id = TagHelper.RECEIVER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RECEIVER) as ApplicationEntity;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ApplicationEntity FIND_LOCATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FIND_LOCATION))
                {
                    ApplicationEntity newOb = new ApplicationEntity { Tag = new Tag { Id = TagHelper.FIND_LOCATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FIND_LOCATION) as ApplicationEntity;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ApplicationEntity MOVE_DESTINATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MOVE_DESTINATION))
                {
                    ApplicationEntity newOb = new ApplicationEntity { Tag = new Tag { Id = TagHelper.MOVE_DESTINATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MOVE_DESTINATION) as ApplicationEntity;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort PRIORITY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRIORITY))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.PRIORITY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRIORITY) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort COMMAND_DATA_SET_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COMMAND_DATA_SET_TYPE))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.COMMAND_DATA_SET_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COMMAND_DATA_SET_TYPE) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort NUMBER_OF_MATCHES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_MATCHES))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.NUMBER_OF_MATCHES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_MATCHES) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort RESPONSE_SEQUENCE_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RESPONSE_SEQUENCE_NUMBER))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.RESPONSE_SEQUENCE_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RESPONSE_SEQUENCE_NUMBER) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort STATUS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STATUS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.STATUS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STATUS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public AttributeTag OFFENDING_ELEMENT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OFFENDING_ELEMENT))
                {
                    AttributeTag newOb = new AttributeTag { Tag = new Tag { Id = TagHelper.OFFENDING_ELEMENT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OFFENDING_ELEMENT) as AttributeTag;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString ERROR_COMMENT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ERROR_COMMENT))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.ERROR_COMMENT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ERROR_COMMENT) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort ERROR_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ERROR_ID))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.ERROR_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ERROR_ID) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier AFFECTED_SOPINSTANCE_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.AFFECTED_SOPINSTANCE_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.AFFECTED_SOPINSTANCE_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.AFFECTED_SOPINSTANCE_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier REQUESTED_SOPINSTANCE_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REQUESTED_SOPINSTANCE_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.REQUESTED_SOPINSTANCE_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REQUESTED_SOPINSTANCE_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort EVENT_TYPE_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.EVENT_TYPE_ID))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.EVENT_TYPE_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.EVENT_TYPE_ID) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public AttributeTag ATTRIBUTE_IDENTIFIER_LIST
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ATTRIBUTE_IDENTIFIER_LIST))
                {
                    AttributeTag newOb = new AttributeTag { Tag = new Tag { Id = TagHelper.ATTRIBUTE_IDENTIFIER_LIST }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ATTRIBUTE_IDENTIFIER_LIST) as AttributeTag;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort ACTION_TYPE_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ACTION_TYPE_ID))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.ACTION_TYPE_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ACTION_TYPE_ID) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort NUMBER_OF_REMAINING_SUBOPERATIONS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_REMAINING_SUBOPERATIONS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.NUMBER_OF_REMAINING_SUBOPERATIONS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_REMAINING_SUBOPERATIONS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort NUMBER_OF_COMPLETED_SUBOPERATIONS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_COMPLETED_SUBOPERATIONS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.NUMBER_OF_COMPLETED_SUBOPERATIONS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_COMPLETED_SUBOPERATIONS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort NUMBER_OF_FAILED_SUBOPERATIONS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_FAILED_SUBOPERATIONS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.NUMBER_OF_FAILED_SUBOPERATIONS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_FAILED_SUBOPERATIONS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort NUMBER_OF_WARNING_SUBOPERATIONS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_WARNING_SUBOPERATIONS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.NUMBER_OF_WARNING_SUBOPERATIONS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_WARNING_SUBOPERATIONS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ApplicationEntity MOVE_ORIGINATOR_APPLICATION_ENTITY_TITLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MOVE_ORIGINATOR_APPLICATION_ENTITY_TITLE))
                {
                    ApplicationEntity newOb = new ApplicationEntity { Tag = new Tag { Id = TagHelper.MOVE_ORIGINATOR_APPLICATION_ENTITY_TITLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MOVE_ORIGINATOR_APPLICATION_ENTITY_TITLE) as ApplicationEntity;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort MOVE_ORIGINATOR_MESSAGE_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MOVE_ORIGINATOR_MESSAGE_ID))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.MOVE_ORIGINATOR_MESSAGE_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MOVE_ORIGINATOR_MESSAGE_ID) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public AttributeTag DIALOG_RECEIVER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DIALOG_RECEIVER))
                {
                    AttributeTag newOb = new AttributeTag { Tag = new Tag { Id = TagHelper.DIALOG_RECEIVER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DIALOG_RECEIVER) as AttributeTag;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public AttributeTag TERMINAL_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TERMINAL_TYPE))
                {
                    AttributeTag newOb = new AttributeTag { Tag = new Tag { Id = TagHelper.TERMINAL_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TERMINAL_TYPE) as AttributeTag;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString MESSAGE_SET_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MESSAGE_SET_ID))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.MESSAGE_SET_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MESSAGE_SET_ID) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString END_MESSAGE_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.END_MESSAGE_ID))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.END_MESSAGE_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.END_MESSAGE_ID) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public AttributeTag DISPLAY_FORMAT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DISPLAY_FORMAT))
                {
                    AttributeTag newOb = new AttributeTag { Tag = new Tag { Id = TagHelper.DISPLAY_FORMAT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DISPLAY_FORMAT) as AttributeTag;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public AttributeTag PAGE_POSITION_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PAGE_POSITION_ID))
                {
                    AttributeTag newOb = new AttributeTag { Tag = new Tag { Id = TagHelper.PAGE_POSITION_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PAGE_POSITION_ID) as AttributeTag;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString TEXT_FORMAT_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TEXT_FORMAT_ID))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.TEXT_FORMAT_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TEXT_FORMAT_ID) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString NORMAL_REVERSE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NORMAL_REVERSE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.NORMAL_REVERSE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NORMAL_REVERSE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString ADD_GRAY_SCALE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ADD_GRAY_SCALE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.ADD_GRAY_SCALE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ADD_GRAY_SCALE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString BORDERS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BORDERS))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.BORDERS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BORDERS) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString COPIES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COPIES))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.COPIES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COPIES) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString COMMAND_MAGNIFICATION_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COMMAND_MAGNIFICATION_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.COMMAND_MAGNIFICATION_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COMMAND_MAGNIFICATION_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString ERASE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ERASE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.ERASE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ERASE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString PRINT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRINT))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.PRINT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRINT) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort OVERLAYS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERLAYS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.OVERLAYS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERLAYS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong FILE_META_INFORMATION_GROUP_LENGTH
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FILE_META_INFORMATION_GROUP_LENGTH))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.FILE_META_INFORMATION_GROUP_LENGTH }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FILE_META_INFORMATION_GROUP_LENGTH) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public OtherByteString FILE_META_INFORMATION_VERSION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FILE_META_INFORMATION_VERSION))
                {
                    OtherByteString newOb = new OtherByteString { Tag = new Tag { Id = TagHelper.FILE_META_INFORMATION_VERSION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FILE_META_INFORMATION_VERSION) as OtherByteString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier MEDIA_STORAGE_SOPCLASS_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MEDIA_STORAGE_SOPCLASS_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.MEDIA_STORAGE_SOPCLASS_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MEDIA_STORAGE_SOPCLASS_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier MEDIA_STORAGE_SOPINSTANCE_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MEDIA_STORAGE_SOPINSTANCE_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.MEDIA_STORAGE_SOPINSTANCE_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MEDIA_STORAGE_SOPINSTANCE_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier TRANSFER_SYNTAX_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TRANSFER_SYNTAX_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.TRANSFER_SYNTAX_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TRANSFER_SYNTAX_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier IMPLEMENTATION_CLASS_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMPLEMENTATION_CLASS_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.IMPLEMENTATION_CLASS_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMPLEMENTATION_CLASS_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString IMPLEMENTATION_VERSION_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMPLEMENTATION_VERSION_NAME))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.IMPLEMENTATION_VERSION_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMPLEMENTATION_VERSION_NAME) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ApplicationEntity SOURCE_APPLICATION_ENTITY_TITLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOURCE_APPLICATION_ENTITY_TITLE))
                {
                    ApplicationEntity newOb = new ApplicationEntity { Tag = new Tag { Id = TagHelper.SOURCE_APPLICATION_ENTITY_TITLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOURCE_APPLICATION_ENTITY_TITLE) as ApplicationEntity;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier PRIVATE_INFORMATION_CREATOR_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRIVATE_INFORMATION_CREATOR_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.PRIVATE_INFORMATION_CREATOR_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRIVATE_INFORMATION_CREATOR_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public OtherByteString PRIVATE_INFORMATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRIVATE_INFORMATION))
                {
                    OtherByteString newOb = new OtherByteString { Tag = new Tag { Id = TagHelper.PRIVATE_INFORMATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRIVATE_INFORMATION) as OtherByteString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString FILE_SET_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FILE_SET_ID))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.FILE_SET_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FILE_SET_ID) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString FILE_SET_DESCRIPTOR_FILE_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FILE_SET_DESCRIPTOR_FILE_ID))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.FILE_SET_DESCRIPTOR_FILE_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FILE_SET_DESCRIPTOR_FILE_ID) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SPECIFIC_CHARACTER_SET_OF_FILE_SET_DESCRIPTOR_FILE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SPECIFIC_CHARACTER_SET_OF_FILE_SET_DESCRIPTOR_FILE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SPECIFIC_CHARACTER_SET_OF_FILE_SET_DESCRIPTOR_FILE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SPECIFIC_CHARACTER_SET_OF_FILE_SET_DESCRIPTOR_FILE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong OFFSET_OF_THE_FIRST_DIRECTORY_RECORD_OF_THE_ROOT_DIRECTORY_ENTITY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OFFSET_OF_THE_FIRST_DIRECTORY_RECORD_OF_THE_ROOT_DIRECTORY_ENTITY))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.OFFSET_OF_THE_FIRST_DIRECTORY_RECORD_OF_THE_ROOT_DIRECTORY_ENTITY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OFFSET_OF_THE_FIRST_DIRECTORY_RECORD_OF_THE_ROOT_DIRECTORY_ENTITY) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong OFFSET_OF_THE_LAST_DIRECTORY_RECORD_OF_THE_ROOT_DIRECTORY_ENTITY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OFFSET_OF_THE_LAST_DIRECTORY_RECORD_OF_THE_ROOT_DIRECTORY_ENTITY))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.OFFSET_OF_THE_LAST_DIRECTORY_RECORD_OF_THE_ROOT_DIRECTORY_ENTITY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OFFSET_OF_THE_LAST_DIRECTORY_RECORD_OF_THE_ROOT_DIRECTORY_ENTITY) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort FILE_SET_CONSISTENCY_FLAG
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FILE_SET_CONSISTENCY_FLAG))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.FILE_SET_CONSISTENCY_FLAG }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FILE_SET_CONSISTENCY_FLAG) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence DIRECTORY_RECORD_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DIRECTORY_RECORD_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.DIRECTORY_RECORD_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DIRECTORY_RECORD_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong OFFSET_OF_THE_NEXT_DIRECTORY_RECORD
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OFFSET_OF_THE_NEXT_DIRECTORY_RECORD))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.OFFSET_OF_THE_NEXT_DIRECTORY_RECORD }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OFFSET_OF_THE_NEXT_DIRECTORY_RECORD) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort RECORD_IN_USE_FLAG
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RECORD_IN_USE_FLAG))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.RECORD_IN_USE_FLAG }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RECORD_IN_USE_FLAG) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong OFFSET_OF_REFERENCED_LOWER_LEVEL_DIRECTORY_ENTITY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OFFSET_OF_REFERENCED_LOWER_LEVEL_DIRECTORY_ENTITY))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.OFFSET_OF_REFERENCED_LOWER_LEVEL_DIRECTORY_ENTITY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OFFSET_OF_REFERENCED_LOWER_LEVEL_DIRECTORY_ENTITY) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString DIRECTORY_RECORD_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DIRECTORY_RECORD_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.DIRECTORY_RECORD_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DIRECTORY_RECORD_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier PRIVATE_RECORD_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRIVATE_RECORD_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.PRIVATE_RECORD_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRIVATE_RECORD_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString REFERENCED_FILE_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_FILE_ID))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.REFERENCED_FILE_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_FILE_ID) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong MRDRDIRECTORY_RECORD_OFFSET
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MRDRDIRECTORY_RECORD_OFFSET))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.MRDRDIRECTORY_RECORD_OFFSET }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MRDRDIRECTORY_RECORD_OFFSET) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier REFERENCED_SOPCLASS_UIDIN_FILE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_SOPCLASS_UIDIN_FILE))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.REFERENCED_SOPCLASS_UIDIN_FILE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_SOPCLASS_UIDIN_FILE) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier REFERENCED_SOPINSTANCE_UIDIN_FILE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_SOPINSTANCE_UIDIN_FILE))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.REFERENCED_SOPINSTANCE_UIDIN_FILE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_SOPINSTANCE_UIDIN_FILE) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier REFERENCED_TRANSFER_SYNTAX_UIDIN_FILE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_TRANSFER_SYNTAX_UIDIN_FILE))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.REFERENCED_TRANSFER_SYNTAX_UIDIN_FILE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_TRANSFER_SYNTAX_UIDIN_FILE) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier REFERENCED_RELATED_GENERAL_SOPCLASS_UIDIN_FILE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_RELATED_GENERAL_SOPCLASS_UIDIN_FILE))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.REFERENCED_RELATED_GENERAL_SOPCLASS_UIDIN_FILE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_RELATED_GENERAL_SOPCLASS_UIDIN_FILE) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong NUMBER_OF_REFERENCES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_REFERENCES))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.NUMBER_OF_REFERENCES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_REFERENCES) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong LENGTH_TO_END
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LENGTH_TO_END))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.LENGTH_TO_END }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LENGTH_TO_END) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SPECIFIC_CHARACTER_SET
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SPECIFIC_CHARACTER_SET))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SPECIFIC_CHARACTER_SET }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SPECIFIC_CHARACTER_SET) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence LANGUAGE_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LANGUAGE_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.LANGUAGE_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LANGUAGE_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString IMAGE_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.IMAGE_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString RECOGNITION_CODE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RECOGNITION_CODE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.RECOGNITION_CODE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RECOGNITION_CODE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateVR INSTANCE_CREATION_DATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INSTANCE_CREATION_DATE))
                {
                    DateVR newOb = new DateVR { Tag = new Tag { Id = TagHelper.INSTANCE_CREATION_DATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INSTANCE_CREATION_DATE) as DateVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR INSTANCE_CREATION_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INSTANCE_CREATION_TIME))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.INSTANCE_CREATION_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INSTANCE_CREATION_TIME) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier INSTANCE_CREATOR_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INSTANCE_CREATOR_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.INSTANCE_CREATOR_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INSTANCE_CREATOR_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier SOPCLASS_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOPCLASS_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.SOPCLASS_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOPCLASS_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier SOPINSTANCE_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOPINSTANCE_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.SOPINSTANCE_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOPINSTANCE_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier RELATED_GENERAL_SOPCLASS_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RELATED_GENERAL_SOPCLASS_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.RELATED_GENERAL_SOPCLASS_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RELATED_GENERAL_SOPCLASS_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier ORIGINAL_SPECIALIZED_SOPCLASS_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ORIGINAL_SPECIALIZED_SOPCLASS_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.ORIGINAL_SPECIALIZED_SOPCLASS_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ORIGINAL_SPECIALIZED_SOPCLASS_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateVR STUDY_DATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STUDY_DATE))
                {
                    DateVR newOb = new DateVR { Tag = new Tag { Id = TagHelper.STUDY_DATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STUDY_DATE) as DateVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateVR SERIES_DATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SERIES_DATE))
                {
                    DateVR newOb = new DateVR { Tag = new Tag { Id = TagHelper.SERIES_DATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SERIES_DATE) as DateVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateVR ACQUISITION_DATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ACQUISITION_DATE))
                {
                    DateVR newOb = new DateVR { Tag = new Tag { Id = TagHelper.ACQUISITION_DATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ACQUISITION_DATE) as DateVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateVR CONTENT_DATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTENT_DATE))
                {
                    DateVR newOb = new DateVR { Tag = new Tag { Id = TagHelper.CONTENT_DATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTENT_DATE) as DateVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateVR OVERLAY_DATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERLAY_DATE))
                {
                    DateVR newOb = new DateVR { Tag = new Tag { Id = TagHelper.OVERLAY_DATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERLAY_DATE) as DateVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateVR CURVE_DATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CURVE_DATE))
                {
                    DateVR newOb = new DateVR { Tag = new Tag { Id = TagHelper.CURVE_DATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CURVE_DATE) as DateVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateTimeVR ACQUISITION_DATE_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ACQUISITION_DATE_TIME))
                {
                    DateTimeVR newOb = new DateTimeVR { Tag = new Tag { Id = TagHelper.ACQUISITION_DATE_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ACQUISITION_DATE_TIME) as DateTimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR STUDY_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STUDY_TIME))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.STUDY_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STUDY_TIME) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR SERIES_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SERIES_TIME))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.SERIES_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SERIES_TIME) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR ACQUISITION_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ACQUISITION_TIME))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.ACQUISITION_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ACQUISITION_TIME) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR CONTENT_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTENT_TIME))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.CONTENT_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTENT_TIME) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR OVERLAY_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERLAY_TIME))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.OVERLAY_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERLAY_TIME) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR CURVE_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CURVE_TIME))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.CURVE_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CURVE_TIME) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort DATA_SET_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DATA_SET_TYPE))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.DATA_SET_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DATA_SET_TYPE) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString DATA_SET_SUBTYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DATA_SET_SUBTYPE))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.DATA_SET_SUBTYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DATA_SET_SUBTYPE) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString NUCLEAR_MEDICINE_SERIES_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUCLEAR_MEDICINE_SERIES_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.NUCLEAR_MEDICINE_SERIES_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUCLEAR_MEDICINE_SERIES_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString ACCESSION_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ACCESSION_NUMBER))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.ACCESSION_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ACCESSION_NUMBER) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ISSUER_OF_ACCESSION_NUMBER_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ISSUER_OF_ACCESSION_NUMBER_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ISSUER_OF_ACCESSION_NUMBER_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ISSUER_OF_ACCESSION_NUMBER_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString QUERY_RETRIEVE_LEVEL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.QUERY_RETRIEVE_LEVEL))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.QUERY_RETRIEVE_LEVEL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.QUERY_RETRIEVE_LEVEL) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ApplicationEntity RETRIEVE_AETITLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RETRIEVE_AETITLE))
                {
                    ApplicationEntity newOb = new ApplicationEntity { Tag = new Tag { Id = TagHelper.RETRIEVE_AETITLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RETRIEVE_AETITLE) as ApplicationEntity;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString INSTANCE_AVAILABILITY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INSTANCE_AVAILABILITY))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.INSTANCE_AVAILABILITY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INSTANCE_AVAILABILITY) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier FAILED_SOPINSTANCE_UIDLIST
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FAILED_SOPINSTANCE_UIDLIST))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.FAILED_SOPINSTANCE_UIDLIST }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FAILED_SOPINSTANCE_UIDLIST) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString MODALITY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MODALITY))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.MODALITY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MODALITY) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString MODALITIES_IN_STUDY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MODALITIES_IN_STUDY))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.MODALITIES_IN_STUDY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MODALITIES_IN_STUDY) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier SOPCLASSES_IN_STUDY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOPCLASSES_IN_STUDY))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.SOPCLASSES_IN_STUDY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOPCLASSES_IN_STUDY) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString CONVERSION_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONVERSION_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.CONVERSION_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONVERSION_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString PRESENTATION_INTENT_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRESENTATION_INTENT_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.PRESENTATION_INTENT_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRESENTATION_INTENT_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString MANUFACTURER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MANUFACTURER))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.MANUFACTURER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MANUFACTURER) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString INSTITUTION_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INSTITUTION_NAME))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.INSTITUTION_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INSTITUTION_NAME) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText INSTITUTION_ADDRESS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INSTITUTION_ADDRESS))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.INSTITUTION_ADDRESS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INSTITUTION_ADDRESS) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence INSTITUTION_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INSTITUTION_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.INSTITUTION_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INSTITUTION_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public PersonsName REFERRING_PHYSICIAN_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERRING_PHYSICIAN_NAME))
                {
                    PersonsName newOb = new PersonsName { Tag = new Tag { Id = TagHelper.REFERRING_PHYSICIAN_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERRING_PHYSICIAN_NAME) as PersonsName;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText REFERRING_PHYSICIAN_ADDRESS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERRING_PHYSICIAN_ADDRESS))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.REFERRING_PHYSICIAN_ADDRESS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERRING_PHYSICIAN_ADDRESS) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString REFERRING_PHYSICIAN_TELEPHONE_NUMBERS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERRING_PHYSICIAN_TELEPHONE_NUMBERS))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.REFERRING_PHYSICIAN_TELEPHONE_NUMBERS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERRING_PHYSICIAN_TELEPHONE_NUMBERS) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERRING_PHYSICIAN_IDENTIFICATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERRING_PHYSICIAN_IDENTIFICATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERRING_PHYSICIAN_IDENTIFICATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERRING_PHYSICIAN_IDENTIFICATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString CODE_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CODE_VALUE))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.CODE_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CODE_VALUE) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString CODING_SCHEME_DESIGNATOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CODING_SCHEME_DESIGNATOR))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.CODING_SCHEME_DESIGNATOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CODING_SCHEME_DESIGNATOR) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString CODING_SCHEME_VERSION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CODING_SCHEME_VERSION))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.CODING_SCHEME_VERSION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CODING_SCHEME_VERSION) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString CODE_MEANING
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CODE_MEANING))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.CODE_MEANING }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CODE_MEANING) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString MAPPING_RESOURCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MAPPING_RESOURCE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.MAPPING_RESOURCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MAPPING_RESOURCE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateTimeVR CONTEXT_GROUP_VERSION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTEXT_GROUP_VERSION))
                {
                    DateTimeVR newOb = new DateTimeVR { Tag = new Tag { Id = TagHelper.CONTEXT_GROUP_VERSION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTEXT_GROUP_VERSION) as DateTimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateTimeVR CONTEXT_GROUP_LOCAL_VERSION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTEXT_GROUP_LOCAL_VERSION))
                {
                    DateTimeVR newOb = new DateTimeVR { Tag = new Tag { Id = TagHelper.CONTEXT_GROUP_LOCAL_VERSION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTEXT_GROUP_LOCAL_VERSION) as DateTimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString CONTEXT_GROUP_EXTENSION_FLAG
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTEXT_GROUP_EXTENSION_FLAG))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.CONTEXT_GROUP_EXTENSION_FLAG }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTEXT_GROUP_EXTENSION_FLAG) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier CODING_SCHEME_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CODING_SCHEME_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.CODING_SCHEME_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CODING_SCHEME_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier CONTEXT_GROUP_EXTENSION_CREATOR_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTEXT_GROUP_EXTENSION_CREATOR_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.CONTEXT_GROUP_EXTENSION_CREATOR_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTEXT_GROUP_EXTENSION_CREATOR_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString CONTEXT_IDENTIFIER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTEXT_IDENTIFIER))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.CONTEXT_IDENTIFIER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTEXT_IDENTIFIER) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CODING_SCHEME_IDENTIFICATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CODING_SCHEME_IDENTIFICATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CODING_SCHEME_IDENTIFICATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CODING_SCHEME_IDENTIFICATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString CODING_SCHEME_REGISTRY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CODING_SCHEME_REGISTRY))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.CODING_SCHEME_REGISTRY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CODING_SCHEME_REGISTRY) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText CODING_SCHEME_EXTERNAL_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CODING_SCHEME_EXTERNAL_ID))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.CODING_SCHEME_EXTERNAL_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CODING_SCHEME_EXTERNAL_ID) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText CODING_SCHEME_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CODING_SCHEME_NAME))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.CODING_SCHEME_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CODING_SCHEME_NAME) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText CODING_SCHEME_RESPONSIBLE_ORGANIZATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CODING_SCHEME_RESPONSIBLE_ORGANIZATION))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.CODING_SCHEME_RESPONSIBLE_ORGANIZATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CODING_SCHEME_RESPONSIBLE_ORGANIZATION) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier CONTEXT_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTEXT_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.CONTEXT_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTEXT_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString TIMEZONE_OFFSET_FROM_UTC
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TIMEZONE_OFFSET_FROM_UTC))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.TIMEZONE_OFFSET_FROM_UTC }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TIMEZONE_OFFSET_FROM_UTC) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ApplicationEntity NETWORK_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NETWORK_ID))
                {
                    ApplicationEntity newOb = new ApplicationEntity { Tag = new Tag { Id = TagHelper.NETWORK_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NETWORK_ID) as ApplicationEntity;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString STATION_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STATION_NAME))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.STATION_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STATION_NAME) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString STUDY_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STUDY_DESCRIPTION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.STUDY_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STUDY_DESCRIPTION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PROCEDURE_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PROCEDURE_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PROCEDURE_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PROCEDURE_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString SERIES_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SERIES_DESCRIPTION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.SERIES_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SERIES_DESCRIPTION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SERIES_DESCRIPTION_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SERIES_DESCRIPTION_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SERIES_DESCRIPTION_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SERIES_DESCRIPTION_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString INSTITUTIONAL_DEPARTMENT_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INSTITUTIONAL_DEPARTMENT_NAME))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.INSTITUTIONAL_DEPARTMENT_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INSTITUTIONAL_DEPARTMENT_NAME) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public PersonsName PHYSICIANS_OF_RECORD
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PHYSICIANS_OF_RECORD))
                {
                    PersonsName newOb = new PersonsName { Tag = new Tag { Id = TagHelper.PHYSICIANS_OF_RECORD }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PHYSICIANS_OF_RECORD) as PersonsName;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PHYSICIANS_OF_RECORD_IDENTIFICATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PHYSICIANS_OF_RECORD_IDENTIFICATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PHYSICIANS_OF_RECORD_IDENTIFICATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PHYSICIANS_OF_RECORD_IDENTIFICATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public PersonsName PERFORMING_PHYSICIAN_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PERFORMING_PHYSICIAN_NAME))
                {
                    PersonsName newOb = new PersonsName { Tag = new Tag { Id = TagHelper.PERFORMING_PHYSICIAN_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PERFORMING_PHYSICIAN_NAME) as PersonsName;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PERFORMING_PHYSICIAN_IDENTIFICATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PERFORMING_PHYSICIAN_IDENTIFICATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PERFORMING_PHYSICIAN_IDENTIFICATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PERFORMING_PHYSICIAN_IDENTIFICATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public PersonsName NAME_OF_PHYSICIANS_READING_STUDY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NAME_OF_PHYSICIANS_READING_STUDY))
                {
                    PersonsName newOb = new PersonsName { Tag = new Tag { Id = TagHelper.NAME_OF_PHYSICIANS_READING_STUDY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NAME_OF_PHYSICIANS_READING_STUDY) as PersonsName;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PHYSICIANS_READING_STUDY_IDENTIFICATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PHYSICIANS_READING_STUDY_IDENTIFICATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PHYSICIANS_READING_STUDY_IDENTIFICATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PHYSICIANS_READING_STUDY_IDENTIFICATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public PersonsName OPERATORS_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OPERATORS_NAME))
                {
                    PersonsName newOb = new PersonsName { Tag = new Tag { Id = TagHelper.OPERATORS_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OPERATORS_NAME) as PersonsName;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence OPERATOR_IDENTIFICATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OPERATOR_IDENTIFICATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.OPERATOR_IDENTIFICATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OPERATOR_IDENTIFICATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString ADMITTING_DIAGNOSES_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ADMITTING_DIAGNOSES_DESCRIPTION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.ADMITTING_DIAGNOSES_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ADMITTING_DIAGNOSES_DESCRIPTION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ADMITTING_DIAGNOSES_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ADMITTING_DIAGNOSES_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ADMITTING_DIAGNOSES_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ADMITTING_DIAGNOSES_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString MANUFACTURER_MODEL_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MANUFACTURER_MODEL_NAME))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.MANUFACTURER_MODEL_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MANUFACTURER_MODEL_NAME) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_RESULTS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_RESULTS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_RESULTS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_RESULTS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_STUDY_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_STUDY_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_STUDY_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_STUDY_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_PERFORMED_PROCEDURE_STEP_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_PERFORMED_PROCEDURE_STEP_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_PERFORMED_PROCEDURE_STEP_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_PERFORMED_PROCEDURE_STEP_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_SERIES_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_SERIES_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_SERIES_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_SERIES_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_PATIENT_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_PATIENT_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_PATIENT_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_PATIENT_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_VISIT_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_VISIT_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_VISIT_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_VISIT_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_OVERLAY_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_OVERLAY_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_OVERLAY_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_OVERLAY_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_STEREOMETRIC_INSTANCE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_STEREOMETRIC_INSTANCE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_STEREOMETRIC_INSTANCE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_STEREOMETRIC_INSTANCE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_WAVEFORM_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_WAVEFORM_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_WAVEFORM_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_WAVEFORM_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_IMAGE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_IMAGE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_IMAGE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_IMAGE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_CURVE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_CURVE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_CURVE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_CURVE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_INSTANCE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_INSTANCE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_INSTANCE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_INSTANCE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_REAL_WORLD_VALUE_MAPPING_INSTANCE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_REAL_WORLD_VALUE_MAPPING_INSTANCE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_REAL_WORLD_VALUE_MAPPING_INSTANCE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_REAL_WORLD_VALUE_MAPPING_INSTANCE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier REFERENCED_SOPCLASS_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_SOPCLASS_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.REFERENCED_SOPCLASS_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_SOPCLASS_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier REFERENCED_SOPINSTANCE_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_SOPINSTANCE_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.REFERENCED_SOPINSTANCE_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_SOPINSTANCE_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier SOPCLASSES_SUPPORTED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOPCLASSES_SUPPORTED))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.SOPCLASSES_SUPPORTED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOPCLASSES_SUPPORTED) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString REFERENCED_FRAME_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_FRAME_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.REFERENCED_FRAME_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_FRAME_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong SIMPLE_FRAME_LIST
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SIMPLE_FRAME_LIST))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.SIMPLE_FRAME_LIST }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SIMPLE_FRAME_LIST) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong CALCULATED_FRAME_LIST
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CALCULATED_FRAME_LIST))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.CALCULATED_FRAME_LIST }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CALCULATED_FRAME_LIST) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble TIME_RANGE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TIME_RANGE))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.TIME_RANGE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TIME_RANGE) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence FRAME_EXTRACTION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FRAME_EXTRACTION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.FRAME_EXTRACTION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FRAME_EXTRACTION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier MULTI_FRAME_SOURCE_SOPINSTANCE_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MULTI_FRAME_SOURCE_SOPINSTANCE_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.MULTI_FRAME_SOURCE_SOPINSTANCE_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MULTI_FRAME_SOURCE_SOPINSTANCE_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier TRANSACTION_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TRANSACTION_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.TRANSACTION_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TRANSACTION_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort FAILURE_REASON
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FAILURE_REASON))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.FAILURE_REASON }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FAILURE_REASON) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence FAILED_SOPSEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FAILED_SOPSEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.FAILED_SOPSEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FAILED_SOPSEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_SOPSEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_SOPSEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_SOPSEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_SOPSEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence STUDIES_CONTAINING_OTHER_REFERENCED_INSTANCES_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STUDIES_CONTAINING_OTHER_REFERENCED_INSTANCES_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.STUDIES_CONTAINING_OTHER_REFERENCED_INSTANCES_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STUDIES_CONTAINING_OTHER_REFERENCED_INSTANCES_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence RELATED_SERIES_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RELATED_SERIES_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.RELATED_SERIES_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RELATED_SERIES_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString LOSSY_IMAGE_COMPRESSION_RETIRED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LOSSY_IMAGE_COMPRESSION_RETIRED))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.LOSSY_IMAGE_COMPRESSION_RETIRED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LOSSY_IMAGE_COMPRESSION_RETIRED) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText DERIVATION_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DERIVATION_DESCRIPTION))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.DERIVATION_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DERIVATION_DESCRIPTION) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SOURCE_IMAGE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOURCE_IMAGE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SOURCE_IMAGE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOURCE_IMAGE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString STAGE_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STAGE_NAME))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.STAGE_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STAGE_NAME) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString STAGE_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STAGE_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.STAGE_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STAGE_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString NUMBER_OF_STAGES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_STAGES))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.NUMBER_OF_STAGES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_STAGES) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString VIEW_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VIEW_NAME))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.VIEW_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VIEW_NAME) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString VIEW_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VIEW_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.VIEW_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VIEW_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString NUMBER_OF_EVENT_TIMERS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_EVENT_TIMERS))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.NUMBER_OF_EVENT_TIMERS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_EVENT_TIMERS) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString NUMBER_OF_VIEWS_IN_STAGE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_VIEWS_IN_STAGE))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.NUMBER_OF_VIEWS_IN_STAGE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_VIEWS_IN_STAGE) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString EVENT_ELAPSED_TIMES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.EVENT_ELAPSED_TIMES))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.EVENT_ELAPSED_TIMES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.EVENT_ELAPSED_TIMES) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString EVENT_TIMER_NAMES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.EVENT_TIMER_NAMES))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.EVENT_TIMER_NAMES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.EVENT_TIMER_NAMES) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence EVENT_TIMER_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.EVENT_TIMER_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.EVENT_TIMER_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.EVENT_TIMER_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble EVENT_TIME_OFFSET
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.EVENT_TIME_OFFSET))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.EVENT_TIME_OFFSET }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.EVENT_TIME_OFFSET) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence EVENT_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.EVENT_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.EVENT_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.EVENT_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString START_TRIM
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.START_TRIM))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.START_TRIM }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.START_TRIM) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString STOP_TRIM
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STOP_TRIM))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.STOP_TRIM }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STOP_TRIM) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString RECOMMENDED_DISPLAY_FRAME_RATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RECOMMENDED_DISPLAY_FRAME_RATE))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.RECOMMENDED_DISPLAY_FRAME_RATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RECOMMENDED_DISPLAY_FRAME_RATE) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString TRANSDUCER_POSITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TRANSDUCER_POSITION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.TRANSDUCER_POSITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TRANSDUCER_POSITION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString TRANSDUCER_ORIENTATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TRANSDUCER_ORIENTATION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.TRANSDUCER_ORIENTATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TRANSDUCER_ORIENTATION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString ANATOMIC_STRUCTURE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ANATOMIC_STRUCTURE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.ANATOMIC_STRUCTURE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ANATOMIC_STRUCTURE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ANATOMIC_REGION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ANATOMIC_REGION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ANATOMIC_REGION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ANATOMIC_REGION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ANATOMIC_REGION_MODIFIER_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ANATOMIC_REGION_MODIFIER_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ANATOMIC_REGION_MODIFIER_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ANATOMIC_REGION_MODIFIER_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PRIMARY_ANATOMIC_STRUCTURE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRIMARY_ANATOMIC_STRUCTURE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PRIMARY_ANATOMIC_STRUCTURE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRIMARY_ANATOMIC_STRUCTURE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ANATOMIC_STRUCTURE_SPACE_OR_REGION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ANATOMIC_STRUCTURE_SPACE_OR_REGION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ANATOMIC_STRUCTURE_SPACE_OR_REGION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ANATOMIC_STRUCTURE_SPACE_OR_REGION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PRIMARY_ANATOMIC_STRUCTURE_MODIFIER_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRIMARY_ANATOMIC_STRUCTURE_MODIFIER_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PRIMARY_ANATOMIC_STRUCTURE_MODIFIER_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRIMARY_ANATOMIC_STRUCTURE_MODIFIER_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence TRANSDUCER_POSITION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TRANSDUCER_POSITION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.TRANSDUCER_POSITION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TRANSDUCER_POSITION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence TRANSDUCER_POSITION_MODIFIER_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TRANSDUCER_POSITION_MODIFIER_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.TRANSDUCER_POSITION_MODIFIER_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TRANSDUCER_POSITION_MODIFIER_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence TRANSDUCER_ORIENTATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TRANSDUCER_ORIENTATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.TRANSDUCER_ORIENTATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TRANSDUCER_ORIENTATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence TRANSDUCER_ORIENTATION_MODIFIER_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TRANSDUCER_ORIENTATION_MODIFIER_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.TRANSDUCER_ORIENTATION_MODIFIER_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TRANSDUCER_ORIENTATION_MODIFIER_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ANATOMIC_STRUCTURE_SPACE_OR_REGION_CODE_SEQUENCE_TRIAL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ANATOMIC_STRUCTURE_SPACE_OR_REGION_CODE_SEQUENCE_TRIAL))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ANATOMIC_STRUCTURE_SPACE_OR_REGION_CODE_SEQUENCE_TRIAL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ANATOMIC_STRUCTURE_SPACE_OR_REGION_CODE_SEQUENCE_TRIAL) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ANATOMIC_PORTAL_OF_ENTRANCE_CODE_SEQUENCE_TRIAL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ANATOMIC_PORTAL_OF_ENTRANCE_CODE_SEQUENCE_TRIAL))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ANATOMIC_PORTAL_OF_ENTRANCE_CODE_SEQUENCE_TRIAL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ANATOMIC_PORTAL_OF_ENTRANCE_CODE_SEQUENCE_TRIAL) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ANATOMIC_APPROACH_DIRECTION_CODE_SEQUENCE_TRIAL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ANATOMIC_APPROACH_DIRECTION_CODE_SEQUENCE_TRIAL))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ANATOMIC_APPROACH_DIRECTION_CODE_SEQUENCE_TRIAL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ANATOMIC_APPROACH_DIRECTION_CODE_SEQUENCE_TRIAL) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText ANATOMIC_PERSPECTIVE_DESCRIPTION_TRIAL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ANATOMIC_PERSPECTIVE_DESCRIPTION_TRIAL))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.ANATOMIC_PERSPECTIVE_DESCRIPTION_TRIAL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ANATOMIC_PERSPECTIVE_DESCRIPTION_TRIAL) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ANATOMIC_PERSPECTIVE_CODE_SEQUENCE_TRIAL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ANATOMIC_PERSPECTIVE_CODE_SEQUENCE_TRIAL))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ANATOMIC_PERSPECTIVE_CODE_SEQUENCE_TRIAL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ANATOMIC_PERSPECTIVE_CODE_SEQUENCE_TRIAL) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText ANATOMIC_LOCATION_OF_EXAMINING_INSTRUMENT_DESCRIPTION_TRIAL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ANATOMIC_LOCATION_OF_EXAMINING_INSTRUMENT_DESCRIPTION_TRIAL))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.ANATOMIC_LOCATION_OF_EXAMINING_INSTRUMENT_DESCRIPTION_TRIAL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ANATOMIC_LOCATION_OF_EXAMINING_INSTRUMENT_DESCRIPTION_TRIAL) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ANATOMIC_LOCATION_OF_EXAMINING_INSTRUMENT_CODE_SEQUENCE_TRIAL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ANATOMIC_LOCATION_OF_EXAMINING_INSTRUMENT_CODE_SEQUENCE_TRIAL))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ANATOMIC_LOCATION_OF_EXAMINING_INSTRUMENT_CODE_SEQUENCE_TRIAL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ANATOMIC_LOCATION_OF_EXAMINING_INSTRUMENT_CODE_SEQUENCE_TRIAL) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ANATOMIC_STRUCTURE_SPACE_OR_REGION_MODIFIER_CODE_SEQUENCE_TRIAL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ANATOMIC_STRUCTURE_SPACE_OR_REGION_MODIFIER_CODE_SEQUENCE_TRIAL))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ANATOMIC_STRUCTURE_SPACE_OR_REGION_MODIFIER_CODE_SEQUENCE_TRIAL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ANATOMIC_STRUCTURE_SPACE_OR_REGION_MODIFIER_CODE_SEQUENCE_TRIAL) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ON_AXIS_BACKGROUND_ANATOMIC_STRUCTURE_CODE_SEQUENCE_TRIAL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ON_AXIS_BACKGROUND_ANATOMIC_STRUCTURE_CODE_SEQUENCE_TRIAL))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ON_AXIS_BACKGROUND_ANATOMIC_STRUCTURE_CODE_SEQUENCE_TRIAL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ON_AXIS_BACKGROUND_ANATOMIC_STRUCTURE_CODE_SEQUENCE_TRIAL) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ALTERNATE_REPRESENTATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ALTERNATE_REPRESENTATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ALTERNATE_REPRESENTATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ALTERNATE_REPRESENTATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier IRRADIATION_EVENT_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IRRADIATION_EVENT_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.IRRADIATION_EVENT_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IRRADIATION_EVENT_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongText IDENTIFYING_COMMENTS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IDENTIFYING_COMMENTS))
                {
                    LongText newOb = new LongText { Tag = new Tag { Id = TagHelper.IDENTIFYING_COMMENTS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IDENTIFYING_COMMENTS) as LongText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString FRAME_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FRAME_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.FRAME_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FRAME_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_IMAGE_EVIDENCE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_IMAGE_EVIDENCE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_IMAGE_EVIDENCE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_IMAGE_EVIDENCE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_RAW_DATA_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_RAW_DATA_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_RAW_DATA_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_RAW_DATA_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier CREATOR_VERSION_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CREATOR_VERSION_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.CREATOR_VERSION_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CREATOR_VERSION_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence DERIVATION_IMAGE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DERIVATION_IMAGE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.DERIVATION_IMAGE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DERIVATION_IMAGE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SOURCE_IMAGE_EVIDENCE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOURCE_IMAGE_EVIDENCE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SOURCE_IMAGE_EVIDENCE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOURCE_IMAGE_EVIDENCE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString PIXEL_PRESENTATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PIXEL_PRESENTATION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.PIXEL_PRESENTATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PIXEL_PRESENTATION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString VOLUMETRIC_PROPERTIES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VOLUMETRIC_PROPERTIES))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.VOLUMETRIC_PROPERTIES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VOLUMETRIC_PROPERTIES) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString VOLUME_BASED_CALCULATION_TECHNIQUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VOLUME_BASED_CALCULATION_TECHNIQUE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.VOLUME_BASED_CALCULATION_TECHNIQUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VOLUME_BASED_CALCULATION_TECHNIQUE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString COMPLEX_IMAGE_COMPONENT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COMPLEX_IMAGE_COMPONENT))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.COMPLEX_IMAGE_COMPONENT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COMPLEX_IMAGE_COMPONENT) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString ACQUISITION_CONTRAST
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ACQUISITION_CONTRAST))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.ACQUISITION_CONTRAST }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ACQUISITION_CONTRAST) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence DERIVATION_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DERIVATION_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.DERIVATION_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DERIVATION_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_PRESENTATION_STATE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_PRESENTATION_STATE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_PRESENTATION_STATE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_PRESENTATION_STATE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_OTHER_PLANE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_OTHER_PLANE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_OTHER_PLANE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_OTHER_PLANE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence FRAME_DISPLAY_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FRAME_DISPLAY_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.FRAME_DISPLAY_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FRAME_DISPLAY_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle RECOMMENDED_DISPLAY_FRAME_RATE_IN_FLOAT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RECOMMENDED_DISPLAY_FRAME_RATE_IN_FLOAT))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.RECOMMENDED_DISPLAY_FRAME_RATE_IN_FLOAT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RECOMMENDED_DISPLAY_FRAME_RATE_IN_FLOAT) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SKIP_FRAME_RANGE_FLAG
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SKIP_FRAME_RANGE_FLAG))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SKIP_FRAME_RANGE_FLAG }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SKIP_FRAME_RANGE_FLAG) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public PersonsName PATIENT_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_NAME))
                {
                    PersonsName newOb = new PersonsName { Tag = new Tag { Id = TagHelper.PATIENT_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_NAME) as PersonsName;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString PATIENT_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_ID))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.PATIENT_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_ID) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString ISSUER_OF_PATIENT_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ISSUER_OF_PATIENT_ID))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.ISSUER_OF_PATIENT_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ISSUER_OF_PATIENT_ID) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString TYPE_OF_PATIENT_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TYPE_OF_PATIENT_ID))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.TYPE_OF_PATIENT_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TYPE_OF_PATIENT_ID) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ISSUER_OF_PATIENT_IDQUALIFIERS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ISSUER_OF_PATIENT_IDQUALIFIERS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ISSUER_OF_PATIENT_IDQUALIFIERS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ISSUER_OF_PATIENT_IDQUALIFIERS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateVR PATIENT_BIRTH_DATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_BIRTH_DATE))
                {
                    DateVR newOb = new DateVR { Tag = new Tag { Id = TagHelper.PATIENT_BIRTH_DATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_BIRTH_DATE) as DateVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR PATIENT_BIRTH_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_BIRTH_TIME))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.PATIENT_BIRTH_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_BIRTH_TIME) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString PATIENT_SEX
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_SEX))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.PATIENT_SEX }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_SEX) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PATIENT_INSURANCE_PLAN_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_INSURANCE_PLAN_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PATIENT_INSURANCE_PLAN_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_INSURANCE_PLAN_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PATIENT_PRIMARY_LANGUAGE_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_PRIMARY_LANGUAGE_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PATIENT_PRIMARY_LANGUAGE_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_PRIMARY_LANGUAGE_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PATIENT_PRIMARY_LANGUAGE_MODIFIER_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_PRIMARY_LANGUAGE_MODIFIER_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PATIENT_PRIMARY_LANGUAGE_MODIFIER_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_PRIMARY_LANGUAGE_MODIFIER_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString OTHER_PATIENT_IDS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OTHER_PATIENT_IDS))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.OTHER_PATIENT_IDS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OTHER_PATIENT_IDS) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public PersonsName OTHER_PATIENT_NAMES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OTHER_PATIENT_NAMES))
                {
                    PersonsName newOb = new PersonsName { Tag = new Tag { Id = TagHelper.OTHER_PATIENT_NAMES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OTHER_PATIENT_NAMES) as PersonsName;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence OTHER_PATIENT_IDS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OTHER_PATIENT_IDS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.OTHER_PATIENT_IDS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OTHER_PATIENT_IDS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public PersonsName PATIENT_BIRTH_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_BIRTH_NAME))
                {
                    PersonsName newOb = new PersonsName { Tag = new Tag { Id = TagHelper.PATIENT_BIRTH_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_BIRTH_NAME) as PersonsName;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public AgeString PATIENT_AGE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_AGE))
                {
                    AgeString newOb = new AgeString { Tag = new Tag { Id = TagHelper.PATIENT_AGE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_AGE) as AgeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString PATIENT_SIZE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_SIZE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.PATIENT_SIZE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_SIZE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString PATIENT_WEIGHT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_WEIGHT))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.PATIENT_WEIGHT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_WEIGHT) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString PATIENT_ADDRESS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_ADDRESS))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.PATIENT_ADDRESS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_ADDRESS) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString INSURANCE_PLAN_IDENTIFICATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INSURANCE_PLAN_IDENTIFICATION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.INSURANCE_PLAN_IDENTIFICATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INSURANCE_PLAN_IDENTIFICATION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public PersonsName PATIENT_MOTHER_BIRTH_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_MOTHER_BIRTH_NAME))
                {
                    PersonsName newOb = new PersonsName { Tag = new Tag { Id = TagHelper.PATIENT_MOTHER_BIRTH_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_MOTHER_BIRTH_NAME) as PersonsName;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString MILITARY_RANK
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MILITARY_RANK))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.MILITARY_RANK }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MILITARY_RANK) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString BRANCH_OF_SERVICE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BRANCH_OF_SERVICE))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.BRANCH_OF_SERVICE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BRANCH_OF_SERVICE) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString MEDICAL_RECORD_LOCATOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MEDICAL_RECORD_LOCATOR))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.MEDICAL_RECORD_LOCATOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MEDICAL_RECORD_LOCATOR) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString MEDICAL_ALERTS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MEDICAL_ALERTS))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.MEDICAL_ALERTS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MEDICAL_ALERTS) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString ALLERGIES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ALLERGIES))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.ALLERGIES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ALLERGIES) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString COUNTRY_OF_RESIDENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COUNTRY_OF_RESIDENCE))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.COUNTRY_OF_RESIDENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COUNTRY_OF_RESIDENCE) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString REGION_OF_RESIDENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REGION_OF_RESIDENCE))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.REGION_OF_RESIDENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REGION_OF_RESIDENCE) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString PATIENT_TELEPHONE_NUMBERS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_TELEPHONE_NUMBERS))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.PATIENT_TELEPHONE_NUMBERS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_TELEPHONE_NUMBERS) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString ETHNIC_GROUP
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ETHNIC_GROUP))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.ETHNIC_GROUP }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ETHNIC_GROUP) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString OCCUPATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OCCUPATION))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.OCCUPATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OCCUPATION) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SMOKING_STATUS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SMOKING_STATUS))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SMOKING_STATUS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SMOKING_STATUS) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongText ADDITIONAL_PATIENT_HISTORY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ADDITIONAL_PATIENT_HISTORY))
                {
                    LongText newOb = new LongText { Tag = new Tag { Id = TagHelper.ADDITIONAL_PATIENT_HISTORY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ADDITIONAL_PATIENT_HISTORY) as LongText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort PREGNANCY_STATUS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PREGNANCY_STATUS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.PREGNANCY_STATUS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PREGNANCY_STATUS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateVR LAST_MENSTRUAL_DATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LAST_MENSTRUAL_DATE))
                {
                    DateVR newOb = new DateVR { Tag = new Tag { Id = TagHelper.LAST_MENSTRUAL_DATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LAST_MENSTRUAL_DATE) as DateVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString PATIENT_RELIGIOUS_PREFERENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_RELIGIOUS_PREFERENCE))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.PATIENT_RELIGIOUS_PREFERENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_RELIGIOUS_PREFERENCE) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString PATIENT_SPECIES_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_SPECIES_DESCRIPTION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.PATIENT_SPECIES_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_SPECIES_DESCRIPTION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PATIENT_SPECIES_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_SPECIES_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PATIENT_SPECIES_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_SPECIES_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString PATIENT_SEX_NEUTERED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_SEX_NEUTERED))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.PATIENT_SEX_NEUTERED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_SEX_NEUTERED) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString ANATOMICAL_ORIENTATION_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ANATOMICAL_ORIENTATION_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.ANATOMICAL_ORIENTATION_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ANATOMICAL_ORIENTATION_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString PATIENT_BREED_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_BREED_DESCRIPTION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.PATIENT_BREED_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_BREED_DESCRIPTION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PATIENT_BREED_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_BREED_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PATIENT_BREED_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_BREED_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence BREED_REGISTRATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BREED_REGISTRATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.BREED_REGISTRATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BREED_REGISTRATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString BREED_REGISTRATION_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BREED_REGISTRATION_NUMBER))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.BREED_REGISTRATION_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BREED_REGISTRATION_NUMBER) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence BREED_REGISTRY_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BREED_REGISTRY_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.BREED_REGISTRY_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BREED_REGISTRY_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public PersonsName RESPONSIBLE_PERSON
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RESPONSIBLE_PERSON))
                {
                    PersonsName newOb = new PersonsName { Tag = new Tag { Id = TagHelper.RESPONSIBLE_PERSON }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RESPONSIBLE_PERSON) as PersonsName;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString RESPONSIBLE_PERSON_ROLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RESPONSIBLE_PERSON_ROLE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.RESPONSIBLE_PERSON_ROLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RESPONSIBLE_PERSON_ROLE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString RESPONSIBLE_ORGANIZATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RESPONSIBLE_ORGANIZATION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.RESPONSIBLE_ORGANIZATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RESPONSIBLE_ORGANIZATION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongText PATIENT_COMMENTS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_COMMENTS))
                {
                    LongText newOb = new LongText { Tag = new Tag { Id = TagHelper.PATIENT_COMMENTS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_COMMENTS) as LongText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle EXAMINED_BODY_THICKNESS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.EXAMINED_BODY_THICKNESS))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.EXAMINED_BODY_THICKNESS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.EXAMINED_BODY_THICKNESS) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString CLINICAL_TRIAL_SPONSOR_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CLINICAL_TRIAL_SPONSOR_NAME))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.CLINICAL_TRIAL_SPONSOR_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CLINICAL_TRIAL_SPONSOR_NAME) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString CLINICAL_TRIAL_PROTOCOL_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CLINICAL_TRIAL_PROTOCOL_ID))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.CLINICAL_TRIAL_PROTOCOL_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CLINICAL_TRIAL_PROTOCOL_ID) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString CLINICAL_TRIAL_PROTOCOL_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CLINICAL_TRIAL_PROTOCOL_NAME))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.CLINICAL_TRIAL_PROTOCOL_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CLINICAL_TRIAL_PROTOCOL_NAME) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString CLINICAL_TRIAL_SITE_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CLINICAL_TRIAL_SITE_ID))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.CLINICAL_TRIAL_SITE_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CLINICAL_TRIAL_SITE_ID) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString CLINICAL_TRIAL_SITE_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CLINICAL_TRIAL_SITE_NAME))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.CLINICAL_TRIAL_SITE_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CLINICAL_TRIAL_SITE_NAME) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString CLINICAL_TRIAL_SUBJECT_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CLINICAL_TRIAL_SUBJECT_ID))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.CLINICAL_TRIAL_SUBJECT_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CLINICAL_TRIAL_SUBJECT_ID) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString CLINICAL_TRIAL_SUBJECT_READING_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CLINICAL_TRIAL_SUBJECT_READING_ID))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.CLINICAL_TRIAL_SUBJECT_READING_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CLINICAL_TRIAL_SUBJECT_READING_ID) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString CLINICAL_TRIAL_TIME_POINT_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CLINICAL_TRIAL_TIME_POINT_ID))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.CLINICAL_TRIAL_TIME_POINT_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CLINICAL_TRIAL_TIME_POINT_ID) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText CLINICAL_TRIAL_TIME_POINT_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CLINICAL_TRIAL_TIME_POINT_DESCRIPTION))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.CLINICAL_TRIAL_TIME_POINT_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CLINICAL_TRIAL_TIME_POINT_DESCRIPTION) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString CLINICAL_TRIAL_COORDINATING_CENTER_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CLINICAL_TRIAL_COORDINATING_CENTER_NAME))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.CLINICAL_TRIAL_COORDINATING_CENTER_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CLINICAL_TRIAL_COORDINATING_CENTER_NAME) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString PATIENT_IDENTITY_REMOVED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_IDENTITY_REMOVED))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.PATIENT_IDENTITY_REMOVED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_IDENTITY_REMOVED) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString DEIDENTIFICATION_METHOD
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DEIDENTIFICATION_METHOD))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.DEIDENTIFICATION_METHOD }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DEIDENTIFICATION_METHOD) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence DEIDENTIFICATION_METHOD_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DEIDENTIFICATION_METHOD_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.DEIDENTIFICATION_METHOD_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DEIDENTIFICATION_METHOD_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString CLINICAL_TRIAL_SERIES_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CLINICAL_TRIAL_SERIES_ID))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.CLINICAL_TRIAL_SERIES_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CLINICAL_TRIAL_SERIES_ID) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString CLINICAL_TRIAL_SERIES_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CLINICAL_TRIAL_SERIES_DESCRIPTION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.CLINICAL_TRIAL_SERIES_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CLINICAL_TRIAL_SERIES_DESCRIPTION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString CLINICAL_TRIAL_PROTOCOL_ETHICS_COMMITTEE_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CLINICAL_TRIAL_PROTOCOL_ETHICS_COMMITTEE_NAME))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.CLINICAL_TRIAL_PROTOCOL_ETHICS_COMMITTEE_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CLINICAL_TRIAL_PROTOCOL_ETHICS_COMMITTEE_NAME) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString CLINICAL_TRIAL_PROTOCOL_ETHICS_COMMITTEE_APPROVAL_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CLINICAL_TRIAL_PROTOCOL_ETHICS_COMMITTEE_APPROVAL_NUMBER))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.CLINICAL_TRIAL_PROTOCOL_ETHICS_COMMITTEE_APPROVAL_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CLINICAL_TRIAL_PROTOCOL_ETHICS_COMMITTEE_APPROVAL_NUMBER) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CONSENT_FOR_CLINICAL_TRIAL_USE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONSENT_FOR_CLINICAL_TRIAL_USE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CONSENT_FOR_CLINICAL_TRIAL_USE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONSENT_FOR_CLINICAL_TRIAL_USE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString DISTRIBUTION_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DISTRIBUTION_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.DISTRIBUTION_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DISTRIBUTION_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString CONSENT_FOR_DISTRIBUTION_FLAG
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONSENT_FOR_DISTRIBUTION_FLAG))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.CONSENT_FOR_DISTRIBUTION_FLAG }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONSENT_FOR_DISTRIBUTION_FLAG) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString CONTRAST_BOLUS_AGENT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTRAST_BOLUS_AGENT))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.CONTRAST_BOLUS_AGENT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTRAST_BOLUS_AGENT) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CONTRAST_BOLUS_AGENT_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTRAST_BOLUS_AGENT_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CONTRAST_BOLUS_AGENT_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTRAST_BOLUS_AGENT_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CONTRAST_BOLUS_ADMINISTRATION_ROUTE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTRAST_BOLUS_ADMINISTRATION_ROUTE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CONTRAST_BOLUS_ADMINISTRATION_ROUTE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTRAST_BOLUS_ADMINISTRATION_ROUTE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString BODY_PART_EXAMINED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BODY_PART_EXAMINED))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.BODY_PART_EXAMINED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BODY_PART_EXAMINED) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SCANNING_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCANNING_SEQUENCE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SCANNING_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCANNING_SEQUENCE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SEQUENCE_VARIANT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SEQUENCE_VARIANT))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SEQUENCE_VARIANT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SEQUENCE_VARIANT) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SCAN_OPTIONS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCAN_OPTIONS))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SCAN_OPTIONS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCAN_OPTIONS) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString MRACQUISITION_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MRACQUISITION_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.MRACQUISITION_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MRACQUISITION_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString SEQUENCE_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SEQUENCE_NAME))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.SEQUENCE_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SEQUENCE_NAME) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString ANGIO_FLAG
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ANGIO_FLAG))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.ANGIO_FLAG }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ANGIO_FLAG) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence INTERVENTION_DRUG_INFORMATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INTERVENTION_DRUG_INFORMATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.INTERVENTION_DRUG_INFORMATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INTERVENTION_DRUG_INFORMATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR INTERVENTION_DRUG_STOP_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INTERVENTION_DRUG_STOP_TIME))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.INTERVENTION_DRUG_STOP_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INTERVENTION_DRUG_STOP_TIME) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString INTERVENTION_DRUG_DOSE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INTERVENTION_DRUG_DOSE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.INTERVENTION_DRUG_DOSE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INTERVENTION_DRUG_DOSE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence INTERVENTION_DRUG_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INTERVENTION_DRUG_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.INTERVENTION_DRUG_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INTERVENTION_DRUG_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ADDITIONAL_DRUG_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ADDITIONAL_DRUG_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ADDITIONAL_DRUG_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ADDITIONAL_DRUG_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString RADIONUCLIDE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RADIONUCLIDE))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.RADIONUCLIDE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RADIONUCLIDE) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString RADIOPHARMACEUTICAL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RADIOPHARMACEUTICAL))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.RADIOPHARMACEUTICAL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RADIOPHARMACEUTICAL) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString ENERGY_WINDOW_CENTERLINE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ENERGY_WINDOW_CENTERLINE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.ENERGY_WINDOW_CENTERLINE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ENERGY_WINDOW_CENTERLINE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString ENERGY_WINDOW_TOTAL_WIDTH
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ENERGY_WINDOW_TOTAL_WIDTH))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.ENERGY_WINDOW_TOTAL_WIDTH }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ENERGY_WINDOW_TOTAL_WIDTH) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString INTERVENTION_DRUG_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INTERVENTION_DRUG_NAME))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.INTERVENTION_DRUG_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INTERVENTION_DRUG_NAME) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR INTERVENTION_DRUG_START_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INTERVENTION_DRUG_START_TIME))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.INTERVENTION_DRUG_START_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INTERVENTION_DRUG_START_TIME) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence INTERVENTION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INTERVENTION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.INTERVENTION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INTERVENTION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString THERAPY_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.THERAPY_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.THERAPY_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.THERAPY_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString INTERVENTION_STATUS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INTERVENTION_STATUS))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.INTERVENTION_STATUS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INTERVENTION_STATUS) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString THERAPY_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.THERAPY_DESCRIPTION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.THERAPY_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.THERAPY_DESCRIPTION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText INTERVENTION_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INTERVENTION_DESCRIPTION))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.INTERVENTION_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INTERVENTION_DESCRIPTION) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString CINE_RATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CINE_RATE))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.CINE_RATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CINE_RATE) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString INITIAL_CINE_RUN_STATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INITIAL_CINE_RUN_STATE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.INITIAL_CINE_RUN_STATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INITIAL_CINE_RUN_STATE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString SLICE_THICKNESS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SLICE_THICKNESS))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.SLICE_THICKNESS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SLICE_THICKNESS) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString KVP
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.KVP))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.KVP }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.KVP) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString COUNTS_ACCUMULATED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COUNTS_ACCUMULATED))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.COUNTS_ACCUMULATED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COUNTS_ACCUMULATED) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString ACQUISITION_TERMINATION_CONDITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ACQUISITION_TERMINATION_CONDITION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.ACQUISITION_TERMINATION_CONDITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ACQUISITION_TERMINATION_CONDITION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString EFFECTIVE_DURATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.EFFECTIVE_DURATION))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.EFFECTIVE_DURATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.EFFECTIVE_DURATION) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString ACQUISITION_START_CONDITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ACQUISITION_START_CONDITION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.ACQUISITION_START_CONDITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ACQUISITION_START_CONDITION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString ACQUISITION_START_CONDITION_DATA
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ACQUISITION_START_CONDITION_DATA))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.ACQUISITION_START_CONDITION_DATA }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ACQUISITION_START_CONDITION_DATA) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString ACQUISITION_TERMINATION_CONDITION_DATA
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ACQUISITION_TERMINATION_CONDITION_DATA))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.ACQUISITION_TERMINATION_CONDITION_DATA }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ACQUISITION_TERMINATION_CONDITION_DATA) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString REPETITION_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REPETITION_TIME))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.REPETITION_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REPETITION_TIME) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString ECHO_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ECHO_TIME))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.ECHO_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ECHO_TIME) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString INVERSION_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INVERSION_TIME))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.INVERSION_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INVERSION_TIME) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString NUMBER_OF_AVERAGES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_AVERAGES))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.NUMBER_OF_AVERAGES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_AVERAGES) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString IMAGING_FREQUENCY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGING_FREQUENCY))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.IMAGING_FREQUENCY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGING_FREQUENCY) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString IMAGED_NUCLEUS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGED_NUCLEUS))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.IMAGED_NUCLEUS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGED_NUCLEUS) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString ECHO_NUMBERS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ECHO_NUMBERS))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.ECHO_NUMBERS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ECHO_NUMBERS) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString MAGNETIC_FIELD_STRENGTH
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MAGNETIC_FIELD_STRENGTH))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.MAGNETIC_FIELD_STRENGTH }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MAGNETIC_FIELD_STRENGTH) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString SPACING_BETWEEN_SLICES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SPACING_BETWEEN_SLICES))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.SPACING_BETWEEN_SLICES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SPACING_BETWEEN_SLICES) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString NUMBER_OF_PHASE_ENCODING_STEPS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_PHASE_ENCODING_STEPS))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.NUMBER_OF_PHASE_ENCODING_STEPS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_PHASE_ENCODING_STEPS) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DATA_COLLECTION_DIAMETER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DATA_COLLECTION_DIAMETER))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DATA_COLLECTION_DIAMETER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DATA_COLLECTION_DIAMETER) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString ECHO_TRAIN_LENGTH
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ECHO_TRAIN_LENGTH))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.ECHO_TRAIN_LENGTH }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ECHO_TRAIN_LENGTH) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString PERCENT_SAMPLING
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PERCENT_SAMPLING))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.PERCENT_SAMPLING }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PERCENT_SAMPLING) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString PERCENT_PHASE_FIELD_OF_VIEW
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PERCENT_PHASE_FIELD_OF_VIEW))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.PERCENT_PHASE_FIELD_OF_VIEW }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PERCENT_PHASE_FIELD_OF_VIEW) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString PIXEL_BANDWIDTH
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PIXEL_BANDWIDTH))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.PIXEL_BANDWIDTH }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PIXEL_BANDWIDTH) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString DEVICE_SERIAL_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DEVICE_SERIAL_NUMBER))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.DEVICE_SERIAL_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DEVICE_SERIAL_NUMBER) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier DEVICE_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DEVICE_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.DEVICE_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DEVICE_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString DEVICE_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DEVICE_ID))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.DEVICE_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DEVICE_ID) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString PLATE_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PLATE_ID))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.PLATE_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PLATE_ID) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString GENERATOR_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GENERATOR_ID))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.GENERATOR_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GENERATOR_ID) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString GRID_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GRID_ID))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.GRID_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GRID_ID) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString CASSETTE_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CASSETTE_ID))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.CASSETTE_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CASSETTE_ID) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString GANTRY_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GANTRY_ID))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.GANTRY_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GANTRY_ID) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString SECONDARY_CAPTURE_DEVICE_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SECONDARY_CAPTURE_DEVICE_ID))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.SECONDARY_CAPTURE_DEVICE_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SECONDARY_CAPTURE_DEVICE_ID) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString HARDCOPY_CREATION_DEVICE_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.HARDCOPY_CREATION_DEVICE_ID))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.HARDCOPY_CREATION_DEVICE_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.HARDCOPY_CREATION_DEVICE_ID) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateVR DATE_OF_SECONDARY_CAPTURE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DATE_OF_SECONDARY_CAPTURE))
                {
                    DateVR newOb = new DateVR { Tag = new Tag { Id = TagHelper.DATE_OF_SECONDARY_CAPTURE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DATE_OF_SECONDARY_CAPTURE) as DateVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR TIME_OF_SECONDARY_CAPTURE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TIME_OF_SECONDARY_CAPTURE))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.TIME_OF_SECONDARY_CAPTURE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TIME_OF_SECONDARY_CAPTURE) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString SECONDARY_CAPTURE_DEVICE_MANUFACTURER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SECONDARY_CAPTURE_DEVICE_MANUFACTURER))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.SECONDARY_CAPTURE_DEVICE_MANUFACTURER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SECONDARY_CAPTURE_DEVICE_MANUFACTURER) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString HARDCOPY_DEVICE_MANUFACTURER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.HARDCOPY_DEVICE_MANUFACTURER))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.HARDCOPY_DEVICE_MANUFACTURER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.HARDCOPY_DEVICE_MANUFACTURER) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString SECONDARY_CAPTURE_DEVICE_MANUFACTURER_MODEL_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SECONDARY_CAPTURE_DEVICE_MANUFACTURER_MODEL_NAME))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.SECONDARY_CAPTURE_DEVICE_MANUFACTURER_MODEL_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SECONDARY_CAPTURE_DEVICE_MANUFACTURER_MODEL_NAME) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString SECONDARY_CAPTURE_DEVICE_SOFTWARE_VERSIONS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SECONDARY_CAPTURE_DEVICE_SOFTWARE_VERSIONS))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.SECONDARY_CAPTURE_DEVICE_SOFTWARE_VERSIONS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SECONDARY_CAPTURE_DEVICE_SOFTWARE_VERSIONS) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString HARDCOPY_DEVICE_SOFTWARE_VERSION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.HARDCOPY_DEVICE_SOFTWARE_VERSION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.HARDCOPY_DEVICE_SOFTWARE_VERSION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.HARDCOPY_DEVICE_SOFTWARE_VERSION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString HARDCOPY_DEVICE_MANUFACTURER_MODEL_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.HARDCOPY_DEVICE_MANUFACTURER_MODEL_NAME))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.HARDCOPY_DEVICE_MANUFACTURER_MODEL_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.HARDCOPY_DEVICE_MANUFACTURER_MODEL_NAME) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString SOFTWARE_VERSIONS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOFTWARE_VERSIONS))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.SOFTWARE_VERSIONS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOFTWARE_VERSIONS) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString VIDEO_IMAGE_FORMAT_ACQUIRED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VIDEO_IMAGE_FORMAT_ACQUIRED))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.VIDEO_IMAGE_FORMAT_ACQUIRED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VIDEO_IMAGE_FORMAT_ACQUIRED) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString DIGITAL_IMAGE_FORMAT_ACQUIRED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DIGITAL_IMAGE_FORMAT_ACQUIRED))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.DIGITAL_IMAGE_FORMAT_ACQUIRED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DIGITAL_IMAGE_FORMAT_ACQUIRED) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString PROTOCOL_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PROTOCOL_NAME))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.PROTOCOL_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PROTOCOL_NAME) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString CONTRAST_BOLUS_ROUTE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTRAST_BOLUS_ROUTE))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.CONTRAST_BOLUS_ROUTE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTRAST_BOLUS_ROUTE) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString CONTRAST_BOLUS_VOLUME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTRAST_BOLUS_VOLUME))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.CONTRAST_BOLUS_VOLUME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTRAST_BOLUS_VOLUME) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR CONTRAST_BOLUS_START_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTRAST_BOLUS_START_TIME))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.CONTRAST_BOLUS_START_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTRAST_BOLUS_START_TIME) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR CONTRAST_BOLUS_STOP_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTRAST_BOLUS_STOP_TIME))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.CONTRAST_BOLUS_STOP_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTRAST_BOLUS_STOP_TIME) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString CONTRAST_BOLUS_TOTAL_DOSE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTRAST_BOLUS_TOTAL_DOSE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.CONTRAST_BOLUS_TOTAL_DOSE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTRAST_BOLUS_TOTAL_DOSE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString SYRINGE_COUNTS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SYRINGE_COUNTS))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.SYRINGE_COUNTS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SYRINGE_COUNTS) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString CONTRAST_FLOW_RATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTRAST_FLOW_RATE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.CONTRAST_FLOW_RATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTRAST_FLOW_RATE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString CONTRAST_FLOW_DURATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTRAST_FLOW_DURATION))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.CONTRAST_FLOW_DURATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTRAST_FLOW_DURATION) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString CONTRAST_BOLUS_INGREDIENT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTRAST_BOLUS_INGREDIENT))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.CONTRAST_BOLUS_INGREDIENT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTRAST_BOLUS_INGREDIENT) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString CONTRAST_BOLUS_INGREDIENT_CONCENTRATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTRAST_BOLUS_INGREDIENT_CONCENTRATION))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.CONTRAST_BOLUS_INGREDIENT_CONCENTRATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTRAST_BOLUS_INGREDIENT_CONCENTRATION) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString SPATIAL_RESOLUTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SPATIAL_RESOLUTION))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.SPATIAL_RESOLUTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SPATIAL_RESOLUTION) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString TRIGGER_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TRIGGER_TIME))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.TRIGGER_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TRIGGER_TIME) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString TRIGGER_SOURCE_OR_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TRIGGER_SOURCE_OR_TYPE))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.TRIGGER_SOURCE_OR_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TRIGGER_SOURCE_OR_TYPE) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString NOMINAL_INTERVAL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NOMINAL_INTERVAL))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.NOMINAL_INTERVAL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NOMINAL_INTERVAL) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString FRAME_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FRAME_TIME))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.FRAME_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FRAME_TIME) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString CARDIAC_FRAMING_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CARDIAC_FRAMING_TYPE))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.CARDIAC_FRAMING_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CARDIAC_FRAMING_TYPE) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString FRAME_TIME_VECTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FRAME_TIME_VECTOR))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.FRAME_TIME_VECTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FRAME_TIME_VECTOR) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString FRAME_DELAY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FRAME_DELAY))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.FRAME_DELAY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FRAME_DELAY) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString IMAGE_TRIGGER_DELAY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_TRIGGER_DELAY))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.IMAGE_TRIGGER_DELAY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_TRIGGER_DELAY) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString MULTIPLEX_GROUP_TIME_OFFSET
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MULTIPLEX_GROUP_TIME_OFFSET))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.MULTIPLEX_GROUP_TIME_OFFSET }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MULTIPLEX_GROUP_TIME_OFFSET) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString TRIGGER_TIME_OFFSET
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TRIGGER_TIME_OFFSET))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.TRIGGER_TIME_OFFSET }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TRIGGER_TIME_OFFSET) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SYNCHRONIZATION_TRIGGER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SYNCHRONIZATION_TRIGGER))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SYNCHRONIZATION_TRIGGER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SYNCHRONIZATION_TRIGGER) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort SYNCHRONIZATION_CHANNEL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SYNCHRONIZATION_CHANNEL))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.SYNCHRONIZATION_CHANNEL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SYNCHRONIZATION_CHANNEL) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong TRIGGER_SAMPLE_POSITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TRIGGER_SAMPLE_POSITION))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.TRIGGER_SAMPLE_POSITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TRIGGER_SAMPLE_POSITION) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString RADIOPHARMACEUTICAL_ROUTE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RADIOPHARMACEUTICAL_ROUTE))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.RADIOPHARMACEUTICAL_ROUTE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RADIOPHARMACEUTICAL_ROUTE) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString RADIOPHARMACEUTICAL_VOLUME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RADIOPHARMACEUTICAL_VOLUME))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.RADIOPHARMACEUTICAL_VOLUME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RADIOPHARMACEUTICAL_VOLUME) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR RADIOPHARMACEUTICAL_START_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RADIOPHARMACEUTICAL_START_TIME))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.RADIOPHARMACEUTICAL_START_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RADIOPHARMACEUTICAL_START_TIME) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR RADIOPHARMACEUTICAL_STOP_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RADIOPHARMACEUTICAL_STOP_TIME))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.RADIOPHARMACEUTICAL_STOP_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RADIOPHARMACEUTICAL_STOP_TIME) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString RADIONUCLIDE_TOTAL_DOSE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RADIONUCLIDE_TOTAL_DOSE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.RADIONUCLIDE_TOTAL_DOSE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RADIONUCLIDE_TOTAL_DOSE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString RADIONUCLIDE_HALF_LIFE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RADIONUCLIDE_HALF_LIFE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.RADIONUCLIDE_HALF_LIFE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RADIONUCLIDE_HALF_LIFE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString RADIONUCLIDE_POSITRON_FRACTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RADIONUCLIDE_POSITRON_FRACTION))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.RADIONUCLIDE_POSITRON_FRACTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RADIONUCLIDE_POSITRON_FRACTION) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString RADIOPHARMACEUTICAL_SPECIFIC_ACTIVITY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RADIOPHARMACEUTICAL_SPECIFIC_ACTIVITY))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.RADIOPHARMACEUTICAL_SPECIFIC_ACTIVITY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RADIOPHARMACEUTICAL_SPECIFIC_ACTIVITY) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateTimeVR RADIOPHARMACEUTICAL_START_DATE_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RADIOPHARMACEUTICAL_START_DATE_TIME))
                {
                    DateTimeVR newOb = new DateTimeVR { Tag = new Tag { Id = TagHelper.RADIOPHARMACEUTICAL_START_DATE_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RADIOPHARMACEUTICAL_START_DATE_TIME) as DateTimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateTimeVR RADIOPHARMACEUTICAL_STOP_DATE_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RADIOPHARMACEUTICAL_STOP_DATE_TIME))
                {
                    DateTimeVR newOb = new DateTimeVR { Tag = new Tag { Id = TagHelper.RADIOPHARMACEUTICAL_STOP_DATE_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RADIOPHARMACEUTICAL_STOP_DATE_TIME) as DateTimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString BEAT_REJECTION_FLAG
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BEAT_REJECTION_FLAG))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.BEAT_REJECTION_FLAG }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BEAT_REJECTION_FLAG) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString LOW_RRVALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LOW_RRVALUE))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.LOW_RRVALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LOW_RRVALUE) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString HIGH_RRVALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.HIGH_RRVALUE))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.HIGH_RRVALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.HIGH_RRVALUE) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString INTERVALS_ACQUIRED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INTERVALS_ACQUIRED))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.INTERVALS_ACQUIRED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INTERVALS_ACQUIRED) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString INTERVALS_REJECTED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INTERVALS_REJECTED))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.INTERVALS_REJECTED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INTERVALS_REJECTED) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString PVCREJECTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PVCREJECTION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.PVCREJECTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PVCREJECTION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString SKIP_BEATS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SKIP_BEATS))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.SKIP_BEATS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SKIP_BEATS) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString HEART_RATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.HEART_RATE))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.HEART_RATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.HEART_RATE) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString CARDIAC_NUMBER_OF_IMAGES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CARDIAC_NUMBER_OF_IMAGES))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.CARDIAC_NUMBER_OF_IMAGES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CARDIAC_NUMBER_OF_IMAGES) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString TRIGGER_WINDOW
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TRIGGER_WINDOW))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.TRIGGER_WINDOW }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TRIGGER_WINDOW) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString RECONSTRUCTION_DIAMETER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RECONSTRUCTION_DIAMETER))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.RECONSTRUCTION_DIAMETER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RECONSTRUCTION_DIAMETER) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DISTANCE_SOURCE_TO_DETECTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DISTANCE_SOURCE_TO_DETECTOR))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DISTANCE_SOURCE_TO_DETECTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DISTANCE_SOURCE_TO_DETECTOR) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DISTANCE_SOURCE_TO_PATIENT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DISTANCE_SOURCE_TO_PATIENT))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DISTANCE_SOURCE_TO_PATIENT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DISTANCE_SOURCE_TO_PATIENT) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString ESTIMATED_RADIOGRAPHIC_MAGNIFICATION_FACTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ESTIMATED_RADIOGRAPHIC_MAGNIFICATION_FACTOR))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.ESTIMATED_RADIOGRAPHIC_MAGNIFICATION_FACTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ESTIMATED_RADIOGRAPHIC_MAGNIFICATION_FACTOR) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString GANTRY_DETECTOR_TILT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GANTRY_DETECTOR_TILT))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.GANTRY_DETECTOR_TILT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GANTRY_DETECTOR_TILT) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString GANTRY_DETECTOR_SLEW
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GANTRY_DETECTOR_SLEW))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.GANTRY_DETECTOR_SLEW }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GANTRY_DETECTOR_SLEW) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString TABLE_HEIGHT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TABLE_HEIGHT))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.TABLE_HEIGHT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TABLE_HEIGHT) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString TABLE_TRAVERSE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TABLE_TRAVERSE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.TABLE_TRAVERSE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TABLE_TRAVERSE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString TABLE_MOTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TABLE_MOTION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.TABLE_MOTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TABLE_MOTION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString TABLE_VERTICAL_INCREMENT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TABLE_VERTICAL_INCREMENT))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.TABLE_VERTICAL_INCREMENT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TABLE_VERTICAL_INCREMENT) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString TABLE_LATERAL_INCREMENT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TABLE_LATERAL_INCREMENT))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.TABLE_LATERAL_INCREMENT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TABLE_LATERAL_INCREMENT) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString TABLE_LONGITUDINAL_INCREMENT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TABLE_LONGITUDINAL_INCREMENT))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.TABLE_LONGITUDINAL_INCREMENT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TABLE_LONGITUDINAL_INCREMENT) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString TABLE_ANGLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TABLE_ANGLE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.TABLE_ANGLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TABLE_ANGLE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString TABLE_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TABLE_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.TABLE_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TABLE_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString ROTATION_DIRECTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ROTATION_DIRECTION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.ROTATION_DIRECTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ROTATION_DIRECTION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString ANGULAR_POSITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ANGULAR_POSITION))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.ANGULAR_POSITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ANGULAR_POSITION) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString RADIAL_POSITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RADIAL_POSITION))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.RADIAL_POSITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RADIAL_POSITION) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString SCAN_ARC
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCAN_ARC))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.SCAN_ARC }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCAN_ARC) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString ANGULAR_STEP
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ANGULAR_STEP))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.ANGULAR_STEP }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ANGULAR_STEP) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString CENTER_OF_ROTATION_OFFSET
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CENTER_OF_ROTATION_OFFSET))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.CENTER_OF_ROTATION_OFFSET }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CENTER_OF_ROTATION_OFFSET) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString ROTATION_OFFSET
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ROTATION_OFFSET))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.ROTATION_OFFSET }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ROTATION_OFFSET) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString FIELD_OF_VIEW_SHAPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FIELD_OF_VIEW_SHAPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.FIELD_OF_VIEW_SHAPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FIELD_OF_VIEW_SHAPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString FIELD_OF_VIEW_DIMENSIONS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FIELD_OF_VIEW_DIMENSIONS))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.FIELD_OF_VIEW_DIMENSIONS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FIELD_OF_VIEW_DIMENSIONS) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString EXPOSURE_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.EXPOSURE_TIME))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.EXPOSURE_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.EXPOSURE_TIME) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString XRAY_TUBE_CURRENT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.XRAY_TUBE_CURRENT))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.XRAY_TUBE_CURRENT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.XRAY_TUBE_CURRENT) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString EXPOSURE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.EXPOSURE))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.EXPOSURE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.EXPOSURE) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString EXPOSURE_INU_AS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.EXPOSURE_INU_AS))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.EXPOSURE_INU_AS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.EXPOSURE_INU_AS) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString AVERAGE_PULSE_WIDTH
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.AVERAGE_PULSE_WIDTH))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.AVERAGE_PULSE_WIDTH }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.AVERAGE_PULSE_WIDTH) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString RADIATION_SETTING
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RADIATION_SETTING))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.RADIATION_SETTING }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RADIATION_SETTING) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString RECTIFICATION_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RECTIFICATION_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.RECTIFICATION_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RECTIFICATION_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString RADIATION_MODE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RADIATION_MODE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.RADIATION_MODE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RADIATION_MODE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString IMAGE_AND_FLUOROSCOPY_AREA_DOSE_PRODUCT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_AND_FLUOROSCOPY_AREA_DOSE_PRODUCT))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.IMAGE_AND_FLUOROSCOPY_AREA_DOSE_PRODUCT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_AND_FLUOROSCOPY_AREA_DOSE_PRODUCT) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString FILTER_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FILTER_TYPE))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.FILTER_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FILTER_TYPE) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString TYPE_OF_FILTERS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TYPE_OF_FILTERS))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.TYPE_OF_FILTERS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TYPE_OF_FILTERS) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString INTENSIFIER_SIZE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INTENSIFIER_SIZE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.INTENSIFIER_SIZE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INTENSIFIER_SIZE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString IMAGER_PIXEL_SPACING
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGER_PIXEL_SPACING))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.IMAGER_PIXEL_SPACING }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGER_PIXEL_SPACING) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString GRID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GRID))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.GRID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GRID) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString GENERATOR_POWER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GENERATOR_POWER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.GENERATOR_POWER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GENERATOR_POWER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString COLLIMATOR_GRID_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COLLIMATOR_GRID_NAME))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.COLLIMATOR_GRID_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COLLIMATOR_GRID_NAME) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString COLLIMATOR_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COLLIMATOR_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.COLLIMATOR_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COLLIMATOR_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString FOCAL_DISTANCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FOCAL_DISTANCE))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.FOCAL_DISTANCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FOCAL_DISTANCE) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString XFOCUS_CENTER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.XFOCUS_CENTER))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.XFOCUS_CENTER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.XFOCUS_CENTER) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString YFOCUS_CENTER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.YFOCUS_CENTER))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.YFOCUS_CENTER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.YFOCUS_CENTER) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString FOCAL_SPOTS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FOCAL_SPOTS))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.FOCAL_SPOTS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FOCAL_SPOTS) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString ANODE_TARGET_MATERIAL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ANODE_TARGET_MATERIAL))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.ANODE_TARGET_MATERIAL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ANODE_TARGET_MATERIAL) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString BODY_PART_THICKNESS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BODY_PART_THICKNESS))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.BODY_PART_THICKNESS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BODY_PART_THICKNESS) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString COMPRESSION_FORCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COMPRESSION_FORCE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.COMPRESSION_FORCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COMPRESSION_FORCE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateVR DATE_OF_LAST_CALIBRATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DATE_OF_LAST_CALIBRATION))
                {
                    DateVR newOb = new DateVR { Tag = new Tag { Id = TagHelper.DATE_OF_LAST_CALIBRATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DATE_OF_LAST_CALIBRATION) as DateVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR TIME_OF_LAST_CALIBRATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TIME_OF_LAST_CALIBRATION))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.TIME_OF_LAST_CALIBRATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TIME_OF_LAST_CALIBRATION) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString CONVOLUTION_KERNEL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONVOLUTION_KERNEL))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.CONVOLUTION_KERNEL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONVOLUTION_KERNEL) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString UPPER_LOWER_PIXEL_VALUES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.UPPER_LOWER_PIXEL_VALUES))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.UPPER_LOWER_PIXEL_VALUES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.UPPER_LOWER_PIXEL_VALUES) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString ACTUAL_FRAME_DURATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ACTUAL_FRAME_DURATION))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.ACTUAL_FRAME_DURATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ACTUAL_FRAME_DURATION) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString COUNT_RATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COUNT_RATE))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.COUNT_RATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COUNT_RATE) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort PREFERRED_PLAYBACK_SEQUENCING
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PREFERRED_PLAYBACK_SEQUENCING))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.PREFERRED_PLAYBACK_SEQUENCING }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PREFERRED_PLAYBACK_SEQUENCING) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString RECEIVE_COIL_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RECEIVE_COIL_NAME))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.RECEIVE_COIL_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RECEIVE_COIL_NAME) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString TRANSMIT_COIL_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TRANSMIT_COIL_NAME))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.TRANSMIT_COIL_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TRANSMIT_COIL_NAME) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString PLATE_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PLATE_TYPE))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.PLATE_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PLATE_TYPE) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString PHOSPHOR_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PHOSPHOR_TYPE))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.PHOSPHOR_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PHOSPHOR_TYPE) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString SCAN_VELOCITY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCAN_VELOCITY))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.SCAN_VELOCITY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCAN_VELOCITY) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString WHOLE_BODY_TECHNIQUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.WHOLE_BODY_TECHNIQUE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.WHOLE_BODY_TECHNIQUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.WHOLE_BODY_TECHNIQUE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString SCAN_LENGTH
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCAN_LENGTH))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.SCAN_LENGTH }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCAN_LENGTH) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort ACQUISITION_MATRIX
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ACQUISITION_MATRIX))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.ACQUISITION_MATRIX }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ACQUISITION_MATRIX) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString IN_PLANE_PHASE_ENCODING_DIRECTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IN_PLANE_PHASE_ENCODING_DIRECTION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.IN_PLANE_PHASE_ENCODING_DIRECTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IN_PLANE_PHASE_ENCODING_DIRECTION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString FLIP_ANGLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FLIP_ANGLE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.FLIP_ANGLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FLIP_ANGLE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString VARIABLE_FLIP_ANGLE_FLAG
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VARIABLE_FLIP_ANGLE_FLAG))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.VARIABLE_FLIP_ANGLE_FLAG }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VARIABLE_FLIP_ANGLE_FLAG) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString SAR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SAR))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.SAR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SAR) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString D_BDT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.D_BDT))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.D_BDT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.D_BDT) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString ACQUISITION_DEVICE_PROCESSING_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ACQUISITION_DEVICE_PROCESSING_DESCRIPTION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.ACQUISITION_DEVICE_PROCESSING_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ACQUISITION_DEVICE_PROCESSING_DESCRIPTION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString ACQUISITION_DEVICE_PROCESSING_CODE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ACQUISITION_DEVICE_PROCESSING_CODE))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.ACQUISITION_DEVICE_PROCESSING_CODE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ACQUISITION_DEVICE_PROCESSING_CODE) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString CASSETTE_ORIENTATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CASSETTE_ORIENTATION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.CASSETTE_ORIENTATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CASSETTE_ORIENTATION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString CASSETTE_SIZE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CASSETTE_SIZE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.CASSETTE_SIZE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CASSETTE_SIZE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort EXPOSURES_ON_PLATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.EXPOSURES_ON_PLATE))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.EXPOSURES_ON_PLATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.EXPOSURES_ON_PLATE) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString RELATIVE_XRAY_EXPOSURE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RELATIVE_XRAY_EXPOSURE))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.RELATIVE_XRAY_EXPOSURE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RELATIVE_XRAY_EXPOSURE) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString EXPOSURE_INDEX
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.EXPOSURE_INDEX))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.EXPOSURE_INDEX }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.EXPOSURE_INDEX) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString TARGET_EXPOSURE_INDEX
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TARGET_EXPOSURE_INDEX))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.TARGET_EXPOSURE_INDEX }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TARGET_EXPOSURE_INDEX) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DEVIATION_INDEX
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DEVIATION_INDEX))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DEVIATION_INDEX }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DEVIATION_INDEX) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString COLUMN_ANGULATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COLUMN_ANGULATION))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.COLUMN_ANGULATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COLUMN_ANGULATION) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString TOMO_LAYER_HEIGHT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TOMO_LAYER_HEIGHT))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.TOMO_LAYER_HEIGHT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TOMO_LAYER_HEIGHT) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString TOMO_ANGLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TOMO_ANGLE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.TOMO_ANGLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TOMO_ANGLE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString TOMO_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TOMO_TIME))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.TOMO_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TOMO_TIME) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString TOMO_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TOMO_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.TOMO_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TOMO_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString TOMO_CLASS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TOMO_CLASS))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.TOMO_CLASS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TOMO_CLASS) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString NUMBER_OF_TOMOSYNTHESIS_SOURCE_IMAGES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_TOMOSYNTHESIS_SOURCE_IMAGES))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.NUMBER_OF_TOMOSYNTHESIS_SOURCE_IMAGES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_TOMOSYNTHESIS_SOURCE_IMAGES) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString POSITIONER_MOTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.POSITIONER_MOTION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.POSITIONER_MOTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.POSITIONER_MOTION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString POSITIONER_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.POSITIONER_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.POSITIONER_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.POSITIONER_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString POSITIONER_PRIMARY_ANGLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.POSITIONER_PRIMARY_ANGLE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.POSITIONER_PRIMARY_ANGLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.POSITIONER_PRIMARY_ANGLE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString POSITIONER_SECONDARY_ANGLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.POSITIONER_SECONDARY_ANGLE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.POSITIONER_SECONDARY_ANGLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.POSITIONER_SECONDARY_ANGLE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString POSITIONER_PRIMARY_ANGLE_INCREMENT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.POSITIONER_PRIMARY_ANGLE_INCREMENT))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.POSITIONER_PRIMARY_ANGLE_INCREMENT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.POSITIONER_PRIMARY_ANGLE_INCREMENT) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString POSITIONER_SECONDARY_ANGLE_INCREMENT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.POSITIONER_SECONDARY_ANGLE_INCREMENT))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.POSITIONER_SECONDARY_ANGLE_INCREMENT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.POSITIONER_SECONDARY_ANGLE_INCREMENT) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DETECTOR_PRIMARY_ANGLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DETECTOR_PRIMARY_ANGLE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DETECTOR_PRIMARY_ANGLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DETECTOR_PRIMARY_ANGLE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DETECTOR_SECONDARY_ANGLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DETECTOR_SECONDARY_ANGLE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DETECTOR_SECONDARY_ANGLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DETECTOR_SECONDARY_ANGLE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SHUTTER_SHAPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SHUTTER_SHAPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SHUTTER_SHAPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SHUTTER_SHAPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString SHUTTER_LEFT_VERTICAL_EDGE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SHUTTER_LEFT_VERTICAL_EDGE))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.SHUTTER_LEFT_VERTICAL_EDGE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SHUTTER_LEFT_VERTICAL_EDGE) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString SHUTTER_RIGHT_VERTICAL_EDGE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SHUTTER_RIGHT_VERTICAL_EDGE))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.SHUTTER_RIGHT_VERTICAL_EDGE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SHUTTER_RIGHT_VERTICAL_EDGE) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString SHUTTER_UPPER_HORIZONTAL_EDGE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SHUTTER_UPPER_HORIZONTAL_EDGE))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.SHUTTER_UPPER_HORIZONTAL_EDGE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SHUTTER_UPPER_HORIZONTAL_EDGE) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString SHUTTER_LOWER_HORIZONTAL_EDGE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SHUTTER_LOWER_HORIZONTAL_EDGE))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.SHUTTER_LOWER_HORIZONTAL_EDGE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SHUTTER_LOWER_HORIZONTAL_EDGE) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString CENTER_OF_CIRCULAR_SHUTTER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CENTER_OF_CIRCULAR_SHUTTER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.CENTER_OF_CIRCULAR_SHUTTER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CENTER_OF_CIRCULAR_SHUTTER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString RADIUS_OF_CIRCULAR_SHUTTER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RADIUS_OF_CIRCULAR_SHUTTER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.RADIUS_OF_CIRCULAR_SHUTTER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RADIUS_OF_CIRCULAR_SHUTTER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString VERTICES_OF_THE_POLYGONAL_SHUTTER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VERTICES_OF_THE_POLYGONAL_SHUTTER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.VERTICES_OF_THE_POLYGONAL_SHUTTER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VERTICES_OF_THE_POLYGONAL_SHUTTER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort SHUTTER_PRESENTATION_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SHUTTER_PRESENTATION_VALUE))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.SHUTTER_PRESENTATION_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SHUTTER_PRESENTATION_VALUE) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort SHUTTER_OVERLAY_GROUP
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SHUTTER_OVERLAY_GROUP))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.SHUTTER_OVERLAY_GROUP }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SHUTTER_OVERLAY_GROUP) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort SHUTTER_PRESENTATION_COLOR_CIELAB_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SHUTTER_PRESENTATION_COLOR_CIELAB_VALUE))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.SHUTTER_PRESENTATION_COLOR_CIELAB_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SHUTTER_PRESENTATION_COLOR_CIELAB_VALUE) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString COLLIMATOR_SHAPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COLLIMATOR_SHAPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.COLLIMATOR_SHAPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COLLIMATOR_SHAPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString COLLIMATOR_LEFT_VERTICAL_EDGE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COLLIMATOR_LEFT_VERTICAL_EDGE))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.COLLIMATOR_LEFT_VERTICAL_EDGE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COLLIMATOR_LEFT_VERTICAL_EDGE) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString COLLIMATOR_RIGHT_VERTICAL_EDGE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COLLIMATOR_RIGHT_VERTICAL_EDGE))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.COLLIMATOR_RIGHT_VERTICAL_EDGE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COLLIMATOR_RIGHT_VERTICAL_EDGE) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString COLLIMATOR_UPPER_HORIZONTAL_EDGE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COLLIMATOR_UPPER_HORIZONTAL_EDGE))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.COLLIMATOR_UPPER_HORIZONTAL_EDGE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COLLIMATOR_UPPER_HORIZONTAL_EDGE) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString COLLIMATOR_LOWER_HORIZONTAL_EDGE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COLLIMATOR_LOWER_HORIZONTAL_EDGE))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.COLLIMATOR_LOWER_HORIZONTAL_EDGE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COLLIMATOR_LOWER_HORIZONTAL_EDGE) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString CENTER_OF_CIRCULAR_COLLIMATOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CENTER_OF_CIRCULAR_COLLIMATOR))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.CENTER_OF_CIRCULAR_COLLIMATOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CENTER_OF_CIRCULAR_COLLIMATOR) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString RADIUS_OF_CIRCULAR_COLLIMATOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RADIUS_OF_CIRCULAR_COLLIMATOR))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.RADIUS_OF_CIRCULAR_COLLIMATOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RADIUS_OF_CIRCULAR_COLLIMATOR) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString VERTICES_OF_THE_POLYGONAL_COLLIMATOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VERTICES_OF_THE_POLYGONAL_COLLIMATOR))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.VERTICES_OF_THE_POLYGONAL_COLLIMATOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VERTICES_OF_THE_POLYGONAL_COLLIMATOR) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString ACQUISITION_TIME_SYNCHRONIZED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ACQUISITION_TIME_SYNCHRONIZED))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.ACQUISITION_TIME_SYNCHRONIZED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ACQUISITION_TIME_SYNCHRONIZED) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString TIME_SOURCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TIME_SOURCE))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.TIME_SOURCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TIME_SOURCE) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString TIME_DISTRIBUTION_PROTOCOL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TIME_DISTRIBUTION_PROTOCOL))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.TIME_DISTRIBUTION_PROTOCOL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TIME_DISTRIBUTION_PROTOCOL) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString NTPSOURCE_ADDRESS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NTPSOURCE_ADDRESS))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.NTPSOURCE_ADDRESS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NTPSOURCE_ADDRESS) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString PAGE_NUMBER_VECTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PAGE_NUMBER_VECTOR))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.PAGE_NUMBER_VECTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PAGE_NUMBER_VECTOR) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString FRAME_LABEL_VECTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FRAME_LABEL_VECTOR))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.FRAME_LABEL_VECTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FRAME_LABEL_VECTOR) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString FRAME_PRIMARY_ANGLE_VECTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FRAME_PRIMARY_ANGLE_VECTOR))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.FRAME_PRIMARY_ANGLE_VECTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FRAME_PRIMARY_ANGLE_VECTOR) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString FRAME_SECONDARY_ANGLE_VECTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FRAME_SECONDARY_ANGLE_VECTOR))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.FRAME_SECONDARY_ANGLE_VECTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FRAME_SECONDARY_ANGLE_VECTOR) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString SLICE_LOCATION_VECTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SLICE_LOCATION_VECTOR))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.SLICE_LOCATION_VECTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SLICE_LOCATION_VECTOR) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString DISPLAY_WINDOW_LABEL_VECTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DISPLAY_WINDOW_LABEL_VECTOR))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.DISPLAY_WINDOW_LABEL_VECTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DISPLAY_WINDOW_LABEL_VECTOR) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString NOMINAL_SCANNED_PIXEL_SPACING
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NOMINAL_SCANNED_PIXEL_SPACING))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.NOMINAL_SCANNED_PIXEL_SPACING }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NOMINAL_SCANNED_PIXEL_SPACING) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString DIGITIZING_DEVICE_TRANSPORT_DIRECTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DIGITIZING_DEVICE_TRANSPORT_DIRECTION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.DIGITIZING_DEVICE_TRANSPORT_DIRECTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DIGITIZING_DEVICE_TRANSPORT_DIRECTION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString ROTATION_OF_SCANNED_FILM
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ROTATION_OF_SCANNED_FILM))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.ROTATION_OF_SCANNED_FILM }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ROTATION_OF_SCANNED_FILM) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString IVUSACQUISITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IVUSACQUISITION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.IVUSACQUISITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IVUSACQUISITION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString IVUSPULLBACK_RATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IVUSPULLBACK_RATE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.IVUSPULLBACK_RATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IVUSPULLBACK_RATE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString IVUSGATED_RATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IVUSGATED_RATE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.IVUSGATED_RATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IVUSGATED_RATE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString IVUSPULLBACK_START_FRAME_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IVUSPULLBACK_START_FRAME_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.IVUSPULLBACK_START_FRAME_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IVUSPULLBACK_START_FRAME_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString IVUSPULLBACK_STOP_FRAME_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IVUSPULLBACK_STOP_FRAME_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.IVUSPULLBACK_STOP_FRAME_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IVUSPULLBACK_STOP_FRAME_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString LESION_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LESION_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.LESION_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LESION_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongText ACQUISITION_COMMENTS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ACQUISITION_COMMENTS))
                {
                    LongText newOb = new LongText { Tag = new Tag { Id = TagHelper.ACQUISITION_COMMENTS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ACQUISITION_COMMENTS) as LongText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString OUTPUT_POWER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OUTPUT_POWER))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.OUTPUT_POWER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OUTPUT_POWER) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString TRANSDUCER_DATA
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TRANSDUCER_DATA))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.TRANSDUCER_DATA }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TRANSDUCER_DATA) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString FOCUS_DEPTH
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FOCUS_DEPTH))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.FOCUS_DEPTH }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FOCUS_DEPTH) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString PROCESSING_FUNCTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PROCESSING_FUNCTION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.PROCESSING_FUNCTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PROCESSING_FUNCTION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString POSTPROCESSING_FUNCTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.POSTPROCESSING_FUNCTION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.POSTPROCESSING_FUNCTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.POSTPROCESSING_FUNCTION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString MECHANICAL_INDEX
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MECHANICAL_INDEX))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.MECHANICAL_INDEX }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MECHANICAL_INDEX) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString BONE_THERMAL_INDEX
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BONE_THERMAL_INDEX))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.BONE_THERMAL_INDEX }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BONE_THERMAL_INDEX) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString CRANIAL_THERMAL_INDEX
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CRANIAL_THERMAL_INDEX))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.CRANIAL_THERMAL_INDEX }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CRANIAL_THERMAL_INDEX) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString SOFT_TISSUE_THERMAL_INDEX
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOFT_TISSUE_THERMAL_INDEX))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.SOFT_TISSUE_THERMAL_INDEX }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOFT_TISSUE_THERMAL_INDEX) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString SOFT_TISSUE_FOCUS_THERMAL_INDEX
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOFT_TISSUE_FOCUS_THERMAL_INDEX))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.SOFT_TISSUE_FOCUS_THERMAL_INDEX }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOFT_TISSUE_FOCUS_THERMAL_INDEX) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString SOFT_TISSUE_SURFACE_THERMAL_INDEX
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOFT_TISSUE_SURFACE_THERMAL_INDEX))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.SOFT_TISSUE_SURFACE_THERMAL_INDEX }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOFT_TISSUE_SURFACE_THERMAL_INDEX) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DYNAMIC_RANGE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DYNAMIC_RANGE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DYNAMIC_RANGE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DYNAMIC_RANGE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString TOTAL_GAIN
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TOTAL_GAIN))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.TOTAL_GAIN }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TOTAL_GAIN) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString DEPTH_OF_SCAN_FIELD
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DEPTH_OF_SCAN_FIELD))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.DEPTH_OF_SCAN_FIELD }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DEPTH_OF_SCAN_FIELD) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString PATIENT_POSITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_POSITION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.PATIENT_POSITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_POSITION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString VIEW_POSITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VIEW_POSITION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.VIEW_POSITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VIEW_POSITION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PROJECTION_EPONYMOUS_NAME_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PROJECTION_EPONYMOUS_NAME_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PROJECTION_EPONYMOUS_NAME_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PROJECTION_EPONYMOUS_NAME_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString IMAGE_TRANSFORMATION_MATRIX
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_TRANSFORMATION_MATRIX))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.IMAGE_TRANSFORMATION_MATRIX }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_TRANSFORMATION_MATRIX) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString IMAGE_TRANSLATION_VECTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_TRANSLATION_VECTOR))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.IMAGE_TRANSLATION_VECTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_TRANSLATION_VECTOR) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString SENSITIVITY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SENSITIVITY))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.SENSITIVITY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SENSITIVITY) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SEQUENCE_OF_ULTRASOUND_REGIONS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SEQUENCE_OF_ULTRASOUND_REGIONS))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SEQUENCE_OF_ULTRASOUND_REGIONS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SEQUENCE_OF_ULTRASOUND_REGIONS) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort REGION_SPATIAL_FORMAT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REGION_SPATIAL_FORMAT))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.REGION_SPATIAL_FORMAT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REGION_SPATIAL_FORMAT) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort REGION_DATA_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REGION_DATA_TYPE))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.REGION_DATA_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REGION_DATA_TYPE) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong REGION_FLAGS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REGION_FLAGS))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.REGION_FLAGS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REGION_FLAGS) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong REGION_LOCATION_MIN_X0
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REGION_LOCATION_MIN_X0))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.REGION_LOCATION_MIN_X0 }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REGION_LOCATION_MIN_X0) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong REGION_LOCATION_MIN_Y0
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REGION_LOCATION_MIN_Y0))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.REGION_LOCATION_MIN_Y0 }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REGION_LOCATION_MIN_Y0) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong REGION_LOCATION_MAX_X1
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REGION_LOCATION_MAX_X1))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.REGION_LOCATION_MAX_X1 }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REGION_LOCATION_MAX_X1) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong REGION_LOCATION_MAX_Y1
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REGION_LOCATION_MAX_Y1))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.REGION_LOCATION_MAX_Y1 }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REGION_LOCATION_MAX_Y1) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public SignedLong REFERENCE_PIXEL_X0
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCE_PIXEL_X0))
                {
                    SignedLong newOb = new SignedLong { Tag = new Tag { Id = TagHelper.REFERENCE_PIXEL_X0 }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCE_PIXEL_X0) as SignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public SignedLong REFERENCE_PIXEL_Y0
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCE_PIXEL_Y0))
                {
                    SignedLong newOb = new SignedLong { Tag = new Tag { Id = TagHelper.REFERENCE_PIXEL_Y0 }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCE_PIXEL_Y0) as SignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort PHYSICAL_UNITS_XDIRECTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PHYSICAL_UNITS_XDIRECTION))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.PHYSICAL_UNITS_XDIRECTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PHYSICAL_UNITS_XDIRECTION) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort PHYSICAL_UNITS_YDIRECTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PHYSICAL_UNITS_YDIRECTION))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.PHYSICAL_UNITS_YDIRECTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PHYSICAL_UNITS_YDIRECTION) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble REFERENCE_PIXEL_PHYSICAL_VALUE_X
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCE_PIXEL_PHYSICAL_VALUE_X))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.REFERENCE_PIXEL_PHYSICAL_VALUE_X }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCE_PIXEL_PHYSICAL_VALUE_X) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble REFERENCE_PIXEL_PHYSICAL_VALUE_Y
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCE_PIXEL_PHYSICAL_VALUE_Y))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.REFERENCE_PIXEL_PHYSICAL_VALUE_Y }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCE_PIXEL_PHYSICAL_VALUE_Y) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble PHYSICAL_DELTA_X
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PHYSICAL_DELTA_X))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.PHYSICAL_DELTA_X }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PHYSICAL_DELTA_X) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble PHYSICAL_DELTA_Y
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PHYSICAL_DELTA_Y))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.PHYSICAL_DELTA_Y }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PHYSICAL_DELTA_Y) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong TRANSDUCER_FREQUENCY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TRANSDUCER_FREQUENCY))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.TRANSDUCER_FREQUENCY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TRANSDUCER_FREQUENCY) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString TRANSDUCER_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TRANSDUCER_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.TRANSDUCER_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TRANSDUCER_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong PULSE_REPETITION_FREQUENCY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PULSE_REPETITION_FREQUENCY))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.PULSE_REPETITION_FREQUENCY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PULSE_REPETITION_FREQUENCY) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble DOPPLER_CORRECTION_ANGLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DOPPLER_CORRECTION_ANGLE))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.DOPPLER_CORRECTION_ANGLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DOPPLER_CORRECTION_ANGLE) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble STEERING_ANGLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STEERING_ANGLE))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.STEERING_ANGLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STEERING_ANGLE) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong DOPPLER_SAMPLE_VOLUME_XPOSITION_RETIRED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DOPPLER_SAMPLE_VOLUME_XPOSITION_RETIRED))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.DOPPLER_SAMPLE_VOLUME_XPOSITION_RETIRED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DOPPLER_SAMPLE_VOLUME_XPOSITION_RETIRED) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public SignedLong DOPPLER_SAMPLE_VOLUME_XPOSITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DOPPLER_SAMPLE_VOLUME_XPOSITION))
                {
                    SignedLong newOb = new SignedLong { Tag = new Tag { Id = TagHelper.DOPPLER_SAMPLE_VOLUME_XPOSITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DOPPLER_SAMPLE_VOLUME_XPOSITION) as SignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong DOPPLER_SAMPLE_VOLUME_YPOSITION_RETIRED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DOPPLER_SAMPLE_VOLUME_YPOSITION_RETIRED))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.DOPPLER_SAMPLE_VOLUME_YPOSITION_RETIRED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DOPPLER_SAMPLE_VOLUME_YPOSITION_RETIRED) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public SignedLong DOPPLER_SAMPLE_VOLUME_YPOSITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DOPPLER_SAMPLE_VOLUME_YPOSITION))
                {
                    SignedLong newOb = new SignedLong { Tag = new Tag { Id = TagHelper.DOPPLER_SAMPLE_VOLUME_YPOSITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DOPPLER_SAMPLE_VOLUME_YPOSITION) as SignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong TMLINE_POSITION_X0RETIRED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TMLINE_POSITION_X0RETIRED))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.TMLINE_POSITION_X0RETIRED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TMLINE_POSITION_X0RETIRED) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public SignedLong TMLINE_POSITION_X0
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TMLINE_POSITION_X0))
                {
                    SignedLong newOb = new SignedLong { Tag = new Tag { Id = TagHelper.TMLINE_POSITION_X0 }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TMLINE_POSITION_X0) as SignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong TMLINE_POSITION_Y0RETIRED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TMLINE_POSITION_Y0RETIRED))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.TMLINE_POSITION_Y0RETIRED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TMLINE_POSITION_Y0RETIRED) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public SignedLong TMLINE_POSITION_Y0
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TMLINE_POSITION_Y0))
                {
                    SignedLong newOb = new SignedLong { Tag = new Tag { Id = TagHelper.TMLINE_POSITION_Y0 }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TMLINE_POSITION_Y0) as SignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong TMLINE_POSITION_X1RETIRED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TMLINE_POSITION_X1RETIRED))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.TMLINE_POSITION_X1RETIRED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TMLINE_POSITION_X1RETIRED) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public SignedLong TMLINE_POSITION_X1
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TMLINE_POSITION_X1))
                {
                    SignedLong newOb = new SignedLong { Tag = new Tag { Id = TagHelper.TMLINE_POSITION_X1 }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TMLINE_POSITION_X1) as SignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong TMLINE_POSITION_Y1RETIRED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TMLINE_POSITION_Y1RETIRED))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.TMLINE_POSITION_Y1RETIRED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TMLINE_POSITION_Y1RETIRED) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public SignedLong TMLINE_POSITION_Y1
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TMLINE_POSITION_Y1))
                {
                    SignedLong newOb = new SignedLong { Tag = new Tag { Id = TagHelper.TMLINE_POSITION_Y1 }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TMLINE_POSITION_Y1) as SignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort PIXEL_COMPONENT_ORGANIZATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PIXEL_COMPONENT_ORGANIZATION))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.PIXEL_COMPONENT_ORGANIZATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PIXEL_COMPONENT_ORGANIZATION) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong PIXEL_COMPONENT_MASK
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PIXEL_COMPONENT_MASK))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.PIXEL_COMPONENT_MASK }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PIXEL_COMPONENT_MASK) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong PIXEL_COMPONENT_RANGE_START
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PIXEL_COMPONENT_RANGE_START))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.PIXEL_COMPONENT_RANGE_START }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PIXEL_COMPONENT_RANGE_START) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong PIXEL_COMPONENT_RANGE_STOP
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PIXEL_COMPONENT_RANGE_STOP))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.PIXEL_COMPONENT_RANGE_STOP }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PIXEL_COMPONENT_RANGE_STOP) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort PIXEL_COMPONENT_PHYSICAL_UNITS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PIXEL_COMPONENT_PHYSICAL_UNITS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.PIXEL_COMPONENT_PHYSICAL_UNITS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PIXEL_COMPONENT_PHYSICAL_UNITS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort PIXEL_COMPONENT_DATA_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PIXEL_COMPONENT_DATA_TYPE))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.PIXEL_COMPONENT_DATA_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PIXEL_COMPONENT_DATA_TYPE) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong NUMBER_OF_TABLE_BREAK_POINTS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_TABLE_BREAK_POINTS))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.NUMBER_OF_TABLE_BREAK_POINTS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_TABLE_BREAK_POINTS) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong TABLE_OF_XBREAK_POINTS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TABLE_OF_XBREAK_POINTS))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.TABLE_OF_XBREAK_POINTS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TABLE_OF_XBREAK_POINTS) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble TABLE_OF_YBREAK_POINTS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TABLE_OF_YBREAK_POINTS))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.TABLE_OF_YBREAK_POINTS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TABLE_OF_YBREAK_POINTS) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong NUMBER_OF_TABLE_ENTRIES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_TABLE_ENTRIES))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.NUMBER_OF_TABLE_ENTRIES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_TABLE_ENTRIES) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong TABLE_OF_PIXEL_VALUES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TABLE_OF_PIXEL_VALUES))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.TABLE_OF_PIXEL_VALUES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TABLE_OF_PIXEL_VALUES) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle TABLE_OF_PARAMETER_VALUES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TABLE_OF_PARAMETER_VALUES))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.TABLE_OF_PARAMETER_VALUES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TABLE_OF_PARAMETER_VALUES) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle RWAVE_TIME_VECTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RWAVE_TIME_VECTOR))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.RWAVE_TIME_VECTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RWAVE_TIME_VECTOR) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString DETECTOR_CONDITIONS_NOMINAL_FLAG
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DETECTOR_CONDITIONS_NOMINAL_FLAG))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.DETECTOR_CONDITIONS_NOMINAL_FLAG }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DETECTOR_CONDITIONS_NOMINAL_FLAG) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DETECTOR_TEMPERATURE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DETECTOR_TEMPERATURE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DETECTOR_TEMPERATURE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DETECTOR_TEMPERATURE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString DETECTOR_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DETECTOR_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.DETECTOR_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DETECTOR_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString DETECTOR_CONFIGURATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DETECTOR_CONFIGURATION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.DETECTOR_CONFIGURATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DETECTOR_CONFIGURATION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongText DETECTOR_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DETECTOR_DESCRIPTION))
                {
                    LongText newOb = new LongText { Tag = new Tag { Id = TagHelper.DETECTOR_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DETECTOR_DESCRIPTION) as LongText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongText DETECTOR_MODE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DETECTOR_MODE))
                {
                    LongText newOb = new LongText { Tag = new Tag { Id = TagHelper.DETECTOR_MODE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DETECTOR_MODE) as LongText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString DETECTOR_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DETECTOR_ID))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.DETECTOR_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DETECTOR_ID) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateVR DATE_OF_LAST_DETECTOR_CALIBRATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DATE_OF_LAST_DETECTOR_CALIBRATION))
                {
                    DateVR newOb = new DateVR { Tag = new Tag { Id = TagHelper.DATE_OF_LAST_DETECTOR_CALIBRATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DATE_OF_LAST_DETECTOR_CALIBRATION) as DateVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR TIME_OF_LAST_DETECTOR_CALIBRATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TIME_OF_LAST_DETECTOR_CALIBRATION))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.TIME_OF_LAST_DETECTOR_CALIBRATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TIME_OF_LAST_DETECTOR_CALIBRATION) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString EXPOSURES_ON_DETECTOR_SINCE_LAST_CALIBRATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.EXPOSURES_ON_DETECTOR_SINCE_LAST_CALIBRATION))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.EXPOSURES_ON_DETECTOR_SINCE_LAST_CALIBRATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.EXPOSURES_ON_DETECTOR_SINCE_LAST_CALIBRATION) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString EXPOSURES_ON_DETECTOR_SINCE_MANUFACTURED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.EXPOSURES_ON_DETECTOR_SINCE_MANUFACTURED))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.EXPOSURES_ON_DETECTOR_SINCE_MANUFACTURED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.EXPOSURES_ON_DETECTOR_SINCE_MANUFACTURED) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DETECTOR_TIME_SINCE_LAST_EXPOSURE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DETECTOR_TIME_SINCE_LAST_EXPOSURE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DETECTOR_TIME_SINCE_LAST_EXPOSURE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DETECTOR_TIME_SINCE_LAST_EXPOSURE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DETECTOR_ACTIVE_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DETECTOR_ACTIVE_TIME))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DETECTOR_ACTIVE_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DETECTOR_ACTIVE_TIME) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DETECTOR_ACTIVATION_OFFSET_FROM_EXPOSURE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DETECTOR_ACTIVATION_OFFSET_FROM_EXPOSURE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DETECTOR_ACTIVATION_OFFSET_FROM_EXPOSURE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DETECTOR_ACTIVATION_OFFSET_FROM_EXPOSURE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DETECTOR_BINNING
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DETECTOR_BINNING))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DETECTOR_BINNING }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DETECTOR_BINNING) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DETECTOR_ELEMENT_PHYSICAL_SIZE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DETECTOR_ELEMENT_PHYSICAL_SIZE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DETECTOR_ELEMENT_PHYSICAL_SIZE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DETECTOR_ELEMENT_PHYSICAL_SIZE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DETECTOR_ELEMENT_SPACING
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DETECTOR_ELEMENT_SPACING))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DETECTOR_ELEMENT_SPACING }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DETECTOR_ELEMENT_SPACING) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString DETECTOR_ACTIVE_SHAPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DETECTOR_ACTIVE_SHAPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.DETECTOR_ACTIVE_SHAPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DETECTOR_ACTIVE_SHAPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DETECTOR_ACTIVE_DIMENSIONS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DETECTOR_ACTIVE_DIMENSIONS))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DETECTOR_ACTIVE_DIMENSIONS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DETECTOR_ACTIVE_DIMENSIONS) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DETECTOR_ACTIVE_ORIGIN
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DETECTOR_ACTIVE_ORIGIN))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DETECTOR_ACTIVE_ORIGIN }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DETECTOR_ACTIVE_ORIGIN) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString DETECTOR_MANUFACTURER_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DETECTOR_MANUFACTURER_NAME))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.DETECTOR_MANUFACTURER_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DETECTOR_MANUFACTURER_NAME) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString DETECTOR_MANUFACTURER_MODEL_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DETECTOR_MANUFACTURER_MODEL_NAME))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.DETECTOR_MANUFACTURER_MODEL_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DETECTOR_MANUFACTURER_MODEL_NAME) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString FIELD_OF_VIEW_ORIGIN
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FIELD_OF_VIEW_ORIGIN))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.FIELD_OF_VIEW_ORIGIN }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FIELD_OF_VIEW_ORIGIN) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString FIELD_OF_VIEW_ROTATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FIELD_OF_VIEW_ROTATION))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.FIELD_OF_VIEW_ROTATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FIELD_OF_VIEW_ROTATION) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString FIELD_OF_VIEW_HORIZONTAL_FLIP
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FIELD_OF_VIEW_HORIZONTAL_FLIP))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.FIELD_OF_VIEW_HORIZONTAL_FLIP }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FIELD_OF_VIEW_HORIZONTAL_FLIP) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongText GRID_ABSORBING_MATERIAL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GRID_ABSORBING_MATERIAL))
                {
                    LongText newOb = new LongText { Tag = new Tag { Id = TagHelper.GRID_ABSORBING_MATERIAL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GRID_ABSORBING_MATERIAL) as LongText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongText GRID_SPACING_MATERIAL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GRID_SPACING_MATERIAL))
                {
                    LongText newOb = new LongText { Tag = new Tag { Id = TagHelper.GRID_SPACING_MATERIAL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GRID_SPACING_MATERIAL) as LongText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString GRID_THICKNESS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GRID_THICKNESS))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.GRID_THICKNESS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GRID_THICKNESS) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString GRID_PITCH
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GRID_PITCH))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.GRID_PITCH }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GRID_PITCH) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString GRID_ASPECT_RATIO
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GRID_ASPECT_RATIO))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.GRID_ASPECT_RATIO }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GRID_ASPECT_RATIO) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString GRID_PERIOD
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GRID_PERIOD))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.GRID_PERIOD }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GRID_PERIOD) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString GRID_FOCAL_DISTANCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GRID_FOCAL_DISTANCE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.GRID_FOCAL_DISTANCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GRID_FOCAL_DISTANCE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString FILTER_MATERIAL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FILTER_MATERIAL))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.FILTER_MATERIAL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FILTER_MATERIAL) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString FILTER_THICKNESS_MINIMUM
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FILTER_THICKNESS_MINIMUM))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.FILTER_THICKNESS_MINIMUM }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FILTER_THICKNESS_MINIMUM) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString FILTER_THICKNESS_MAXIMUM
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FILTER_THICKNESS_MAXIMUM))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.FILTER_THICKNESS_MAXIMUM }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FILTER_THICKNESS_MAXIMUM) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle FILTER_BEAM_PATH_LENGTH_MINIMUM
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FILTER_BEAM_PATH_LENGTH_MINIMUM))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.FILTER_BEAM_PATH_LENGTH_MINIMUM }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FILTER_BEAM_PATH_LENGTH_MINIMUM) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle FILTER_BEAM_PATH_LENGTH_MAXIMUM
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FILTER_BEAM_PATH_LENGTH_MAXIMUM))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.FILTER_BEAM_PATH_LENGTH_MAXIMUM }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FILTER_BEAM_PATH_LENGTH_MAXIMUM) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString EXPOSURE_CONTROL_MODE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.EXPOSURE_CONTROL_MODE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.EXPOSURE_CONTROL_MODE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.EXPOSURE_CONTROL_MODE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongText EXPOSURE_CONTROL_MODE_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.EXPOSURE_CONTROL_MODE_DESCRIPTION))
                {
                    LongText newOb = new LongText { Tag = new Tag { Id = TagHelper.EXPOSURE_CONTROL_MODE_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.EXPOSURE_CONTROL_MODE_DESCRIPTION) as LongText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString EXPOSURE_STATUS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.EXPOSURE_STATUS))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.EXPOSURE_STATUS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.EXPOSURE_STATUS) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString PHOTOTIMER_SETTING
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PHOTOTIMER_SETTING))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.PHOTOTIMER_SETTING }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PHOTOTIMER_SETTING) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString EXPOSURE_TIME_INU_S
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.EXPOSURE_TIME_INU_S))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.EXPOSURE_TIME_INU_S }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.EXPOSURE_TIME_INU_S) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString XRAY_TUBE_CURRENT_INU_A
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.XRAY_TUBE_CURRENT_INU_A))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.XRAY_TUBE_CURRENT_INU_A }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.XRAY_TUBE_CURRENT_INU_A) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString CONTENT_QUALIFICATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTENT_QUALIFICATION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.CONTENT_QUALIFICATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTENT_QUALIFICATION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString PULSE_SEQUENCE_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PULSE_SEQUENCE_NAME))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.PULSE_SEQUENCE_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PULSE_SEQUENCE_NAME) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence MRIMAGING_MODIFIER_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MRIMAGING_MODIFIER_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.MRIMAGING_MODIFIER_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MRIMAGING_MODIFIER_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString ECHO_PULSE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ECHO_PULSE_SEQUENCE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.ECHO_PULSE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ECHO_PULSE_SEQUENCE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString INVERSION_RECOVERY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INVERSION_RECOVERY))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.INVERSION_RECOVERY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INVERSION_RECOVERY) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString FLOW_COMPENSATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FLOW_COMPENSATION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.FLOW_COMPENSATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FLOW_COMPENSATION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString MULTIPLE_SPIN_ECHO
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MULTIPLE_SPIN_ECHO))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.MULTIPLE_SPIN_ECHO }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MULTIPLE_SPIN_ECHO) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString MULTI_PLANAR_EXCITATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MULTI_PLANAR_EXCITATION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.MULTI_PLANAR_EXCITATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MULTI_PLANAR_EXCITATION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString PHASE_CONTRAST
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PHASE_CONTRAST))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.PHASE_CONTRAST }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PHASE_CONTRAST) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString TIME_OF_FLIGHT_CONTRAST
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TIME_OF_FLIGHT_CONTRAST))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.TIME_OF_FLIGHT_CONTRAST }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TIME_OF_FLIGHT_CONTRAST) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SPOILING
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SPOILING))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SPOILING }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SPOILING) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString STEADY_STATE_PULSE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STEADY_STATE_PULSE_SEQUENCE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.STEADY_STATE_PULSE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STEADY_STATE_PULSE_SEQUENCE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString ECHO_PLANAR_PULSE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ECHO_PLANAR_PULSE_SEQUENCE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.ECHO_PLANAR_PULSE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ECHO_PLANAR_PULSE_SEQUENCE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble TAG_ANGLE_FIRST_AXIS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TAG_ANGLE_FIRST_AXIS))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.TAG_ANGLE_FIRST_AXIS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TAG_ANGLE_FIRST_AXIS) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString MAGNETIZATION_TRANSFER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MAGNETIZATION_TRANSFER))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.MAGNETIZATION_TRANSFER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MAGNETIZATION_TRANSFER) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString T2PREPARATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.T2PREPARATION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.T2PREPARATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.T2PREPARATION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString BLOOD_SIGNAL_NULLING
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BLOOD_SIGNAL_NULLING))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.BLOOD_SIGNAL_NULLING }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BLOOD_SIGNAL_NULLING) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SATURATION_RECOVERY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SATURATION_RECOVERY))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SATURATION_RECOVERY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SATURATION_RECOVERY) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SPECTRALLY_SELECTED_SUPPRESSION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SPECTRALLY_SELECTED_SUPPRESSION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SPECTRALLY_SELECTED_SUPPRESSION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SPECTRALLY_SELECTED_SUPPRESSION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SPECTRALLY_SELECTED_EXCITATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SPECTRALLY_SELECTED_EXCITATION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SPECTRALLY_SELECTED_EXCITATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SPECTRALLY_SELECTED_EXCITATION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SPATIAL_PRESATURATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SPATIAL_PRESATURATION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SPATIAL_PRESATURATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SPATIAL_PRESATURATION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString TAGGING
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TAGGING))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.TAGGING }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TAGGING) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString OVERSAMPLING_PHASE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERSAMPLING_PHASE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.OVERSAMPLING_PHASE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERSAMPLING_PHASE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble TAG_SPACING_FIRST_DIMENSION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TAG_SPACING_FIRST_DIMENSION))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.TAG_SPACING_FIRST_DIMENSION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TAG_SPACING_FIRST_DIMENSION) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString GEOMETRY_OF_KSPACE_TRAVERSAL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GEOMETRY_OF_KSPACE_TRAVERSAL))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.GEOMETRY_OF_KSPACE_TRAVERSAL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GEOMETRY_OF_KSPACE_TRAVERSAL) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SEGMENTED_KSPACE_TRAVERSAL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SEGMENTED_KSPACE_TRAVERSAL))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SEGMENTED_KSPACE_TRAVERSAL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SEGMENTED_KSPACE_TRAVERSAL) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString RECTILINEAR_PHASE_ENCODE_REORDERING
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RECTILINEAR_PHASE_ENCODE_REORDERING))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.RECTILINEAR_PHASE_ENCODE_REORDERING }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RECTILINEAR_PHASE_ENCODE_REORDERING) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble TAG_THICKNESS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TAG_THICKNESS))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.TAG_THICKNESS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TAG_THICKNESS) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString PARTIAL_FOURIER_DIRECTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PARTIAL_FOURIER_DIRECTION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.PARTIAL_FOURIER_DIRECTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PARTIAL_FOURIER_DIRECTION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString CARDIAC_SYNCHRONIZATION_TECHNIQUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CARDIAC_SYNCHRONIZATION_TECHNIQUE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.CARDIAC_SYNCHRONIZATION_TECHNIQUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CARDIAC_SYNCHRONIZATION_TECHNIQUE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString RECEIVE_COIL_MANUFACTURER_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RECEIVE_COIL_MANUFACTURER_NAME))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.RECEIVE_COIL_MANUFACTURER_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RECEIVE_COIL_MANUFACTURER_NAME) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence MRRECEIVE_COIL_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MRRECEIVE_COIL_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.MRRECEIVE_COIL_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MRRECEIVE_COIL_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString RECEIVE_COIL_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RECEIVE_COIL_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.RECEIVE_COIL_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RECEIVE_COIL_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString QUADRATURE_RECEIVE_COIL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.QUADRATURE_RECEIVE_COIL))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.QUADRATURE_RECEIVE_COIL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.QUADRATURE_RECEIVE_COIL) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence MULTI_COIL_DEFINITION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MULTI_COIL_DEFINITION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.MULTI_COIL_DEFINITION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MULTI_COIL_DEFINITION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString MULTI_COIL_CONFIGURATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MULTI_COIL_CONFIGURATION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.MULTI_COIL_CONFIGURATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MULTI_COIL_CONFIGURATION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString MULTI_COIL_ELEMENT_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MULTI_COIL_ELEMENT_NAME))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.MULTI_COIL_ELEMENT_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MULTI_COIL_ELEMENT_NAME) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString MULTI_COIL_ELEMENT_USED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MULTI_COIL_ELEMENT_USED))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.MULTI_COIL_ELEMENT_USED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MULTI_COIL_ELEMENT_USED) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence MRTRANSMIT_COIL_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MRTRANSMIT_COIL_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.MRTRANSMIT_COIL_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MRTRANSMIT_COIL_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString TRANSMIT_COIL_MANUFACTURER_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TRANSMIT_COIL_MANUFACTURER_NAME))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.TRANSMIT_COIL_MANUFACTURER_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TRANSMIT_COIL_MANUFACTURER_NAME) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString TRANSMIT_COIL_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TRANSMIT_COIL_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.TRANSMIT_COIL_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TRANSMIT_COIL_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble SPECTRAL_WIDTH
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SPECTRAL_WIDTH))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.SPECTRAL_WIDTH }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SPECTRAL_WIDTH) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble CHEMICAL_SHIFT_REFERENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CHEMICAL_SHIFT_REFERENCE))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.CHEMICAL_SHIFT_REFERENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CHEMICAL_SHIFT_REFERENCE) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString VOLUME_LOCALIZATION_TECHNIQUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VOLUME_LOCALIZATION_TECHNIQUE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.VOLUME_LOCALIZATION_TECHNIQUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VOLUME_LOCALIZATION_TECHNIQUE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort MRACQUISITION_FREQUENCY_ENCODING_STEPS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MRACQUISITION_FREQUENCY_ENCODING_STEPS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.MRACQUISITION_FREQUENCY_ENCODING_STEPS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MRACQUISITION_FREQUENCY_ENCODING_STEPS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString DECOUPLING
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DECOUPLING))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.DECOUPLING }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DECOUPLING) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString DECOUPLED_NUCLEUS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DECOUPLED_NUCLEUS))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.DECOUPLED_NUCLEUS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DECOUPLED_NUCLEUS) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble DECOUPLING_FREQUENCY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DECOUPLING_FREQUENCY))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.DECOUPLING_FREQUENCY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DECOUPLING_FREQUENCY) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString DECOUPLING_METHOD
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DECOUPLING_METHOD))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.DECOUPLING_METHOD }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DECOUPLING_METHOD) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble DECOUPLING_CHEMICAL_SHIFT_REFERENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DECOUPLING_CHEMICAL_SHIFT_REFERENCE))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.DECOUPLING_CHEMICAL_SHIFT_REFERENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DECOUPLING_CHEMICAL_SHIFT_REFERENCE) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString KSPACE_FILTERING
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.KSPACE_FILTERING))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.KSPACE_FILTERING }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.KSPACE_FILTERING) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString TIME_DOMAIN_FILTERING
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TIME_DOMAIN_FILTERING))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.TIME_DOMAIN_FILTERING }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TIME_DOMAIN_FILTERING) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort NUMBER_OF_ZERO_FILLS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_ZERO_FILLS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.NUMBER_OF_ZERO_FILLS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_ZERO_FILLS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString BASELINE_CORRECTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BASELINE_CORRECTION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.BASELINE_CORRECTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BASELINE_CORRECTION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble PARALLEL_REDUCTION_FACTOR_IN_PLANE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PARALLEL_REDUCTION_FACTOR_IN_PLANE))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.PARALLEL_REDUCTION_FACTOR_IN_PLANE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PARALLEL_REDUCTION_FACTOR_IN_PLANE) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble CARDIAC_RRINTERVAL_SPECIFIED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CARDIAC_RRINTERVAL_SPECIFIED))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.CARDIAC_RRINTERVAL_SPECIFIED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CARDIAC_RRINTERVAL_SPECIFIED) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble ACQUISITION_DURATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ACQUISITION_DURATION))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.ACQUISITION_DURATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ACQUISITION_DURATION) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateTimeVR FRAME_ACQUISITION_DATE_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FRAME_ACQUISITION_DATE_TIME))
                {
                    DateTimeVR newOb = new DateTimeVR { Tag = new Tag { Id = TagHelper.FRAME_ACQUISITION_DATE_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FRAME_ACQUISITION_DATE_TIME) as DateTimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString DIFFUSION_DIRECTIONALITY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DIFFUSION_DIRECTIONALITY))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.DIFFUSION_DIRECTIONALITY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DIFFUSION_DIRECTIONALITY) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence DIFFUSION_GRADIENT_DIRECTION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DIFFUSION_GRADIENT_DIRECTION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.DIFFUSION_GRADIENT_DIRECTION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DIFFUSION_GRADIENT_DIRECTION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString PARALLEL_ACQUISITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PARALLEL_ACQUISITION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.PARALLEL_ACQUISITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PARALLEL_ACQUISITION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString PARALLEL_ACQUISITION_TECHNIQUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PARALLEL_ACQUISITION_TECHNIQUE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.PARALLEL_ACQUISITION_TECHNIQUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PARALLEL_ACQUISITION_TECHNIQUE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble INVERSION_TIMES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INVERSION_TIMES))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.INVERSION_TIMES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INVERSION_TIMES) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText METABOLITE_MAP_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.METABOLITE_MAP_DESCRIPTION))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.METABOLITE_MAP_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.METABOLITE_MAP_DESCRIPTION) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString PARTIAL_FOURIER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PARTIAL_FOURIER))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.PARTIAL_FOURIER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PARTIAL_FOURIER) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble EFFECTIVE_ECHO_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.EFFECTIVE_ECHO_TIME))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.EFFECTIVE_ECHO_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.EFFECTIVE_ECHO_TIME) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence METABOLITE_MAP_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.METABOLITE_MAP_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.METABOLITE_MAP_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.METABOLITE_MAP_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CHEMICAL_SHIFT_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CHEMICAL_SHIFT_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CHEMICAL_SHIFT_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CHEMICAL_SHIFT_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString CARDIAC_SIGNAL_SOURCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CARDIAC_SIGNAL_SOURCE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.CARDIAC_SIGNAL_SOURCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CARDIAC_SIGNAL_SOURCE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble DIFFUSION_BVALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DIFFUSION_BVALUE))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.DIFFUSION_BVALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DIFFUSION_BVALUE) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble DIFFUSION_GRADIENT_ORIENTATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DIFFUSION_GRADIENT_ORIENTATION))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.DIFFUSION_GRADIENT_ORIENTATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DIFFUSION_GRADIENT_ORIENTATION) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble VELOCITY_ENCODING_DIRECTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VELOCITY_ENCODING_DIRECTION))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.VELOCITY_ENCODING_DIRECTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VELOCITY_ENCODING_DIRECTION) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble VELOCITY_ENCODING_MINIMUM_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VELOCITY_ENCODING_MINIMUM_VALUE))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.VELOCITY_ENCODING_MINIMUM_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VELOCITY_ENCODING_MINIMUM_VALUE) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort NUMBER_OF_KSPACE_TRAJECTORIES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_KSPACE_TRAJECTORIES))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.NUMBER_OF_KSPACE_TRAJECTORIES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_KSPACE_TRAJECTORIES) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString COVERAGE_OF_KSPACE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COVERAGE_OF_KSPACE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.COVERAGE_OF_KSPACE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COVERAGE_OF_KSPACE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong SPECTROSCOPY_ACQUISITION_PHASE_ROWS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SPECTROSCOPY_ACQUISITION_PHASE_ROWS))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.SPECTROSCOPY_ACQUISITION_PHASE_ROWS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SPECTROSCOPY_ACQUISITION_PHASE_ROWS) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble PARALLEL_REDUCTION_FACTOR_IN_PLANE_RETIRED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PARALLEL_REDUCTION_FACTOR_IN_PLANE_RETIRED))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.PARALLEL_REDUCTION_FACTOR_IN_PLANE_RETIRED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PARALLEL_REDUCTION_FACTOR_IN_PLANE_RETIRED) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble TRANSMITTER_FREQUENCY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TRANSMITTER_FREQUENCY))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.TRANSMITTER_FREQUENCY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TRANSMITTER_FREQUENCY) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString RESONANT_NUCLEUS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RESONANT_NUCLEUS))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.RESONANT_NUCLEUS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RESONANT_NUCLEUS) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString FREQUENCY_CORRECTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FREQUENCY_CORRECTION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.FREQUENCY_CORRECTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FREQUENCY_CORRECTION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence MRSPECTROSCOPY_FOVGEOMETRY_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MRSPECTROSCOPY_FOVGEOMETRY_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.MRSPECTROSCOPY_FOVGEOMETRY_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MRSPECTROSCOPY_FOVGEOMETRY_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble SLAB_THICKNESS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SLAB_THICKNESS))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.SLAB_THICKNESS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SLAB_THICKNESS) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble SLAB_ORIENTATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SLAB_ORIENTATION))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.SLAB_ORIENTATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SLAB_ORIENTATION) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble MID_SLAB_POSITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MID_SLAB_POSITION))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.MID_SLAB_POSITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MID_SLAB_POSITION) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence MRSPATIAL_SATURATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MRSPATIAL_SATURATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.MRSPATIAL_SATURATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MRSPATIAL_SATURATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence MRTIMING_AND_RELATED_PARAMETERS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MRTIMING_AND_RELATED_PARAMETERS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.MRTIMING_AND_RELATED_PARAMETERS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MRTIMING_AND_RELATED_PARAMETERS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence MRECHO_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MRECHO_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.MRECHO_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MRECHO_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence MRMODIFIER_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MRMODIFIER_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.MRMODIFIER_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MRMODIFIER_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence MRDIFFUSION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MRDIFFUSION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.MRDIFFUSION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MRDIFFUSION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CARDIAC_SYNCHRONIZATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CARDIAC_SYNCHRONIZATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CARDIAC_SYNCHRONIZATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CARDIAC_SYNCHRONIZATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence MRAVERAGES_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MRAVERAGES_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.MRAVERAGES_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MRAVERAGES_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence MRFOVGEOMETRY_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MRFOVGEOMETRY_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.MRFOVGEOMETRY_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MRFOVGEOMETRY_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence VOLUME_LOCALIZATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VOLUME_LOCALIZATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.VOLUME_LOCALIZATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VOLUME_LOCALIZATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong SPECTROSCOPY_ACQUISITION_DATA_COLUMNS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SPECTROSCOPY_ACQUISITION_DATA_COLUMNS))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.SPECTROSCOPY_ACQUISITION_DATA_COLUMNS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SPECTROSCOPY_ACQUISITION_DATA_COLUMNS) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString DIFFUSION_ANISOTROPY_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DIFFUSION_ANISOTROPY_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.DIFFUSION_ANISOTROPY_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DIFFUSION_ANISOTROPY_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateTimeVR FRAME_REFERENCE_DATE_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FRAME_REFERENCE_DATE_TIME))
                {
                    DateTimeVR newOb = new DateTimeVR { Tag = new Tag { Id = TagHelper.FRAME_REFERENCE_DATE_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FRAME_REFERENCE_DATE_TIME) as DateTimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence MRMETABOLITE_MAP_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MRMETABOLITE_MAP_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.MRMETABOLITE_MAP_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MRMETABOLITE_MAP_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble PARALLEL_REDUCTION_FACTOR_OUT_OF_PLANE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PARALLEL_REDUCTION_FACTOR_OUT_OF_PLANE))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.PARALLEL_REDUCTION_FACTOR_OUT_OF_PLANE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PARALLEL_REDUCTION_FACTOR_OUT_OF_PLANE) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong SPECTROSCOPY_ACQUISITION_OUT_OF_PLANE_PHASE_STEPS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SPECTROSCOPY_ACQUISITION_OUT_OF_PLANE_PHASE_STEPS))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.SPECTROSCOPY_ACQUISITION_OUT_OF_PLANE_PHASE_STEPS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SPECTROSCOPY_ACQUISITION_OUT_OF_PLANE_PHASE_STEPS) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString BULK_MOTION_STATUS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BULK_MOTION_STATUS))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.BULK_MOTION_STATUS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BULK_MOTION_STATUS) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble PARALLEL_REDUCTION_FACTOR_SECOND_IN_PLANE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PARALLEL_REDUCTION_FACTOR_SECOND_IN_PLANE))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.PARALLEL_REDUCTION_FACTOR_SECOND_IN_PLANE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PARALLEL_REDUCTION_FACTOR_SECOND_IN_PLANE) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString CARDIAC_BEAT_REJECTION_TECHNIQUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CARDIAC_BEAT_REJECTION_TECHNIQUE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.CARDIAC_BEAT_REJECTION_TECHNIQUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CARDIAC_BEAT_REJECTION_TECHNIQUE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString RESPIRATORY_MOTION_COMPENSATION_TECHNIQUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RESPIRATORY_MOTION_COMPENSATION_TECHNIQUE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.RESPIRATORY_MOTION_COMPENSATION_TECHNIQUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RESPIRATORY_MOTION_COMPENSATION_TECHNIQUE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString RESPIRATORY_SIGNAL_SOURCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RESPIRATORY_SIGNAL_SOURCE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.RESPIRATORY_SIGNAL_SOURCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RESPIRATORY_SIGNAL_SOURCE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString BULK_MOTION_COMPENSATION_TECHNIQUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BULK_MOTION_COMPENSATION_TECHNIQUE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.BULK_MOTION_COMPENSATION_TECHNIQUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BULK_MOTION_COMPENSATION_TECHNIQUE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString BULK_MOTION_SIGNAL_SOURCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BULK_MOTION_SIGNAL_SOURCE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.BULK_MOTION_SIGNAL_SOURCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BULK_MOTION_SIGNAL_SOURCE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString APPLICABLE_SAFETY_STANDARD_AGENCY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.APPLICABLE_SAFETY_STANDARD_AGENCY))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.APPLICABLE_SAFETY_STANDARD_AGENCY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.APPLICABLE_SAFETY_STANDARD_AGENCY) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString APPLICABLE_SAFETY_STANDARD_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.APPLICABLE_SAFETY_STANDARD_DESCRIPTION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.APPLICABLE_SAFETY_STANDARD_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.APPLICABLE_SAFETY_STANDARD_DESCRIPTION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence OPERATING_MODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OPERATING_MODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.OPERATING_MODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OPERATING_MODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString OPERATING_MODE_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OPERATING_MODE_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.OPERATING_MODE_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OPERATING_MODE_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString OPERATING_MODE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OPERATING_MODE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.OPERATING_MODE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OPERATING_MODE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SPECIFIC_ABSORPTION_RATE_DEFINITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SPECIFIC_ABSORPTION_RATE_DEFINITION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SPECIFIC_ABSORPTION_RATE_DEFINITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SPECIFIC_ABSORPTION_RATE_DEFINITION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString GRADIENT_OUTPUT_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GRADIENT_OUTPUT_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.GRADIENT_OUTPUT_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GRADIENT_OUTPUT_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble SPECIFIC_ABSORPTION_RATE_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SPECIFIC_ABSORPTION_RATE_VALUE))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.SPECIFIC_ABSORPTION_RATE_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SPECIFIC_ABSORPTION_RATE_VALUE) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble GRADIENT_OUTPUT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GRADIENT_OUTPUT))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.GRADIENT_OUTPUT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GRADIENT_OUTPUT) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString FLOW_COMPENSATION_DIRECTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FLOW_COMPENSATION_DIRECTION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.FLOW_COMPENSATION_DIRECTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FLOW_COMPENSATION_DIRECTION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble TAGGING_DELAY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TAGGING_DELAY))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.TAGGING_DELAY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TAGGING_DELAY) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText RESPIRATORY_MOTION_COMPENSATION_TECHNIQUE_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RESPIRATORY_MOTION_COMPENSATION_TECHNIQUE_DESCRIPTION))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.RESPIRATORY_MOTION_COMPENSATION_TECHNIQUE_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RESPIRATORY_MOTION_COMPENSATION_TECHNIQUE_DESCRIPTION) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString RESPIRATORY_SIGNAL_SOURCE_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RESPIRATORY_SIGNAL_SOURCE_ID))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.RESPIRATORY_SIGNAL_SOURCE_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RESPIRATORY_SIGNAL_SOURCE_ID) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble CHEMICAL_SHIFT_MINIMUM_INTEGRATION_LIMIT_IN_HZ
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CHEMICAL_SHIFT_MINIMUM_INTEGRATION_LIMIT_IN_HZ))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.CHEMICAL_SHIFT_MINIMUM_INTEGRATION_LIMIT_IN_HZ }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CHEMICAL_SHIFT_MINIMUM_INTEGRATION_LIMIT_IN_HZ) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble CHEMICAL_SHIFT_MAXIMUM_INTEGRATION_LIMIT_IN_HZ
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CHEMICAL_SHIFT_MAXIMUM_INTEGRATION_LIMIT_IN_HZ))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.CHEMICAL_SHIFT_MAXIMUM_INTEGRATION_LIMIT_IN_HZ }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CHEMICAL_SHIFT_MAXIMUM_INTEGRATION_LIMIT_IN_HZ) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence MRVELOCITY_ENCODING_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MRVELOCITY_ENCODING_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.MRVELOCITY_ENCODING_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MRVELOCITY_ENCODING_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString FIRST_ORDER_PHASE_CORRECTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FIRST_ORDER_PHASE_CORRECTION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.FIRST_ORDER_PHASE_CORRECTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FIRST_ORDER_PHASE_CORRECTION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString WATER_REFERENCED_PHASE_CORRECTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.WATER_REFERENCED_PHASE_CORRECTION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.WATER_REFERENCED_PHASE_CORRECTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.WATER_REFERENCED_PHASE_CORRECTION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString MRSPECTROSCOPY_ACQUISITION_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MRSPECTROSCOPY_ACQUISITION_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.MRSPECTROSCOPY_ACQUISITION_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MRSPECTROSCOPY_ACQUISITION_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString RESPIRATORY_CYCLE_POSITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RESPIRATORY_CYCLE_POSITION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.RESPIRATORY_CYCLE_POSITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RESPIRATORY_CYCLE_POSITION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble VELOCITY_ENCODING_MAXIMUM_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VELOCITY_ENCODING_MAXIMUM_VALUE))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.VELOCITY_ENCODING_MAXIMUM_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VELOCITY_ENCODING_MAXIMUM_VALUE) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble TAG_SPACING_SECOND_DIMENSION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TAG_SPACING_SECOND_DIMENSION))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.TAG_SPACING_SECOND_DIMENSION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TAG_SPACING_SECOND_DIMENSION) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public SignedShort TAG_ANGLE_SECOND_AXIS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TAG_ANGLE_SECOND_AXIS))
                {
                    SignedShort newOb = new SignedShort { Tag = new Tag { Id = TagHelper.TAG_ANGLE_SECOND_AXIS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TAG_ANGLE_SECOND_AXIS) as SignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble FRAME_ACQUISITION_DURATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FRAME_ACQUISITION_DURATION))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.FRAME_ACQUISITION_DURATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FRAME_ACQUISITION_DURATION) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence MRIMAGE_FRAME_TYPE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MRIMAGE_FRAME_TYPE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.MRIMAGE_FRAME_TYPE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MRIMAGE_FRAME_TYPE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence MRSPECTROSCOPY_FRAME_TYPE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MRSPECTROSCOPY_FRAME_TYPE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.MRSPECTROSCOPY_FRAME_TYPE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MRSPECTROSCOPY_FRAME_TYPE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort MRACQUISITION_PHASE_ENCODING_STEPS_IN_PLANE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MRACQUISITION_PHASE_ENCODING_STEPS_IN_PLANE))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.MRACQUISITION_PHASE_ENCODING_STEPS_IN_PLANE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MRACQUISITION_PHASE_ENCODING_STEPS_IN_PLANE) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort MRACQUISITION_PHASE_ENCODING_STEPS_OUT_OF_PLANE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MRACQUISITION_PHASE_ENCODING_STEPS_OUT_OF_PLANE))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.MRACQUISITION_PHASE_ENCODING_STEPS_OUT_OF_PLANE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MRACQUISITION_PHASE_ENCODING_STEPS_OUT_OF_PLANE) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong SPECTROSCOPY_ACQUISITION_PHASE_COLUMNS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SPECTROSCOPY_ACQUISITION_PHASE_COLUMNS))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.SPECTROSCOPY_ACQUISITION_PHASE_COLUMNS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SPECTROSCOPY_ACQUISITION_PHASE_COLUMNS) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString CARDIAC_CYCLE_POSITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CARDIAC_CYCLE_POSITION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.CARDIAC_CYCLE_POSITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CARDIAC_CYCLE_POSITION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SPECIFIC_ABSORPTION_RATE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SPECIFIC_ABSORPTION_RATE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SPECIFIC_ABSORPTION_RATE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SPECIFIC_ABSORPTION_RATE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort RFECHO_TRAIN_LENGTH
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RFECHO_TRAIN_LENGTH))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.RFECHO_TRAIN_LENGTH }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RFECHO_TRAIN_LENGTH) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort GRADIENT_ECHO_TRAIN_LENGTH
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GRADIENT_ECHO_TRAIN_LENGTH))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.GRADIENT_ECHO_TRAIN_LENGTH }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GRADIENT_ECHO_TRAIN_LENGTH) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble CHEMICAL_SHIFT_MINIMUM_INTEGRATION_LIMIT_INPPM
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CHEMICAL_SHIFT_MINIMUM_INTEGRATION_LIMIT_INPPM))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.CHEMICAL_SHIFT_MINIMUM_INTEGRATION_LIMIT_INPPM }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CHEMICAL_SHIFT_MINIMUM_INTEGRATION_LIMIT_INPPM) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble CHEMICAL_SHIFT_MAXIMUM_INTEGRATION_LIMIT_INPPM
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CHEMICAL_SHIFT_MAXIMUM_INTEGRATION_LIMIT_INPPM))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.CHEMICAL_SHIFT_MAXIMUM_INTEGRATION_LIMIT_INPPM }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CHEMICAL_SHIFT_MAXIMUM_INTEGRATION_LIMIT_INPPM) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CTACQUISITION_TYPE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CTACQUISITION_TYPE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CTACQUISITION_TYPE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CTACQUISITION_TYPE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString ACQUISITION_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ACQUISITION_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.ACQUISITION_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ACQUISITION_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble TUBE_ANGLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TUBE_ANGLE))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.TUBE_ANGLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TUBE_ANGLE) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CTACQUISITION_DETAILS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CTACQUISITION_DETAILS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CTACQUISITION_DETAILS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CTACQUISITION_DETAILS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble REVOLUTION_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REVOLUTION_TIME))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.REVOLUTION_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REVOLUTION_TIME) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble SINGLE_COLLIMATION_WIDTH
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SINGLE_COLLIMATION_WIDTH))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.SINGLE_COLLIMATION_WIDTH }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SINGLE_COLLIMATION_WIDTH) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble TOTAL_COLLIMATION_WIDTH
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TOTAL_COLLIMATION_WIDTH))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.TOTAL_COLLIMATION_WIDTH }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TOTAL_COLLIMATION_WIDTH) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CTTABLE_DYNAMICS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CTTABLE_DYNAMICS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CTTABLE_DYNAMICS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CTTABLE_DYNAMICS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble TABLE_SPEED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TABLE_SPEED))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.TABLE_SPEED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TABLE_SPEED) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble TABLE_FEED_PER_ROTATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TABLE_FEED_PER_ROTATION))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.TABLE_FEED_PER_ROTATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TABLE_FEED_PER_ROTATION) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble SPIRAL_PITCH_FACTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SPIRAL_PITCH_FACTOR))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.SPIRAL_PITCH_FACTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SPIRAL_PITCH_FACTOR) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CTGEOMETRY_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CTGEOMETRY_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CTGEOMETRY_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CTGEOMETRY_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble DATA_COLLECTION_CENTER_PATIENT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DATA_COLLECTION_CENTER_PATIENT))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.DATA_COLLECTION_CENTER_PATIENT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DATA_COLLECTION_CENTER_PATIENT) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CTRECONSTRUCTION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CTRECONSTRUCTION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CTRECONSTRUCTION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CTRECONSTRUCTION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString RECONSTRUCTION_ALGORITHM
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RECONSTRUCTION_ALGORITHM))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.RECONSTRUCTION_ALGORITHM }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RECONSTRUCTION_ALGORITHM) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString CONVOLUTION_KERNEL_GROUP
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONVOLUTION_KERNEL_GROUP))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.CONVOLUTION_KERNEL_GROUP }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONVOLUTION_KERNEL_GROUP) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble RECONSTRUCTION_FIELD_OF_VIEW
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RECONSTRUCTION_FIELD_OF_VIEW))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.RECONSTRUCTION_FIELD_OF_VIEW }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RECONSTRUCTION_FIELD_OF_VIEW) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble RECONSTRUCTION_TARGET_CENTER_PATIENT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RECONSTRUCTION_TARGET_CENTER_PATIENT))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.RECONSTRUCTION_TARGET_CENTER_PATIENT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RECONSTRUCTION_TARGET_CENTER_PATIENT) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble RECONSTRUCTION_ANGLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RECONSTRUCTION_ANGLE))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.RECONSTRUCTION_ANGLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RECONSTRUCTION_ANGLE) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString IMAGE_FILTER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_FILTER))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.IMAGE_FILTER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_FILTER) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CTEXPOSURE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CTEXPOSURE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CTEXPOSURE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CTEXPOSURE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble RECONSTRUCTION_PIXEL_SPACING
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RECONSTRUCTION_PIXEL_SPACING))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.RECONSTRUCTION_PIXEL_SPACING }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RECONSTRUCTION_PIXEL_SPACING) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString EXPOSURE_MODULATION_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.EXPOSURE_MODULATION_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.EXPOSURE_MODULATION_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.EXPOSURE_MODULATION_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble ESTIMATED_DOSE_SAVING
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ESTIMATED_DOSE_SAVING))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.ESTIMATED_DOSE_SAVING }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ESTIMATED_DOSE_SAVING) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CTXRAY_DETAILS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CTXRAY_DETAILS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CTXRAY_DETAILS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CTXRAY_DETAILS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CTPOSITION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CTPOSITION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CTPOSITION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CTPOSITION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble TABLE_POSITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TABLE_POSITION))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.TABLE_POSITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TABLE_POSITION) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble EXPOSURE_TIME_INMS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.EXPOSURE_TIME_INMS))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.EXPOSURE_TIME_INMS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.EXPOSURE_TIME_INMS) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CTIMAGE_FRAME_TYPE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CTIMAGE_FRAME_TYPE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CTIMAGE_FRAME_TYPE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CTIMAGE_FRAME_TYPE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble XRAY_TUBE_CURRENT_INM_A
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.XRAY_TUBE_CURRENT_INM_A))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.XRAY_TUBE_CURRENT_INM_A }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.XRAY_TUBE_CURRENT_INM_A) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble EXPOSURE_INM_AS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.EXPOSURE_INM_AS))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.EXPOSURE_INM_AS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.EXPOSURE_INM_AS) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString CONSTANT_VOLUME_FLAG
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONSTANT_VOLUME_FLAG))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.CONSTANT_VOLUME_FLAG }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONSTANT_VOLUME_FLAG) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString FLUOROSCOPY_FLAG
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FLUOROSCOPY_FLAG))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.FLUOROSCOPY_FLAG }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FLUOROSCOPY_FLAG) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble DISTANCE_SOURCE_TO_DATA_COLLECTION_CENTER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DISTANCE_SOURCE_TO_DATA_COLLECTION_CENTER))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.DISTANCE_SOURCE_TO_DATA_COLLECTION_CENTER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DISTANCE_SOURCE_TO_DATA_COLLECTION_CENTER) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort CONTRAST_BOLUS_AGENT_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTRAST_BOLUS_AGENT_NUMBER))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.CONTRAST_BOLUS_AGENT_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTRAST_BOLUS_AGENT_NUMBER) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CONTRAST_BOLUS_INGREDIENT_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTRAST_BOLUS_INGREDIENT_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CONTRAST_BOLUS_INGREDIENT_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTRAST_BOLUS_INGREDIENT_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CONTRAST_ADMINISTRATION_PROFILE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTRAST_ADMINISTRATION_PROFILE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CONTRAST_ADMINISTRATION_PROFILE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTRAST_ADMINISTRATION_PROFILE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CONTRAST_BOLUS_USAGE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTRAST_BOLUS_USAGE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CONTRAST_BOLUS_USAGE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTRAST_BOLUS_USAGE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString CONTRAST_BOLUS_AGENT_ADMINISTERED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTRAST_BOLUS_AGENT_ADMINISTERED))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.CONTRAST_BOLUS_AGENT_ADMINISTERED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTRAST_BOLUS_AGENT_ADMINISTERED) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString CONTRAST_BOLUS_AGENT_DETECTED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTRAST_BOLUS_AGENT_DETECTED))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.CONTRAST_BOLUS_AGENT_DETECTED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTRAST_BOLUS_AGENT_DETECTED) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString CONTRAST_BOLUS_AGENT_PHASE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTRAST_BOLUS_AGENT_PHASE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.CONTRAST_BOLUS_AGENT_PHASE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTRAST_BOLUS_AGENT_PHASE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble CTDIVOL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CTDIVOL))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.CTDIVOL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CTDIVOL) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CTDIPHANTOM_TYPE_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CTDIPHANTOM_TYPE_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CTDIPHANTOM_TYPE_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CTDIPHANTOM_TYPE_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle CALCIUM_SCORING_MASS_FACTOR_PATIENT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CALCIUM_SCORING_MASS_FACTOR_PATIENT))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.CALCIUM_SCORING_MASS_FACTOR_PATIENT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CALCIUM_SCORING_MASS_FACTOR_PATIENT) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle CALCIUM_SCORING_MASS_FACTOR_DEVICE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CALCIUM_SCORING_MASS_FACTOR_DEVICE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.CALCIUM_SCORING_MASS_FACTOR_DEVICE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CALCIUM_SCORING_MASS_FACTOR_DEVICE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle ENERGY_WEIGHTING_FACTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ENERGY_WEIGHTING_FACTOR))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.ENERGY_WEIGHTING_FACTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ENERGY_WEIGHTING_FACTOR) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CTADDITIONAL_XRAY_SOURCE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CTADDITIONAL_XRAY_SOURCE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CTADDITIONAL_XRAY_SOURCE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CTADDITIONAL_XRAY_SOURCE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PROJECTION_PIXEL_CALIBRATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PROJECTION_PIXEL_CALIBRATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PROJECTION_PIXEL_CALIBRATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PROJECTION_PIXEL_CALIBRATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle DISTANCE_SOURCE_TO_ISOCENTER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DISTANCE_SOURCE_TO_ISOCENTER))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.DISTANCE_SOURCE_TO_ISOCENTER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DISTANCE_SOURCE_TO_ISOCENTER) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle DISTANCE_OBJECT_TO_TABLE_TOP
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DISTANCE_OBJECT_TO_TABLE_TOP))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.DISTANCE_OBJECT_TO_TABLE_TOP }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DISTANCE_OBJECT_TO_TABLE_TOP) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle OBJECT_PIXEL_SPACING_IN_CENTER_OF_BEAM
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OBJECT_PIXEL_SPACING_IN_CENTER_OF_BEAM))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.OBJECT_PIXEL_SPACING_IN_CENTER_OF_BEAM }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OBJECT_PIXEL_SPACING_IN_CENTER_OF_BEAM) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence POSITIONER_POSITION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.POSITIONER_POSITION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.POSITIONER_POSITION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.POSITIONER_POSITION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence TABLE_POSITION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TABLE_POSITION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.TABLE_POSITION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TABLE_POSITION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence COLLIMATOR_SHAPE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COLLIMATOR_SHAPE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.COLLIMATOR_SHAPE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COLLIMATOR_SHAPE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence XAXRFFRAME_CHARACTERISTICS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.XAXRFFRAME_CHARACTERISTICS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.XAXRFFRAME_CHARACTERISTICS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.XAXRFFRAME_CHARACTERISTICS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence FRAME_ACQUISITION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FRAME_ACQUISITION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.FRAME_ACQUISITION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FRAME_ACQUISITION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString XRAY_RECEPTOR_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.XRAY_RECEPTOR_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.XRAY_RECEPTOR_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.XRAY_RECEPTOR_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString ACQUISITION_PROTOCOL_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ACQUISITION_PROTOCOL_NAME))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.ACQUISITION_PROTOCOL_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ACQUISITION_PROTOCOL_NAME) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongText ACQUISITION_PROTOCOL_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ACQUISITION_PROTOCOL_DESCRIPTION))
                {
                    LongText newOb = new LongText { Tag = new Tag { Id = TagHelper.ACQUISITION_PROTOCOL_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ACQUISITION_PROTOCOL_DESCRIPTION) as LongText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString CONTRAST_BOLUS_INGREDIENT_OPAQUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTRAST_BOLUS_INGREDIENT_OPAQUE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.CONTRAST_BOLUS_INGREDIENT_OPAQUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTRAST_BOLUS_INGREDIENT_OPAQUE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle DISTANCE_RECEPTOR_PLANE_TO_DETECTOR_HOUSING
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DISTANCE_RECEPTOR_PLANE_TO_DETECTOR_HOUSING))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.DISTANCE_RECEPTOR_PLANE_TO_DETECTOR_HOUSING }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DISTANCE_RECEPTOR_PLANE_TO_DETECTOR_HOUSING) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString INTENSIFIER_ACTIVE_SHAPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INTENSIFIER_ACTIVE_SHAPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.INTENSIFIER_ACTIVE_SHAPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INTENSIFIER_ACTIVE_SHAPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle INTENSIFIER_ACTIVE_DIMENSIONS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INTENSIFIER_ACTIVE_DIMENSIONS))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.INTENSIFIER_ACTIVE_DIMENSIONS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INTENSIFIER_ACTIVE_DIMENSIONS) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle PHYSICAL_DETECTOR_SIZE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PHYSICAL_DETECTOR_SIZE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.PHYSICAL_DETECTOR_SIZE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PHYSICAL_DETECTOR_SIZE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort POSITION_OF_ISOCENTER_PROJECTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.POSITION_OF_ISOCENTER_PROJECTION))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.POSITION_OF_ISOCENTER_PROJECTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.POSITION_OF_ISOCENTER_PROJECTION) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence FIELD_OF_VIEW_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FIELD_OF_VIEW_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.FIELD_OF_VIEW_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FIELD_OF_VIEW_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString FIELD_OF_VIEW_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FIELD_OF_VIEW_DESCRIPTION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.FIELD_OF_VIEW_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FIELD_OF_VIEW_DESCRIPTION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence EXPOSURE_CONTROL_SENSING_REGIONS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.EXPOSURE_CONTROL_SENSING_REGIONS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.EXPOSURE_CONTROL_SENSING_REGIONS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.EXPOSURE_CONTROL_SENSING_REGIONS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString EXPOSURE_CONTROL_SENSING_REGION_SHAPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.EXPOSURE_CONTROL_SENSING_REGION_SHAPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.EXPOSURE_CONTROL_SENSING_REGION_SHAPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.EXPOSURE_CONTROL_SENSING_REGION_SHAPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public SignedShort EXPOSURE_CONTROL_SENSING_REGION_LEFT_VERTICAL_EDGE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.EXPOSURE_CONTROL_SENSING_REGION_LEFT_VERTICAL_EDGE))
                {
                    SignedShort newOb = new SignedShort { Tag = new Tag { Id = TagHelper.EXPOSURE_CONTROL_SENSING_REGION_LEFT_VERTICAL_EDGE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.EXPOSURE_CONTROL_SENSING_REGION_LEFT_VERTICAL_EDGE) as SignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public SignedShort EXPOSURE_CONTROL_SENSING_REGION_RIGHT_VERTICAL_EDGE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.EXPOSURE_CONTROL_SENSING_REGION_RIGHT_VERTICAL_EDGE))
                {
                    SignedShort newOb = new SignedShort { Tag = new Tag { Id = TagHelper.EXPOSURE_CONTROL_SENSING_REGION_RIGHT_VERTICAL_EDGE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.EXPOSURE_CONTROL_SENSING_REGION_RIGHT_VERTICAL_EDGE) as SignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public SignedShort EXPOSURE_CONTROL_SENSING_REGION_UPPER_HORIZONTAL_EDGE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.EXPOSURE_CONTROL_SENSING_REGION_UPPER_HORIZONTAL_EDGE))
                {
                    SignedShort newOb = new SignedShort { Tag = new Tag { Id = TagHelper.EXPOSURE_CONTROL_SENSING_REGION_UPPER_HORIZONTAL_EDGE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.EXPOSURE_CONTROL_SENSING_REGION_UPPER_HORIZONTAL_EDGE) as SignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public SignedShort EXPOSURE_CONTROL_SENSING_REGION_LOWER_HORIZONTAL_EDGE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.EXPOSURE_CONTROL_SENSING_REGION_LOWER_HORIZONTAL_EDGE))
                {
                    SignedShort newOb = new SignedShort { Tag = new Tag { Id = TagHelper.EXPOSURE_CONTROL_SENSING_REGION_LOWER_HORIZONTAL_EDGE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.EXPOSURE_CONTROL_SENSING_REGION_LOWER_HORIZONTAL_EDGE) as SignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public SignedShort CENTER_OF_CIRCULAR_EXPOSURE_CONTROL_SENSING_REGION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CENTER_OF_CIRCULAR_EXPOSURE_CONTROL_SENSING_REGION))
                {
                    SignedShort newOb = new SignedShort { Tag = new Tag { Id = TagHelper.CENTER_OF_CIRCULAR_EXPOSURE_CONTROL_SENSING_REGION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CENTER_OF_CIRCULAR_EXPOSURE_CONTROL_SENSING_REGION) as SignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort RADIUS_OF_CIRCULAR_EXPOSURE_CONTROL_SENSING_REGION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RADIUS_OF_CIRCULAR_EXPOSURE_CONTROL_SENSING_REGION))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.RADIUS_OF_CIRCULAR_EXPOSURE_CONTROL_SENSING_REGION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RADIUS_OF_CIRCULAR_EXPOSURE_CONTROL_SENSING_REGION) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public SignedShort VERTICES_OF_THE_POLYGONAL_EXPOSURE_CONTROL_SENSING_REGION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VERTICES_OF_THE_POLYGONAL_EXPOSURE_CONTROL_SENSING_REGION))
                {
                    SignedShort newOb = new SignedShort { Tag = new Tag { Id = TagHelper.VERTICES_OF_THE_POLYGONAL_EXPOSURE_CONTROL_SENSING_REGION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VERTICES_OF_THE_POLYGONAL_EXPOSURE_CONTROL_SENSING_REGION) as SignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle COLUMN_ANGULATION_PATIENT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COLUMN_ANGULATION_PATIENT))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.COLUMN_ANGULATION_PATIENT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COLUMN_ANGULATION_PATIENT) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle BEAM_ANGLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BEAM_ANGLE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.BEAM_ANGLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BEAM_ANGLE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence FRAME_DETECTOR_PARAMETERS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FRAME_DETECTOR_PARAMETERS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.FRAME_DETECTOR_PARAMETERS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FRAME_DETECTOR_PARAMETERS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle CALCULATED_ANATOMY_THICKNESS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CALCULATED_ANATOMY_THICKNESS))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.CALCULATED_ANATOMY_THICKNESS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CALCULATED_ANATOMY_THICKNESS) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CALIBRATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CALIBRATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CALIBRATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CALIBRATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence OBJECT_THICKNESS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OBJECT_THICKNESS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.OBJECT_THICKNESS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OBJECT_THICKNESS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString PLANE_IDENTIFICATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PLANE_IDENTIFICATION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.PLANE_IDENTIFICATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PLANE_IDENTIFICATION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle FIELD_OF_VIEW_DIMENSIONS_IN_FLOAT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FIELD_OF_VIEW_DIMENSIONS_IN_FLOAT))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.FIELD_OF_VIEW_DIMENSIONS_IN_FLOAT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FIELD_OF_VIEW_DIMENSIONS_IN_FLOAT) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ISOCENTER_REFERENCE_SYSTEM_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ISOCENTER_REFERENCE_SYSTEM_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ISOCENTER_REFERENCE_SYSTEM_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ISOCENTER_REFERENCE_SYSTEM_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle POSITIONER_ISOCENTER_PRIMARY_ANGLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.POSITIONER_ISOCENTER_PRIMARY_ANGLE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.POSITIONER_ISOCENTER_PRIMARY_ANGLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.POSITIONER_ISOCENTER_PRIMARY_ANGLE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle POSITIONER_ISOCENTER_SECONDARY_ANGLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.POSITIONER_ISOCENTER_SECONDARY_ANGLE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.POSITIONER_ISOCENTER_SECONDARY_ANGLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.POSITIONER_ISOCENTER_SECONDARY_ANGLE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle POSITIONER_ISOCENTER_DETECTOR_ROTATION_ANGLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.POSITIONER_ISOCENTER_DETECTOR_ROTATION_ANGLE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.POSITIONER_ISOCENTER_DETECTOR_ROTATION_ANGLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.POSITIONER_ISOCENTER_DETECTOR_ROTATION_ANGLE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle TABLE_XPOSITION_TO_ISOCENTER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TABLE_XPOSITION_TO_ISOCENTER))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.TABLE_XPOSITION_TO_ISOCENTER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TABLE_XPOSITION_TO_ISOCENTER) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle TABLE_YPOSITION_TO_ISOCENTER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TABLE_YPOSITION_TO_ISOCENTER))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.TABLE_YPOSITION_TO_ISOCENTER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TABLE_YPOSITION_TO_ISOCENTER) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle TABLE_ZPOSITION_TO_ISOCENTER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TABLE_ZPOSITION_TO_ISOCENTER))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.TABLE_ZPOSITION_TO_ISOCENTER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TABLE_ZPOSITION_TO_ISOCENTER) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle TABLE_HORIZONTAL_ROTATION_ANGLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TABLE_HORIZONTAL_ROTATION_ANGLE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.TABLE_HORIZONTAL_ROTATION_ANGLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TABLE_HORIZONTAL_ROTATION_ANGLE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle TABLE_HEAD_TILT_ANGLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TABLE_HEAD_TILT_ANGLE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.TABLE_HEAD_TILT_ANGLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TABLE_HEAD_TILT_ANGLE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle TABLE_CRADLE_TILT_ANGLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TABLE_CRADLE_TILT_ANGLE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.TABLE_CRADLE_TILT_ANGLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TABLE_CRADLE_TILT_ANGLE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence FRAME_DISPLAY_SHUTTER_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FRAME_DISPLAY_SHUTTER_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.FRAME_DISPLAY_SHUTTER_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FRAME_DISPLAY_SHUTTER_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle ACQUIRED_IMAGE_AREA_DOSE_PRODUCT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ACQUIRED_IMAGE_AREA_DOSE_PRODUCT))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.ACQUIRED_IMAGE_AREA_DOSE_PRODUCT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ACQUIRED_IMAGE_AREA_DOSE_PRODUCT) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString CARM_POSITIONER_TABLETOP_RELATIONSHIP
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CARM_POSITIONER_TABLETOP_RELATIONSHIP))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.CARM_POSITIONER_TABLETOP_RELATIONSHIP }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CARM_POSITIONER_TABLETOP_RELATIONSHIP) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence XRAY_GEOMETRY_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.XRAY_GEOMETRY_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.XRAY_GEOMETRY_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.XRAY_GEOMETRY_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence IRRADIATION_EVENT_IDENTIFICATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IRRADIATION_EVENT_IDENTIFICATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.IRRADIATION_EVENT_IDENTIFICATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IRRADIATION_EVENT_IDENTIFICATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence XRAY3DFRAME_TYPE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.XRAY3DFRAME_TYPE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.XRAY3DFRAME_TYPE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.XRAY3DFRAME_TYPE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CONTRIBUTING_SOURCES_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTRIBUTING_SOURCES_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CONTRIBUTING_SOURCES_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTRIBUTING_SOURCES_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence XRAY3DACQUISITION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.XRAY3DACQUISITION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.XRAY3DACQUISITION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.XRAY3DACQUISITION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle PRIMARY_POSITIONER_SCAN_ARC
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRIMARY_POSITIONER_SCAN_ARC))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.PRIMARY_POSITIONER_SCAN_ARC }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRIMARY_POSITIONER_SCAN_ARC) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle SECONDARY_POSITIONER_SCAN_ARC
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SECONDARY_POSITIONER_SCAN_ARC))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.SECONDARY_POSITIONER_SCAN_ARC }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SECONDARY_POSITIONER_SCAN_ARC) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle PRIMARY_POSITIONER_SCAN_START_ANGLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRIMARY_POSITIONER_SCAN_START_ANGLE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.PRIMARY_POSITIONER_SCAN_START_ANGLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRIMARY_POSITIONER_SCAN_START_ANGLE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle SECONDARY_POSITIONER_SCAN_START_ANGLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SECONDARY_POSITIONER_SCAN_START_ANGLE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.SECONDARY_POSITIONER_SCAN_START_ANGLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SECONDARY_POSITIONER_SCAN_START_ANGLE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle PRIMARY_POSITIONER_INCREMENT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRIMARY_POSITIONER_INCREMENT))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.PRIMARY_POSITIONER_INCREMENT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRIMARY_POSITIONER_INCREMENT) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle SECONDARY_POSITIONER_INCREMENT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SECONDARY_POSITIONER_INCREMENT))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.SECONDARY_POSITIONER_INCREMENT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SECONDARY_POSITIONER_INCREMENT) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateTimeVR START_ACQUISITION_DATE_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.START_ACQUISITION_DATE_TIME))
                {
                    DateTimeVR newOb = new DateTimeVR { Tag = new Tag { Id = TagHelper.START_ACQUISITION_DATE_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.START_ACQUISITION_DATE_TIME) as DateTimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateTimeVR END_ACQUISITION_DATE_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.END_ACQUISITION_DATE_TIME))
                {
                    DateTimeVR newOb = new DateTimeVR { Tag = new Tag { Id = TagHelper.END_ACQUISITION_DATE_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.END_ACQUISITION_DATE_TIME) as DateTimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString APPLICATION_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.APPLICATION_NAME))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.APPLICATION_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.APPLICATION_NAME) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString APPLICATION_VERSION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.APPLICATION_VERSION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.APPLICATION_VERSION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.APPLICATION_VERSION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString APPLICATION_MANUFACTURER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.APPLICATION_MANUFACTURER))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.APPLICATION_MANUFACTURER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.APPLICATION_MANUFACTURER) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString ALGORITHM_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ALGORITHM_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.ALGORITHM_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ALGORITHM_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString ALGORITHM_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ALGORITHM_DESCRIPTION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.ALGORITHM_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ALGORITHM_DESCRIPTION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence XRAY3DRECONSTRUCTION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.XRAY3DRECONSTRUCTION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.XRAY3DRECONSTRUCTION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.XRAY3DRECONSTRUCTION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString RECONSTRUCTION_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RECONSTRUCTION_DESCRIPTION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.RECONSTRUCTION_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RECONSTRUCTION_DESCRIPTION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PER_PROJECTION_ACQUISITION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PER_PROJECTION_ACQUISITION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PER_PROJECTION_ACQUISITION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PER_PROJECTION_ACQUISITION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence DIFFUSION_BMATRIX_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DIFFUSION_BMATRIX_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.DIFFUSION_BMATRIX_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DIFFUSION_BMATRIX_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble DIFFUSION_BVALUE_XX
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DIFFUSION_BVALUE_XX))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.DIFFUSION_BVALUE_XX }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DIFFUSION_BVALUE_XX) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble DIFFUSION_BVALUE_XY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DIFFUSION_BVALUE_XY))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.DIFFUSION_BVALUE_XY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DIFFUSION_BVALUE_XY) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble DIFFUSION_BVALUE_XZ
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DIFFUSION_BVALUE_XZ))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.DIFFUSION_BVALUE_XZ }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DIFFUSION_BVALUE_XZ) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble DIFFUSION_BVALUE_YY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DIFFUSION_BVALUE_YY))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.DIFFUSION_BVALUE_YY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DIFFUSION_BVALUE_YY) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble DIFFUSION_BVALUE_YZ
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DIFFUSION_BVALUE_YZ))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.DIFFUSION_BVALUE_YZ }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DIFFUSION_BVALUE_YZ) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble DIFFUSION_BVALUE_ZZ
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DIFFUSION_BVALUE_ZZ))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.DIFFUSION_BVALUE_ZZ }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DIFFUSION_BVALUE_ZZ) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateTimeVR DECAY_CORRECTION_DATE_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DECAY_CORRECTION_DATE_TIME))
                {
                    DateTimeVR newOb = new DateTimeVR { Tag = new Tag { Id = TagHelper.DECAY_CORRECTION_DATE_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DECAY_CORRECTION_DATE_TIME) as DateTimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble START_DENSITY_THRESHOLD
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.START_DENSITY_THRESHOLD))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.START_DENSITY_THRESHOLD }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.START_DENSITY_THRESHOLD) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble START_RELATIVE_DENSITY_DIFFERENCE_THRESHOLD
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.START_RELATIVE_DENSITY_DIFFERENCE_THRESHOLD))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.START_RELATIVE_DENSITY_DIFFERENCE_THRESHOLD }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.START_RELATIVE_DENSITY_DIFFERENCE_THRESHOLD) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble START_CARDIAC_TRIGGER_COUNT_THRESHOLD
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.START_CARDIAC_TRIGGER_COUNT_THRESHOLD))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.START_CARDIAC_TRIGGER_COUNT_THRESHOLD }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.START_CARDIAC_TRIGGER_COUNT_THRESHOLD) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble START_RESPIRATORY_TRIGGER_COUNT_THRESHOLD
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.START_RESPIRATORY_TRIGGER_COUNT_THRESHOLD))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.START_RESPIRATORY_TRIGGER_COUNT_THRESHOLD }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.START_RESPIRATORY_TRIGGER_COUNT_THRESHOLD) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble TERMINATION_COUNTS_THRESHOLD
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TERMINATION_COUNTS_THRESHOLD))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.TERMINATION_COUNTS_THRESHOLD }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TERMINATION_COUNTS_THRESHOLD) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble TERMINATION_DENSITY_THRESHOLD
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TERMINATION_DENSITY_THRESHOLD))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.TERMINATION_DENSITY_THRESHOLD }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TERMINATION_DENSITY_THRESHOLD) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble TERMINATION_RELATIVE_DENSITY_THRESHOLD
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TERMINATION_RELATIVE_DENSITY_THRESHOLD))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.TERMINATION_RELATIVE_DENSITY_THRESHOLD }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TERMINATION_RELATIVE_DENSITY_THRESHOLD) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble TERMINATION_TIME_THRESHOLD
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TERMINATION_TIME_THRESHOLD))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.TERMINATION_TIME_THRESHOLD }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TERMINATION_TIME_THRESHOLD) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble TERMINATION_CARDIAC_TRIGGER_COUNT_THRESHOLD
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TERMINATION_CARDIAC_TRIGGER_COUNT_THRESHOLD))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.TERMINATION_CARDIAC_TRIGGER_COUNT_THRESHOLD }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TERMINATION_CARDIAC_TRIGGER_COUNT_THRESHOLD) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble TERMINATION_RESPIRATORY_TRIGGER_COUNT_THRESHOLD
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TERMINATION_RESPIRATORY_TRIGGER_COUNT_THRESHOLD))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.TERMINATION_RESPIRATORY_TRIGGER_COUNT_THRESHOLD }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TERMINATION_RESPIRATORY_TRIGGER_COUNT_THRESHOLD) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString DETECTOR_GEOMETRY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DETECTOR_GEOMETRY))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.DETECTOR_GEOMETRY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DETECTOR_GEOMETRY) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble TRANSVERSE_DETECTOR_SEPARATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TRANSVERSE_DETECTOR_SEPARATION))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.TRANSVERSE_DETECTOR_SEPARATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TRANSVERSE_DETECTOR_SEPARATION) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble AXIAL_DETECTOR_DIMENSION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.AXIAL_DETECTOR_DIMENSION))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.AXIAL_DETECTOR_DIMENSION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.AXIAL_DETECTOR_DIMENSION) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort RADIOPHARMACEUTICAL_AGENT_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RADIOPHARMACEUTICAL_AGENT_NUMBER))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.RADIOPHARMACEUTICAL_AGENT_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RADIOPHARMACEUTICAL_AGENT_NUMBER) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PETFRAME_ACQUISITION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PETFRAME_ACQUISITION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PETFRAME_ACQUISITION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PETFRAME_ACQUISITION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PETDETECTOR_MOTION_DETAILS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PETDETECTOR_MOTION_DETAILS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PETDETECTOR_MOTION_DETAILS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PETDETECTOR_MOTION_DETAILS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PETTABLE_DYNAMICS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PETTABLE_DYNAMICS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PETTABLE_DYNAMICS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PETTABLE_DYNAMICS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PETPOSITION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PETPOSITION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PETPOSITION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PETPOSITION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PETFRAME_CORRECTION_FACTORS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PETFRAME_CORRECTION_FACTORS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PETFRAME_CORRECTION_FACTORS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PETFRAME_CORRECTION_FACTORS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence RADIOPHARMACEUTICAL_USAGE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RADIOPHARMACEUTICAL_USAGE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.RADIOPHARMACEUTICAL_USAGE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RADIOPHARMACEUTICAL_USAGE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString ATTENUATION_CORRECTION_SOURCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ATTENUATION_CORRECTION_SOURCE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.ATTENUATION_CORRECTION_SOURCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ATTENUATION_CORRECTION_SOURCE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort NUMBER_OF_ITERATIONS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_ITERATIONS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.NUMBER_OF_ITERATIONS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_ITERATIONS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort NUMBER_OF_SUBSETS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_SUBSETS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.NUMBER_OF_SUBSETS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_SUBSETS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PETRECONSTRUCTION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PETRECONSTRUCTION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PETRECONSTRUCTION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PETRECONSTRUCTION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PETFRAME_TYPE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PETFRAME_TYPE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PETFRAME_TYPE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PETFRAME_TYPE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString TIME_OF_FLIGHT_INFORMATION_USED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TIME_OF_FLIGHT_INFORMATION_USED))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.TIME_OF_FLIGHT_INFORMATION_USED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TIME_OF_FLIGHT_INFORMATION_USED) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString RECONSTRUCTION_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RECONSTRUCTION_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.RECONSTRUCTION_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RECONSTRUCTION_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString DECAY_CORRECTED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DECAY_CORRECTED))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.DECAY_CORRECTED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DECAY_CORRECTED) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString ATTENUATION_CORRECTED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ATTENUATION_CORRECTED))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.ATTENUATION_CORRECTED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ATTENUATION_CORRECTED) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SCATTER_CORRECTED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCATTER_CORRECTED))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SCATTER_CORRECTED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCATTER_CORRECTED) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString DEAD_TIME_CORRECTED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DEAD_TIME_CORRECTED))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.DEAD_TIME_CORRECTED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DEAD_TIME_CORRECTED) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString GANTRY_MOTION_CORRECTED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GANTRY_MOTION_CORRECTED))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.GANTRY_MOTION_CORRECTED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GANTRY_MOTION_CORRECTED) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString PATIENT_MOTION_CORRECTED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_MOTION_CORRECTED))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.PATIENT_MOTION_CORRECTED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_MOTION_CORRECTED) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString COUNT_LOSS_NORMALIZATION_CORRECTED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COUNT_LOSS_NORMALIZATION_CORRECTED))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.COUNT_LOSS_NORMALIZATION_CORRECTED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COUNT_LOSS_NORMALIZATION_CORRECTED) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString RANDOMS_CORRECTED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RANDOMS_CORRECTED))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.RANDOMS_CORRECTED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RANDOMS_CORRECTED) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString NON_UNIFORM_RADIAL_SAMPLING_CORRECTED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NON_UNIFORM_RADIAL_SAMPLING_CORRECTED))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.NON_UNIFORM_RADIAL_SAMPLING_CORRECTED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NON_UNIFORM_RADIAL_SAMPLING_CORRECTED) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SENSITIVITY_CALIBRATED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SENSITIVITY_CALIBRATED))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SENSITIVITY_CALIBRATED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SENSITIVITY_CALIBRATED) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString DETECTOR_NORMALIZATION_CORRECTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DETECTOR_NORMALIZATION_CORRECTION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.DETECTOR_NORMALIZATION_CORRECTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DETECTOR_NORMALIZATION_CORRECTION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString ITERATIVE_RECONSTRUCTION_METHOD
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ITERATIVE_RECONSTRUCTION_METHOD))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.ITERATIVE_RECONSTRUCTION_METHOD }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ITERATIVE_RECONSTRUCTION_METHOD) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString ATTENUATION_CORRECTION_TEMPORAL_RELATIONSHIP
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ATTENUATION_CORRECTION_TEMPORAL_RELATIONSHIP))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.ATTENUATION_CORRECTION_TEMPORAL_RELATIONSHIP }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ATTENUATION_CORRECTION_TEMPORAL_RELATIONSHIP) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PATIENT_PHYSIOLOGICAL_STATE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_PHYSIOLOGICAL_STATE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PATIENT_PHYSIOLOGICAL_STATE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_PHYSIOLOGICAL_STATE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PATIENT_PHYSIOLOGICAL_STATE_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_PHYSIOLOGICAL_STATE_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PATIENT_PHYSIOLOGICAL_STATE_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_PHYSIOLOGICAL_STATE_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble DEPTHS_OF_FOCUS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DEPTHS_OF_FOCUS))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.DEPTHS_OF_FOCUS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DEPTHS_OF_FOCUS) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence EXCLUDED_INTERVALS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.EXCLUDED_INTERVALS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.EXCLUDED_INTERVALS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.EXCLUDED_INTERVALS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateTimeVR EXCLUSION_START_DATETIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.EXCLUSION_START_DATETIME))
                {
                    DateTimeVR newOb = new DateTimeVR { Tag = new Tag { Id = TagHelper.EXCLUSION_START_DATETIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.EXCLUSION_START_DATETIME) as DateTimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble EXCLUSION_DURATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.EXCLUSION_DURATION))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.EXCLUSION_DURATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.EXCLUSION_DURATION) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence USIMAGE_DESCRIPTION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.USIMAGE_DESCRIPTION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.USIMAGE_DESCRIPTION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.USIMAGE_DESCRIPTION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence IMAGE_DATA_TYPE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_DATA_TYPE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.IMAGE_DATA_TYPE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_DATA_TYPE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString DATA_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DATA_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.DATA_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DATA_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence TRANSDUCER_SCAN_PATTERN_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TRANSDUCER_SCAN_PATTERN_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.TRANSDUCER_SCAN_PATTERN_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TRANSDUCER_SCAN_PATTERN_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString ALIASED_DATA_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ALIASED_DATA_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.ALIASED_DATA_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ALIASED_DATA_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString POSITION_MEASURING_DEVICE_USED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.POSITION_MEASURING_DEVICE_USED))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.POSITION_MEASURING_DEVICE_USED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.POSITION_MEASURING_DEVICE_USED) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence TRANSDUCER_GEOMETRY_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TRANSDUCER_GEOMETRY_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.TRANSDUCER_GEOMETRY_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TRANSDUCER_GEOMETRY_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence TRANSDUCER_BEAM_STEERING_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TRANSDUCER_BEAM_STEERING_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.TRANSDUCER_BEAM_STEERING_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TRANSDUCER_BEAM_STEERING_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence TRANSDUCER_APPLICATION_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TRANSDUCER_APPLICATION_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.TRANSDUCER_APPLICATION_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TRANSDUCER_APPLICATION_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CONTRIBUTING_EQUIPMENT_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTRIBUTING_EQUIPMENT_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CONTRIBUTING_EQUIPMENT_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTRIBUTING_EQUIPMENT_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateTimeVR CONTRIBUTION_DATE_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTRIBUTION_DATE_TIME))
                {
                    DateTimeVR newOb = new DateTimeVR { Tag = new Tag { Id = TagHelper.CONTRIBUTION_DATE_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTRIBUTION_DATE_TIME) as DateTimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText CONTRIBUTION_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTRIBUTION_DESCRIPTION))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.CONTRIBUTION_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTRIBUTION_DESCRIPTION) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier STUDY_INSTANCE_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STUDY_INSTANCE_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.STUDY_INSTANCE_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STUDY_INSTANCE_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier SERIES_INSTANCE_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SERIES_INSTANCE_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.SERIES_INSTANCE_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SERIES_INSTANCE_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString STUDY_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STUDY_ID))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.STUDY_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STUDY_ID) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString SERIES_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SERIES_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.SERIES_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SERIES_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString ACQUISITION_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ACQUISITION_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.ACQUISITION_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ACQUISITION_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString INSTANCE_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INSTANCE_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.INSTANCE_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INSTANCE_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString ISOTOPE_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ISOTOPE_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.ISOTOPE_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ISOTOPE_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString PHASE_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PHASE_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.PHASE_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PHASE_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString INTERVAL_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INTERVAL_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.INTERVAL_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INTERVAL_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString TIME_SLOT_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TIME_SLOT_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.TIME_SLOT_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TIME_SLOT_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString ANGLE_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ANGLE_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.ANGLE_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ANGLE_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString ITEM_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ITEM_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.ITEM_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ITEM_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString PATIENT_ORIENTATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_ORIENTATION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.PATIENT_ORIENTATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_ORIENTATION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString OVERLAY_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERLAY_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.OVERLAY_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERLAY_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString CURVE_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CURVE_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.CURVE_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CURVE_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString LUTNUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LUTNUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.LUTNUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LUTNUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString IMAGE_POSITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_POSITION))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.IMAGE_POSITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_POSITION) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString IMAGE_POSITION_PATIENT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_POSITION_PATIENT))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.IMAGE_POSITION_PATIENT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_POSITION_PATIENT) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString IMAGE_ORIENTATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_ORIENTATION))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.IMAGE_ORIENTATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_ORIENTATION) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString IMAGE_ORIENTATION_PATIENT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_ORIENTATION_PATIENT))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.IMAGE_ORIENTATION_PATIENT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_ORIENTATION_PATIENT) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString LOCATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LOCATION))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.LOCATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LOCATION) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier FRAME_OF_REFERENCE_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FRAME_OF_REFERENCE_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.FRAME_OF_REFERENCE_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FRAME_OF_REFERENCE_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString LATERALITY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LATERALITY))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.LATERALITY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LATERALITY) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString IMAGE_LATERALITY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_LATERALITY))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.IMAGE_LATERALITY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_LATERALITY) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString IMAGE_GEOMETRY_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_GEOMETRY_TYPE))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.IMAGE_GEOMETRY_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_GEOMETRY_TYPE) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString MASKING_IMAGE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MASKING_IMAGE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.MASKING_IMAGE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MASKING_IMAGE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString TEMPORAL_POSITION_IDENTIFIER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TEMPORAL_POSITION_IDENTIFIER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.TEMPORAL_POSITION_IDENTIFIER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TEMPORAL_POSITION_IDENTIFIER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString NUMBER_OF_TEMPORAL_POSITIONS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_TEMPORAL_POSITIONS))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.NUMBER_OF_TEMPORAL_POSITIONS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_TEMPORAL_POSITIONS) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString TEMPORAL_RESOLUTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TEMPORAL_RESOLUTION))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.TEMPORAL_RESOLUTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TEMPORAL_RESOLUTION) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier SYNCHRONIZATION_FRAME_OF_REFERENCE_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SYNCHRONIZATION_FRAME_OF_REFERENCE_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.SYNCHRONIZATION_FRAME_OF_REFERENCE_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SYNCHRONIZATION_FRAME_OF_REFERENCE_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier SOPINSTANCE_UIDOF_CONCATENATION_SOURCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOPINSTANCE_UIDOF_CONCATENATION_SOURCE))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.SOPINSTANCE_UIDOF_CONCATENATION_SOURCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOPINSTANCE_UIDOF_CONCATENATION_SOURCE) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString SERIES_IN_STUDY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SERIES_IN_STUDY))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.SERIES_IN_STUDY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SERIES_IN_STUDY) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString ACQUISITIONS_IN_SERIES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ACQUISITIONS_IN_SERIES))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.ACQUISITIONS_IN_SERIES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ACQUISITIONS_IN_SERIES) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString IMAGES_IN_ACQUISITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGES_IN_ACQUISITION))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.IMAGES_IN_ACQUISITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGES_IN_ACQUISITION) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString IMAGES_IN_SERIES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGES_IN_SERIES))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.IMAGES_IN_SERIES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGES_IN_SERIES) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString ACQUISITIONS_IN_STUDY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ACQUISITIONS_IN_STUDY))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.ACQUISITIONS_IN_STUDY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ACQUISITIONS_IN_STUDY) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString IMAGES_IN_STUDY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGES_IN_STUDY))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.IMAGES_IN_STUDY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGES_IN_STUDY) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString REFERENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.REFERENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString POSITION_REFERENCE_INDICATOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.POSITION_REFERENCE_INDICATOR))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.POSITION_REFERENCE_INDICATOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.POSITION_REFERENCE_INDICATOR) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString SLICE_LOCATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SLICE_LOCATION))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.SLICE_LOCATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SLICE_LOCATION) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString OTHER_STUDY_NUMBERS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OTHER_STUDY_NUMBERS))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.OTHER_STUDY_NUMBERS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OTHER_STUDY_NUMBERS) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString NUMBER_OF_PATIENT_RELATED_STUDIES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_PATIENT_RELATED_STUDIES))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.NUMBER_OF_PATIENT_RELATED_STUDIES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_PATIENT_RELATED_STUDIES) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString NUMBER_OF_PATIENT_RELATED_SERIES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_PATIENT_RELATED_SERIES))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.NUMBER_OF_PATIENT_RELATED_SERIES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_PATIENT_RELATED_SERIES) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString NUMBER_OF_PATIENT_RELATED_INSTANCES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_PATIENT_RELATED_INSTANCES))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.NUMBER_OF_PATIENT_RELATED_INSTANCES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_PATIENT_RELATED_INSTANCES) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString NUMBER_OF_STUDY_RELATED_SERIES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_STUDY_RELATED_SERIES))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.NUMBER_OF_STUDY_RELATED_SERIES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_STUDY_RELATED_SERIES) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString NUMBER_OF_STUDY_RELATED_INSTANCES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_STUDY_RELATED_INSTANCES))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.NUMBER_OF_STUDY_RELATED_INSTANCES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_STUDY_RELATED_INSTANCES) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString NUMBER_OF_SERIES_RELATED_INSTANCES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_SERIES_RELATED_INSTANCES))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.NUMBER_OF_SERIES_RELATED_INSTANCES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_SERIES_RELATED_INSTANCES) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SOURCE_IMAGE_IDS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOURCE_IMAGE_IDS))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SOURCE_IMAGE_IDS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOURCE_IMAGE_IDS) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString MODIFYING_DEVICE_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MODIFYING_DEVICE_ID))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.MODIFYING_DEVICE_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MODIFYING_DEVICE_ID) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString MODIFIED_IMAGE_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MODIFIED_IMAGE_ID))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.MODIFIED_IMAGE_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MODIFIED_IMAGE_ID) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateVR MODIFIED_IMAGE_DATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MODIFIED_IMAGE_DATE))
                {
                    DateVR newOb = new DateVR { Tag = new Tag { Id = TagHelper.MODIFIED_IMAGE_DATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MODIFIED_IMAGE_DATE) as DateVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString MODIFYING_DEVICE_MANUFACTURER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MODIFYING_DEVICE_MANUFACTURER))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.MODIFYING_DEVICE_MANUFACTURER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MODIFYING_DEVICE_MANUFACTURER) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR MODIFIED_IMAGE_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MODIFIED_IMAGE_TIME))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.MODIFIED_IMAGE_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MODIFIED_IMAGE_TIME) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString MODIFIED_IMAGE_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MODIFIED_IMAGE_DESCRIPTION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.MODIFIED_IMAGE_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MODIFIED_IMAGE_DESCRIPTION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongText IMAGE_COMMENTS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_COMMENTS))
                {
                    LongText newOb = new LongText { Tag = new Tag { Id = TagHelper.IMAGE_COMMENTS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_COMMENTS) as LongText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public AttributeTag ORIGINAL_IMAGE_IDENTIFICATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ORIGINAL_IMAGE_IDENTIFICATION))
                {
                    AttributeTag newOb = new AttributeTag { Tag = new Tag { Id = TagHelper.ORIGINAL_IMAGE_IDENTIFICATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ORIGINAL_IMAGE_IDENTIFICATION) as AttributeTag;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString ORIGINAL_IMAGE_IDENTIFICATION_NOMENCLATURE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ORIGINAL_IMAGE_IDENTIFICATION_NOMENCLATURE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.ORIGINAL_IMAGE_IDENTIFICATION_NOMENCLATURE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ORIGINAL_IMAGE_IDENTIFICATION_NOMENCLATURE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString STACK_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STACK_ID))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.STACK_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STACK_ID) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong IN_STACK_POSITION_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IN_STACK_POSITION_NUMBER))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.IN_STACK_POSITION_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IN_STACK_POSITION_NUMBER) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence FRAME_ANATOMY_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FRAME_ANATOMY_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.FRAME_ANATOMY_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FRAME_ANATOMY_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString FRAME_LATERALITY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FRAME_LATERALITY))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.FRAME_LATERALITY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FRAME_LATERALITY) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence FRAME_CONTENT_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FRAME_CONTENT_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.FRAME_CONTENT_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FRAME_CONTENT_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PLANE_POSITION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PLANE_POSITION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PLANE_POSITION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PLANE_POSITION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PLANE_ORIENTATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PLANE_ORIENTATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PLANE_ORIENTATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PLANE_ORIENTATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong TEMPORAL_POSITION_INDEX
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TEMPORAL_POSITION_INDEX))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.TEMPORAL_POSITION_INDEX }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TEMPORAL_POSITION_INDEX) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble NOMINAL_CARDIAC_TRIGGER_DELAY_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NOMINAL_CARDIAC_TRIGGER_DELAY_TIME))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.NOMINAL_CARDIAC_TRIGGER_DELAY_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NOMINAL_CARDIAC_TRIGGER_DELAY_TIME) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort FRAME_ACQUISITION_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FRAME_ACQUISITION_NUMBER))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.FRAME_ACQUISITION_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FRAME_ACQUISITION_NUMBER) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong DIMENSION_INDEX_VALUES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DIMENSION_INDEX_VALUES))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.DIMENSION_INDEX_VALUES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DIMENSION_INDEX_VALUES) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongText FRAME_COMMENTS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FRAME_COMMENTS))
                {
                    LongText newOb = new LongText { Tag = new Tag { Id = TagHelper.FRAME_COMMENTS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FRAME_COMMENTS) as LongText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier CONCATENATION_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONCATENATION_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.CONCATENATION_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONCATENATION_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort IN_CONCATENATION_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IN_CONCATENATION_NUMBER))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.IN_CONCATENATION_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IN_CONCATENATION_NUMBER) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort IN_CONCATENATION_TOTAL_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IN_CONCATENATION_TOTAL_NUMBER))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.IN_CONCATENATION_TOTAL_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IN_CONCATENATION_TOTAL_NUMBER) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier DIMENSION_ORGANIZATION_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DIMENSION_ORGANIZATION_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.DIMENSION_ORGANIZATION_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DIMENSION_ORGANIZATION_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public AttributeTag DIMENSION_INDEX_POINTER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DIMENSION_INDEX_POINTER))
                {
                    AttributeTag newOb = new AttributeTag { Tag = new Tag { Id = TagHelper.DIMENSION_INDEX_POINTER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DIMENSION_INDEX_POINTER) as AttributeTag;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public AttributeTag FUNCTIONAL_GROUP_POINTER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FUNCTIONAL_GROUP_POINTER))
                {
                    AttributeTag newOb = new AttributeTag { Tag = new Tag { Id = TagHelper.FUNCTIONAL_GROUP_POINTER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FUNCTIONAL_GROUP_POINTER) as AttributeTag;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString DIMENSION_INDEX_PRIVATE_CREATOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DIMENSION_INDEX_PRIVATE_CREATOR))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.DIMENSION_INDEX_PRIVATE_CREATOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DIMENSION_INDEX_PRIVATE_CREATOR) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence DIMENSION_ORGANIZATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DIMENSION_ORGANIZATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.DIMENSION_ORGANIZATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DIMENSION_ORGANIZATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence DIMENSION_INDEX_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DIMENSION_INDEX_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.DIMENSION_INDEX_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DIMENSION_INDEX_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong CONCATENATION_FRAME_OFFSET_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONCATENATION_FRAME_OFFSET_NUMBER))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.CONCATENATION_FRAME_OFFSET_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONCATENATION_FRAME_OFFSET_NUMBER) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString FUNCTIONAL_GROUP_PRIVATE_CREATOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FUNCTIONAL_GROUP_PRIVATE_CREATOR))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.FUNCTIONAL_GROUP_PRIVATE_CREATOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FUNCTIONAL_GROUP_PRIVATE_CREATOR) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle NOMINAL_PERCENTAGE_OF_CARDIAC_PHASE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NOMINAL_PERCENTAGE_OF_CARDIAC_PHASE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.NOMINAL_PERCENTAGE_OF_CARDIAC_PHASE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NOMINAL_PERCENTAGE_OF_CARDIAC_PHASE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle NOMINAL_PERCENTAGE_OF_RESPIRATORY_PHASE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NOMINAL_PERCENTAGE_OF_RESPIRATORY_PHASE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.NOMINAL_PERCENTAGE_OF_RESPIRATORY_PHASE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NOMINAL_PERCENTAGE_OF_RESPIRATORY_PHASE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle STARTING_RESPIRATORY_AMPLITUDE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STARTING_RESPIRATORY_AMPLITUDE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.STARTING_RESPIRATORY_AMPLITUDE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STARTING_RESPIRATORY_AMPLITUDE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString STARTING_RESPIRATORY_PHASE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STARTING_RESPIRATORY_PHASE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.STARTING_RESPIRATORY_PHASE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STARTING_RESPIRATORY_PHASE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle ENDING_RESPIRATORY_AMPLITUDE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ENDING_RESPIRATORY_AMPLITUDE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.ENDING_RESPIRATORY_AMPLITUDE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ENDING_RESPIRATORY_AMPLITUDE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString ENDING_RESPIRATORY_PHASE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ENDING_RESPIRATORY_PHASE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.ENDING_RESPIRATORY_PHASE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ENDING_RESPIRATORY_PHASE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString RESPIRATORY_TRIGGER_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RESPIRATORY_TRIGGER_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.RESPIRATORY_TRIGGER_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RESPIRATORY_TRIGGER_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble RRINTERVAL_TIME_NOMINAL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RRINTERVAL_TIME_NOMINAL))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.RRINTERVAL_TIME_NOMINAL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RRINTERVAL_TIME_NOMINAL) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble ACTUAL_CARDIAC_TRIGGER_DELAY_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ACTUAL_CARDIAC_TRIGGER_DELAY_TIME))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.ACTUAL_CARDIAC_TRIGGER_DELAY_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ACTUAL_CARDIAC_TRIGGER_DELAY_TIME) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence RESPIRATORY_SYNCHRONIZATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RESPIRATORY_SYNCHRONIZATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.RESPIRATORY_SYNCHRONIZATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RESPIRATORY_SYNCHRONIZATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble RESPIRATORY_INTERVAL_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RESPIRATORY_INTERVAL_TIME))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.RESPIRATORY_INTERVAL_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RESPIRATORY_INTERVAL_TIME) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble NOMINAL_RESPIRATORY_TRIGGER_DELAY_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NOMINAL_RESPIRATORY_TRIGGER_DELAY_TIME))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.NOMINAL_RESPIRATORY_TRIGGER_DELAY_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NOMINAL_RESPIRATORY_TRIGGER_DELAY_TIME) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble RESPIRATORY_TRIGGER_DELAY_THRESHOLD
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RESPIRATORY_TRIGGER_DELAY_THRESHOLD))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.RESPIRATORY_TRIGGER_DELAY_THRESHOLD }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RESPIRATORY_TRIGGER_DELAY_THRESHOLD) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble ACTUAL_RESPIRATORY_TRIGGER_DELAY_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ACTUAL_RESPIRATORY_TRIGGER_DELAY_TIME))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.ACTUAL_RESPIRATORY_TRIGGER_DELAY_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ACTUAL_RESPIRATORY_TRIGGER_DELAY_TIME) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble IMAGE_POSITION_VOLUME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_POSITION_VOLUME))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.IMAGE_POSITION_VOLUME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_POSITION_VOLUME) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble IMAGE_ORIENTATION_VOLUME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_ORIENTATION_VOLUME))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.IMAGE_ORIENTATION_VOLUME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_ORIENTATION_VOLUME) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString ULTRASOUND_ACQUISITION_GEOMETRY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ULTRASOUND_ACQUISITION_GEOMETRY))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.ULTRASOUND_ACQUISITION_GEOMETRY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ULTRASOUND_ACQUISITION_GEOMETRY) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble APEX_POSITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.APEX_POSITION))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.APEX_POSITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.APEX_POSITION) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble VOLUME_TO_TRANSDUCER_MAPPING_MATRIX
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VOLUME_TO_TRANSDUCER_MAPPING_MATRIX))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.VOLUME_TO_TRANSDUCER_MAPPING_MATRIX }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VOLUME_TO_TRANSDUCER_MAPPING_MATRIX) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble VOLUME_TO_TABLE_MAPPING_MATRIX
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VOLUME_TO_TABLE_MAPPING_MATRIX))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.VOLUME_TO_TABLE_MAPPING_MATRIX }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VOLUME_TO_TABLE_MAPPING_MATRIX) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString PATIENT_FRAME_OF_REFERENCE_SOURCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_FRAME_OF_REFERENCE_SOURCE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.PATIENT_FRAME_OF_REFERENCE_SOURCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_FRAME_OF_REFERENCE_SOURCE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble TEMPORAL_POSITION_TIME_OFFSET
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TEMPORAL_POSITION_TIME_OFFSET))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.TEMPORAL_POSITION_TIME_OFFSET }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TEMPORAL_POSITION_TIME_OFFSET) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PLANE_POSITION_VOLUME_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PLANE_POSITION_VOLUME_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PLANE_POSITION_VOLUME_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PLANE_POSITION_VOLUME_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PLANE_ORIENTATION_VOLUME_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PLANE_ORIENTATION_VOLUME_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PLANE_ORIENTATION_VOLUME_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PLANE_ORIENTATION_VOLUME_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence TEMPORAL_POSITION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TEMPORAL_POSITION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.TEMPORAL_POSITION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TEMPORAL_POSITION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString DIMENSION_ORGANIZATION_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DIMENSION_ORGANIZATION_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.DIMENSION_ORGANIZATION_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DIMENSION_ORGANIZATION_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier VOLUME_FRAME_OF_REFERENCE_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VOLUME_FRAME_OF_REFERENCE_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.VOLUME_FRAME_OF_REFERENCE_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VOLUME_FRAME_OF_REFERENCE_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier TABLE_FRAME_OF_REFERENCE_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TABLE_FRAME_OF_REFERENCE_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.TABLE_FRAME_OF_REFERENCE_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TABLE_FRAME_OF_REFERENCE_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString DIMENSION_DESCRIPTION_LABEL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DIMENSION_DESCRIPTION_LABEL))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.DIMENSION_DESCRIPTION_LABEL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DIMENSION_DESCRIPTION_LABEL) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PATIENT_ORIENTATION_IN_FRAME_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_ORIENTATION_IN_FRAME_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PATIENT_ORIENTATION_IN_FRAME_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_ORIENTATION_IN_FRAME_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString FRAME_LABEL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FRAME_LABEL))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.FRAME_LABEL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FRAME_LABEL) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort ACQUISITION_INDEX
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ACQUISITION_INDEX))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.ACQUISITION_INDEX }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ACQUISITION_INDEX) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CONTRIBUTING_SOPINSTANCES_REFERENCE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTRIBUTING_SOPINSTANCES_REFERENCE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CONTRIBUTING_SOPINSTANCES_REFERENCE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTRIBUTING_SOPINSTANCES_REFERENCE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort RECONSTRUCTION_INDEX
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RECONSTRUCTION_INDEX))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.RECONSTRUCTION_INDEX }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RECONSTRUCTION_INDEX) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort LIGHT_PATH_FILTER_PASS_THROUGH_WAVELENGTH
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LIGHT_PATH_FILTER_PASS_THROUGH_WAVELENGTH))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.LIGHT_PATH_FILTER_PASS_THROUGH_WAVELENGTH }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LIGHT_PATH_FILTER_PASS_THROUGH_WAVELENGTH) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort LIGHT_PATH_FILTER_PASS_BAND
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LIGHT_PATH_FILTER_PASS_BAND))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.LIGHT_PATH_FILTER_PASS_BAND }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LIGHT_PATH_FILTER_PASS_BAND) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort IMAGE_PATH_FILTER_PASS_THROUGH_WAVELENGTH
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_PATH_FILTER_PASS_THROUGH_WAVELENGTH))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.IMAGE_PATH_FILTER_PASS_THROUGH_WAVELENGTH }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_PATH_FILTER_PASS_THROUGH_WAVELENGTH) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort IMAGE_PATH_FILTER_PASS_BAND
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_PATH_FILTER_PASS_BAND))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.IMAGE_PATH_FILTER_PASS_BAND }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_PATH_FILTER_PASS_BAND) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString PATIENT_EYE_MOVEMENT_COMMANDED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_EYE_MOVEMENT_COMMANDED))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.PATIENT_EYE_MOVEMENT_COMMANDED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_EYE_MOVEMENT_COMMANDED) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PATIENT_EYE_MOVEMENT_COMMAND_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_EYE_MOVEMENT_COMMAND_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PATIENT_EYE_MOVEMENT_COMMAND_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_EYE_MOVEMENT_COMMAND_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle SPHERICAL_LENS_POWER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SPHERICAL_LENS_POWER))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.SPHERICAL_LENS_POWER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SPHERICAL_LENS_POWER) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle CYLINDER_LENS_POWER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CYLINDER_LENS_POWER))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.CYLINDER_LENS_POWER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CYLINDER_LENS_POWER) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle CYLINDER_AXIS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CYLINDER_AXIS))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.CYLINDER_AXIS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CYLINDER_AXIS) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle EMMETROPIC_MAGNIFICATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.EMMETROPIC_MAGNIFICATION))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.EMMETROPIC_MAGNIFICATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.EMMETROPIC_MAGNIFICATION) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle INTRA_OCULAR_PRESSURE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INTRA_OCULAR_PRESSURE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.INTRA_OCULAR_PRESSURE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INTRA_OCULAR_PRESSURE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle HORIZONTAL_FIELD_OF_VIEW
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.HORIZONTAL_FIELD_OF_VIEW))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.HORIZONTAL_FIELD_OF_VIEW }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.HORIZONTAL_FIELD_OF_VIEW) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString PUPIL_DILATED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PUPIL_DILATED))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.PUPIL_DILATED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PUPIL_DILATED) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle DEGREE_OF_DILATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DEGREE_OF_DILATION))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.DEGREE_OF_DILATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DEGREE_OF_DILATION) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle STEREO_BASELINE_ANGLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STEREO_BASELINE_ANGLE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.STEREO_BASELINE_ANGLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STEREO_BASELINE_ANGLE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle STEREO_BASELINE_DISPLACEMENT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STEREO_BASELINE_DISPLACEMENT))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.STEREO_BASELINE_DISPLACEMENT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STEREO_BASELINE_DISPLACEMENT) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle STEREO_HORIZONTAL_PIXEL_OFFSET
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STEREO_HORIZONTAL_PIXEL_OFFSET))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.STEREO_HORIZONTAL_PIXEL_OFFSET }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STEREO_HORIZONTAL_PIXEL_OFFSET) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle STEREO_VERTICAL_PIXEL_OFFSET
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STEREO_VERTICAL_PIXEL_OFFSET))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.STEREO_VERTICAL_PIXEL_OFFSET }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STEREO_VERTICAL_PIXEL_OFFSET) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle STEREO_ROTATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STEREO_ROTATION))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.STEREO_ROTATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STEREO_ROTATION) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ACQUISITION_DEVICE_TYPE_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ACQUISITION_DEVICE_TYPE_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ACQUISITION_DEVICE_TYPE_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ACQUISITION_DEVICE_TYPE_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ILLUMINATION_TYPE_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ILLUMINATION_TYPE_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ILLUMINATION_TYPE_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ILLUMINATION_TYPE_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence LIGHT_PATH_FILTER_TYPE_STACK_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LIGHT_PATH_FILTER_TYPE_STACK_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.LIGHT_PATH_FILTER_TYPE_STACK_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LIGHT_PATH_FILTER_TYPE_STACK_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence IMAGE_PATH_FILTER_TYPE_STACK_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_PATH_FILTER_TYPE_STACK_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.IMAGE_PATH_FILTER_TYPE_STACK_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_PATH_FILTER_TYPE_STACK_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence LENSES_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LENSES_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.LENSES_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LENSES_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CHANNEL_DESCRIPTION_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CHANNEL_DESCRIPTION_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CHANNEL_DESCRIPTION_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CHANNEL_DESCRIPTION_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFRACTIVE_STATE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFRACTIVE_STATE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFRACTIVE_STATE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFRACTIVE_STATE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence MYDRIATIC_AGENT_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MYDRIATIC_AGENT_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.MYDRIATIC_AGENT_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MYDRIATIC_AGENT_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence RELATIVE_IMAGE_POSITION_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RELATIVE_IMAGE_POSITION_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.RELATIVE_IMAGE_POSITION_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RELATIVE_IMAGE_POSITION_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence STEREO_PAIRS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STEREO_PAIRS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.STEREO_PAIRS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STEREO_PAIRS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence LEFT_IMAGE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LEFT_IMAGE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.LEFT_IMAGE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LEFT_IMAGE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence RIGHT_IMAGE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RIGHT_IMAGE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.RIGHT_IMAGE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RIGHT_IMAGE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle AXIAL_LENGTH_OF_THE_EYE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.AXIAL_LENGTH_OF_THE_EYE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.AXIAL_LENGTH_OF_THE_EYE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.AXIAL_LENGTH_OF_THE_EYE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence OPHTHALMIC_FRAME_LOCATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OPHTHALMIC_FRAME_LOCATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.OPHTHALMIC_FRAME_LOCATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OPHTHALMIC_FRAME_LOCATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle REFERENCE_COORDINATES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCE_COORDINATES))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.REFERENCE_COORDINATES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCE_COORDINATES) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle DEPTH_SPATIAL_RESOLUTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DEPTH_SPATIAL_RESOLUTION))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.DEPTH_SPATIAL_RESOLUTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DEPTH_SPATIAL_RESOLUTION) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle MAXIMUM_DEPTH_DISTORTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MAXIMUM_DEPTH_DISTORTION))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.MAXIMUM_DEPTH_DISTORTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MAXIMUM_DEPTH_DISTORTION) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle ALONG_SCAN_SPATIAL_RESOLUTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ALONG_SCAN_SPATIAL_RESOLUTION))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.ALONG_SCAN_SPATIAL_RESOLUTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ALONG_SCAN_SPATIAL_RESOLUTION) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle MAXIMUM_ALONG_SCAN_DISTORTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MAXIMUM_ALONG_SCAN_DISTORTION))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.MAXIMUM_ALONG_SCAN_DISTORTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MAXIMUM_ALONG_SCAN_DISTORTION) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString OPHTHALMIC_IMAGE_ORIENTATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OPHTHALMIC_IMAGE_ORIENTATION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.OPHTHALMIC_IMAGE_ORIENTATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OPHTHALMIC_IMAGE_ORIENTATION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle DEPTH_OF_TRANSVERSE_IMAGE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DEPTH_OF_TRANSVERSE_IMAGE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.DEPTH_OF_TRANSVERSE_IMAGE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DEPTH_OF_TRANSVERSE_IMAGE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence MYDRIATIC_AGENT_CONCENTRATION_UNITS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MYDRIATIC_AGENT_CONCENTRATION_UNITS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.MYDRIATIC_AGENT_CONCENTRATION_UNITS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MYDRIATIC_AGENT_CONCENTRATION_UNITS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle ACROSS_SCAN_SPATIAL_RESOLUTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ACROSS_SCAN_SPATIAL_RESOLUTION))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.ACROSS_SCAN_SPATIAL_RESOLUTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ACROSS_SCAN_SPATIAL_RESOLUTION) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle MAXIMUM_ACROSS_SCAN_DISTORTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MAXIMUM_ACROSS_SCAN_DISTORTION))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.MAXIMUM_ACROSS_SCAN_DISTORTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MAXIMUM_ACROSS_SCAN_DISTORTION) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString MYDRIATIC_AGENT_CONCENTRATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MYDRIATIC_AGENT_CONCENTRATION))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.MYDRIATIC_AGENT_CONCENTRATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MYDRIATIC_AGENT_CONCENTRATION) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle ILLUMINATION_WAVE_LENGTH
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ILLUMINATION_WAVE_LENGTH))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.ILLUMINATION_WAVE_LENGTH }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ILLUMINATION_WAVE_LENGTH) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle ILLUMINATION_POWER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ILLUMINATION_POWER))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.ILLUMINATION_POWER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ILLUMINATION_POWER) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle ILLUMINATION_BANDWIDTH
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ILLUMINATION_BANDWIDTH))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.ILLUMINATION_BANDWIDTH }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ILLUMINATION_BANDWIDTH) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence MYDRIATIC_AGENT_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MYDRIATIC_AGENT_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.MYDRIATIC_AGENT_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MYDRIATIC_AGENT_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort SAMPLES_PER_PIXEL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SAMPLES_PER_PIXEL))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.SAMPLES_PER_PIXEL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SAMPLES_PER_PIXEL) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort SAMPLES_PER_PIXEL_USED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SAMPLES_PER_PIXEL_USED))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.SAMPLES_PER_PIXEL_USED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SAMPLES_PER_PIXEL_USED) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString PHOTOMETRIC_INTERPRETATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PHOTOMETRIC_INTERPRETATION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.PHOTOMETRIC_INTERPRETATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PHOTOMETRIC_INTERPRETATION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort IMAGE_DIMENSIONS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_DIMENSIONS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.IMAGE_DIMENSIONS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_DIMENSIONS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort PLANAR_CONFIGURATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PLANAR_CONFIGURATION))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.PLANAR_CONFIGURATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PLANAR_CONFIGURATION) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString NUMBER_OF_FRAMES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_FRAMES))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.NUMBER_OF_FRAMES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_FRAMES) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public AttributeTag FRAME_INCREMENT_POINTER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FRAME_INCREMENT_POINTER))
                {
                    AttributeTag newOb = new AttributeTag { Tag = new Tag { Id = TagHelper.FRAME_INCREMENT_POINTER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FRAME_INCREMENT_POINTER) as AttributeTag;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public AttributeTag FRAME_DIMENSION_POINTER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FRAME_DIMENSION_POINTER))
                {
                    AttributeTag newOb = new AttributeTag { Tag = new Tag { Id = TagHelper.FRAME_DIMENSION_POINTER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FRAME_DIMENSION_POINTER) as AttributeTag;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort ROWS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ROWS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.ROWS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ROWS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort COLUMNS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COLUMNS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.COLUMNS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COLUMNS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort PLANES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PLANES))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.PLANES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PLANES) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort ULTRASOUND_COLOR_DATA_PRESENT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ULTRASOUND_COLOR_DATA_PRESENT))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.ULTRASOUND_COLOR_DATA_PRESENT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ULTRASOUND_COLOR_DATA_PRESENT) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString PIXEL_SPACING
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PIXEL_SPACING))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.PIXEL_SPACING }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PIXEL_SPACING) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString ZOOM_FACTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ZOOM_FACTOR))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.ZOOM_FACTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ZOOM_FACTOR) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString ZOOM_CENTER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ZOOM_CENTER))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.ZOOM_CENTER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ZOOM_CENTER) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString PIXEL_ASPECT_RATIO
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PIXEL_ASPECT_RATIO))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.PIXEL_ASPECT_RATIO }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PIXEL_ASPECT_RATIO) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString IMAGE_FORMAT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_FORMAT))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.IMAGE_FORMAT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_FORMAT) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString MANIPULATED_IMAGE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MANIPULATED_IMAGE))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.MANIPULATED_IMAGE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MANIPULATED_IMAGE) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString CORRECTED_IMAGE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CORRECTED_IMAGE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.CORRECTED_IMAGE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CORRECTED_IMAGE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString COMPRESSION_RECOGNITION_CODE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COMPRESSION_RECOGNITION_CODE))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.COMPRESSION_RECOGNITION_CODE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COMPRESSION_RECOGNITION_CODE) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString COMPRESSION_CODE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COMPRESSION_CODE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.COMPRESSION_CODE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COMPRESSION_CODE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString COMPRESSION_ORIGINATOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COMPRESSION_ORIGINATOR))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.COMPRESSION_ORIGINATOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COMPRESSION_ORIGINATOR) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString COMPRESSION_LABEL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COMPRESSION_LABEL))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.COMPRESSION_LABEL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COMPRESSION_LABEL) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString COMPRESSION_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COMPRESSION_DESCRIPTION))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.COMPRESSION_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COMPRESSION_DESCRIPTION) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString COMPRESSION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COMPRESSION_SEQUENCE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.COMPRESSION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COMPRESSION_SEQUENCE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public AttributeTag COMPRESSION_STEP_POINTERS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COMPRESSION_STEP_POINTERS))
                {
                    AttributeTag newOb = new AttributeTag { Tag = new Tag { Id = TagHelper.COMPRESSION_STEP_POINTERS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COMPRESSION_STEP_POINTERS) as AttributeTag;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort REPEAT_INTERVAL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REPEAT_INTERVAL))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.REPEAT_INTERVAL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REPEAT_INTERVAL) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort BITS_GROUPED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BITS_GROUPED))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.BITS_GROUPED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BITS_GROUPED) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort PERIMETER_TABLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PERIMETER_TABLE))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.PERIMETER_TABLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PERIMETER_TABLE) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DICOMElement PERIMETER_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PERIMETER_VALUE))
                {
                    DICOMElement newOb = new DICOMElement { Tag = new Tag { Id = TagHelper.PERIMETER_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PERIMETER_VALUE) as DICOMElement;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort PREDICTOR_ROWS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PREDICTOR_ROWS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.PREDICTOR_ROWS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PREDICTOR_ROWS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort PREDICTOR_COLUMNS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PREDICTOR_COLUMNS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.PREDICTOR_COLUMNS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PREDICTOR_COLUMNS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort PREDICTOR_CONSTANTS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PREDICTOR_CONSTANTS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.PREDICTOR_CONSTANTS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PREDICTOR_CONSTANTS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString BLOCKED_PIXELS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BLOCKED_PIXELS))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.BLOCKED_PIXELS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BLOCKED_PIXELS) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort BLOCK_ROWS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BLOCK_ROWS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.BLOCK_ROWS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BLOCK_ROWS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort BLOCK_COLUMNS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BLOCK_COLUMNS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.BLOCK_COLUMNS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BLOCK_COLUMNS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort ROW_OVERLAP
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ROW_OVERLAP))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.ROW_OVERLAP }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ROW_OVERLAP) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort COLUMN_OVERLAP
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COLUMN_OVERLAP))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.COLUMN_OVERLAP }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COLUMN_OVERLAP) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort BITS_ALLOCATED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BITS_ALLOCATED))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.BITS_ALLOCATED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BITS_ALLOCATED) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort BITS_STORED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BITS_STORED))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.BITS_STORED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BITS_STORED) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort HIGH_BIT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.HIGH_BIT))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.HIGH_BIT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.HIGH_BIT) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort PIXEL_REPRESENTATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PIXEL_REPRESENTATION))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.PIXEL_REPRESENTATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PIXEL_REPRESENTATION) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DICOMElement SMALLEST_VALID_PIXEL_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SMALLEST_VALID_PIXEL_VALUE))
                {
                    DICOMElement newOb = new DICOMElement { Tag = new Tag { Id = TagHelper.SMALLEST_VALID_PIXEL_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SMALLEST_VALID_PIXEL_VALUE) as DICOMElement;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DICOMElement LARGEST_VALID_PIXEL_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LARGEST_VALID_PIXEL_VALUE))
                {
                    DICOMElement newOb = new DICOMElement { Tag = new Tag { Id = TagHelper.LARGEST_VALID_PIXEL_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LARGEST_VALID_PIXEL_VALUE) as DICOMElement;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DICOMElement SMALLEST_IMAGE_PIXEL_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SMALLEST_IMAGE_PIXEL_VALUE))
                {
                    DICOMElement newOb = new DICOMElement { Tag = new Tag { Id = TagHelper.SMALLEST_IMAGE_PIXEL_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SMALLEST_IMAGE_PIXEL_VALUE) as DICOMElement;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DICOMElement LARGEST_IMAGE_PIXEL_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LARGEST_IMAGE_PIXEL_VALUE))
                {
                    DICOMElement newOb = new DICOMElement { Tag = new Tag { Id = TagHelper.LARGEST_IMAGE_PIXEL_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LARGEST_IMAGE_PIXEL_VALUE) as DICOMElement;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DICOMElement SMALLEST_PIXEL_VALUE_IN_SERIES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SMALLEST_PIXEL_VALUE_IN_SERIES))
                {
                    DICOMElement newOb = new DICOMElement { Tag = new Tag { Id = TagHelper.SMALLEST_PIXEL_VALUE_IN_SERIES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SMALLEST_PIXEL_VALUE_IN_SERIES) as DICOMElement;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DICOMElement LARGEST_PIXEL_VALUE_IN_SERIES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LARGEST_PIXEL_VALUE_IN_SERIES))
                {
                    DICOMElement newOb = new DICOMElement { Tag = new Tag { Id = TagHelper.LARGEST_PIXEL_VALUE_IN_SERIES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LARGEST_PIXEL_VALUE_IN_SERIES) as DICOMElement;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DICOMElement SMALLEST_IMAGE_PIXEL_VALUE_IN_PLANE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SMALLEST_IMAGE_PIXEL_VALUE_IN_PLANE))
                {
                    DICOMElement newOb = new DICOMElement { Tag = new Tag { Id = TagHelper.SMALLEST_IMAGE_PIXEL_VALUE_IN_PLANE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SMALLEST_IMAGE_PIXEL_VALUE_IN_PLANE) as DICOMElement;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DICOMElement LARGEST_IMAGE_PIXEL_VALUE_IN_PLANE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LARGEST_IMAGE_PIXEL_VALUE_IN_PLANE))
                {
                    DICOMElement newOb = new DICOMElement { Tag = new Tag { Id = TagHelper.LARGEST_IMAGE_PIXEL_VALUE_IN_PLANE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LARGEST_IMAGE_PIXEL_VALUE_IN_PLANE) as DICOMElement;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DICOMElement PIXEL_PADDING_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PIXEL_PADDING_VALUE))
                {
                    DICOMElement newOb = new DICOMElement { Tag = new Tag { Id = TagHelper.PIXEL_PADDING_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PIXEL_PADDING_VALUE) as DICOMElement;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DICOMElement PIXEL_PADDING_RANGE_LIMIT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PIXEL_PADDING_RANGE_LIMIT))
                {
                    DICOMElement newOb = new DICOMElement { Tag = new Tag { Id = TagHelper.PIXEL_PADDING_RANGE_LIMIT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PIXEL_PADDING_RANGE_LIMIT) as DICOMElement;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort IMAGE_LOCATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_LOCATION))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.IMAGE_LOCATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_LOCATION) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString QUALITY_CONTROL_IMAGE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.QUALITY_CONTROL_IMAGE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.QUALITY_CONTROL_IMAGE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.QUALITY_CONTROL_IMAGE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString BURNED_IN_ANNOTATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BURNED_IN_ANNOTATION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.BURNED_IN_ANNOTATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BURNED_IN_ANNOTATION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString TRANSFORM_LABEL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TRANSFORM_LABEL))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.TRANSFORM_LABEL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TRANSFORM_LABEL) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString TRANSFORM_VERSION_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TRANSFORM_VERSION_NUMBER))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.TRANSFORM_VERSION_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TRANSFORM_VERSION_NUMBER) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort NUMBER_OF_TRANSFORM_STEPS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_TRANSFORM_STEPS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.NUMBER_OF_TRANSFORM_STEPS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_TRANSFORM_STEPS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString SEQUENCE_OF_COMPRESSED_DATA
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SEQUENCE_OF_COMPRESSED_DATA))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.SEQUENCE_OF_COMPRESSED_DATA }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SEQUENCE_OF_COMPRESSED_DATA) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public AttributeTag DETAILS_OF_COEFFICIENTS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DETAILS_OF_COEFFICIENTS))
                {
                    AttributeTag newOb = new AttributeTag { Tag = new Tag { Id = TagHelper.DETAILS_OF_COEFFICIENTS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DETAILS_OF_COEFFICIENTS) as AttributeTag;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort ROWS_FOR_NTH_ORDER_COEFFICIENTS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ROWS_FOR_NTH_ORDER_COEFFICIENTS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.ROWS_FOR_NTH_ORDER_COEFFICIENTS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ROWS_FOR_NTH_ORDER_COEFFICIENTS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort COLUMNS_FOR_NTH_ORDER_COEFFICIENTS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COLUMNS_FOR_NTH_ORDER_COEFFICIENTS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.COLUMNS_FOR_NTH_ORDER_COEFFICIENTS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COLUMNS_FOR_NTH_ORDER_COEFFICIENTS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString COEFFICIENT_CODING
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COEFFICIENT_CODING))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.COEFFICIENT_CODING }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COEFFICIENT_CODING) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public AttributeTag COEFFICIENT_CODING_POINTERS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COEFFICIENT_CODING_POINTERS))
                {
                    AttributeTag newOb = new AttributeTag { Tag = new Tag { Id = TagHelper.COEFFICIENT_CODING_POINTERS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COEFFICIENT_CODING_POINTERS) as AttributeTag;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString DCTLABEL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DCTLABEL))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.DCTLABEL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DCTLABEL) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString DATA_BLOCK_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DATA_BLOCK_DESCRIPTION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.DATA_BLOCK_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DATA_BLOCK_DESCRIPTION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public AttributeTag DATA_BLOCK
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DATA_BLOCK))
                {
                    AttributeTag newOb = new AttributeTag { Tag = new Tag { Id = TagHelper.DATA_BLOCK }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DATA_BLOCK) as AttributeTag;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort NORMALIZATION_FACTOR_FORMAT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NORMALIZATION_FACTOR_FORMAT))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.NORMALIZATION_FACTOR_FORMAT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NORMALIZATION_FACTOR_FORMAT) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort ZONAL_MAP_NUMBER_FORMAT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ZONAL_MAP_NUMBER_FORMAT))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.ZONAL_MAP_NUMBER_FORMAT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ZONAL_MAP_NUMBER_FORMAT) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public AttributeTag ZONAL_MAP_LOCATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ZONAL_MAP_LOCATION))
                {
                    AttributeTag newOb = new AttributeTag { Tag = new Tag { Id = TagHelper.ZONAL_MAP_LOCATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ZONAL_MAP_LOCATION) as AttributeTag;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort ZONAL_MAP_FORMAT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ZONAL_MAP_FORMAT))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.ZONAL_MAP_FORMAT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ZONAL_MAP_FORMAT) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort ADAPTIVE_MAP_FORMAT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ADAPTIVE_MAP_FORMAT))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.ADAPTIVE_MAP_FORMAT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ADAPTIVE_MAP_FORMAT) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort CODE_NUMBER_FORMAT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CODE_NUMBER_FORMAT))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.CODE_NUMBER_FORMAT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CODE_NUMBER_FORMAT) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString CODE_LABEL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CODE_LABEL))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.CODE_LABEL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CODE_LABEL) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort NUMBER_OF_TABLES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_TABLES))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.NUMBER_OF_TABLES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_TABLES) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public AttributeTag CODE_TABLE_LOCATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CODE_TABLE_LOCATION))
                {
                    AttributeTag newOb = new AttributeTag { Tag = new Tag { Id = TagHelper.CODE_TABLE_LOCATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CODE_TABLE_LOCATION) as AttributeTag;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort BITS_FOR_CODE_WORD
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BITS_FOR_CODE_WORD))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.BITS_FOR_CODE_WORD }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BITS_FOR_CODE_WORD) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public AttributeTag IMAGE_DATA_LOCATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_DATA_LOCATION))
                {
                    AttributeTag newOb = new AttributeTag { Tag = new Tag { Id = TagHelper.IMAGE_DATA_LOCATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_DATA_LOCATION) as AttributeTag;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString PIXEL_SPACING_CALIBRATION_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PIXEL_SPACING_CALIBRATION_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.PIXEL_SPACING_CALIBRATION_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PIXEL_SPACING_CALIBRATION_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString PIXEL_SPACING_CALIBRATION_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PIXEL_SPACING_CALIBRATION_DESCRIPTION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.PIXEL_SPACING_CALIBRATION_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PIXEL_SPACING_CALIBRATION_DESCRIPTION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString PIXEL_INTENSITY_RELATIONSHIP
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PIXEL_INTENSITY_RELATIONSHIP))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.PIXEL_INTENSITY_RELATIONSHIP }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PIXEL_INTENSITY_RELATIONSHIP) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public SignedShort PIXEL_INTENSITY_RELATIONSHIP_SIGN
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PIXEL_INTENSITY_RELATIONSHIP_SIGN))
                {
                    SignedShort newOb = new SignedShort { Tag = new Tag { Id = TagHelper.PIXEL_INTENSITY_RELATIONSHIP_SIGN }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PIXEL_INTENSITY_RELATIONSHIP_SIGN) as SignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString WINDOW_CENTER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.WINDOW_CENTER))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.WINDOW_CENTER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.WINDOW_CENTER) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString WINDOW_WIDTH
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.WINDOW_WIDTH))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.WINDOW_WIDTH }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.WINDOW_WIDTH) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString RESCALE_INTERCEPT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RESCALE_INTERCEPT))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.RESCALE_INTERCEPT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RESCALE_INTERCEPT) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString RESCALE_SLOPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RESCALE_SLOPE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.RESCALE_SLOPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RESCALE_SLOPE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString RESCALE_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RESCALE_TYPE))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.RESCALE_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RESCALE_TYPE) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString WINDOW_CENTER_WIDTH_EXPLANATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.WINDOW_CENTER_WIDTH_EXPLANATION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.WINDOW_CENTER_WIDTH_EXPLANATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.WINDOW_CENTER_WIDTH_EXPLANATION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString VOILUTFUNCTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VOILUTFUNCTION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.VOILUTFUNCTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VOILUTFUNCTION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString GRAY_SCALE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GRAY_SCALE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.GRAY_SCALE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GRAY_SCALE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString RECOMMENDED_VIEWING_MODE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RECOMMENDED_VIEWING_MODE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.RECOMMENDED_VIEWING_MODE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RECOMMENDED_VIEWING_MODE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DICOMElement GRAY_LOOKUP_TABLE_DESCRIPTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GRAY_LOOKUP_TABLE_DESCRIPTOR))
                {
                    DICOMElement newOb = new DICOMElement { Tag = new Tag { Id = TagHelper.GRAY_LOOKUP_TABLE_DESCRIPTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GRAY_LOOKUP_TABLE_DESCRIPTOR) as DICOMElement;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DICOMElement RED_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RED_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR))
                {
                    DICOMElement newOb = new DICOMElement { Tag = new Tag { Id = TagHelper.RED_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RED_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR) as DICOMElement;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DICOMElement GREEN_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GREEN_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR))
                {
                    DICOMElement newOb = new DICOMElement { Tag = new Tag { Id = TagHelper.GREEN_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GREEN_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR) as DICOMElement;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DICOMElement BLUE_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BLUE_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR))
                {
                    DICOMElement newOb = new DICOMElement { Tag = new Tag { Id = TagHelper.BLUE_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BLUE_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR) as DICOMElement;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort ALPHA_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ALPHA_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.ALPHA_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ALPHA_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DICOMElement LARGE_RED_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LARGE_RED_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR))
                {
                    DICOMElement newOb = new DICOMElement { Tag = new Tag { Id = TagHelper.LARGE_RED_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LARGE_RED_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR) as DICOMElement;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DICOMElement LARGE_GREEN_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LARGE_GREEN_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR))
                {
                    DICOMElement newOb = new DICOMElement { Tag = new Tag { Id = TagHelper.LARGE_GREEN_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LARGE_GREEN_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR) as DICOMElement;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DICOMElement LARGE_BLUE_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LARGE_BLUE_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR))
                {
                    DICOMElement newOb = new DICOMElement { Tag = new Tag { Id = TagHelper.LARGE_BLUE_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LARGE_BLUE_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR) as DICOMElement;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier PALETTE_COLOR_LOOKUP_TABLE_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PALETTE_COLOR_LOOKUP_TABLE_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.PALETTE_COLOR_LOOKUP_TABLE_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PALETTE_COLOR_LOOKUP_TABLE_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DICOMElement GRAY_LOOKUP_TABLE_DATA
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GRAY_LOOKUP_TABLE_DATA))
                {
                    DICOMElement newOb = new DICOMElement { Tag = new Tag { Id = TagHelper.GRAY_LOOKUP_TABLE_DATA }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GRAY_LOOKUP_TABLE_DATA) as DICOMElement;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public OtherWordString RED_PALETTE_COLOR_LOOKUP_TABLE_DATA
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RED_PALETTE_COLOR_LOOKUP_TABLE_DATA))
                {
                    OtherWordString newOb = new OtherWordString { Tag = new Tag { Id = TagHelper.RED_PALETTE_COLOR_LOOKUP_TABLE_DATA }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RED_PALETTE_COLOR_LOOKUP_TABLE_DATA) as OtherWordString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public OtherWordString GREEN_PALETTE_COLOR_LOOKUP_TABLE_DATA
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GREEN_PALETTE_COLOR_LOOKUP_TABLE_DATA))
                {
                    OtherWordString newOb = new OtherWordString { Tag = new Tag { Id = TagHelper.GREEN_PALETTE_COLOR_LOOKUP_TABLE_DATA }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GREEN_PALETTE_COLOR_LOOKUP_TABLE_DATA) as OtherWordString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public OtherWordString BLUE_PALETTE_COLOR_LOOKUP_TABLE_DATA
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BLUE_PALETTE_COLOR_LOOKUP_TABLE_DATA))
                {
                    OtherWordString newOb = new OtherWordString { Tag = new Tag { Id = TagHelper.BLUE_PALETTE_COLOR_LOOKUP_TABLE_DATA }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BLUE_PALETTE_COLOR_LOOKUP_TABLE_DATA) as OtherWordString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public OtherWordString ALPHA_PALETTE_COLOR_LOOKUP_TABLE_DATA
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ALPHA_PALETTE_COLOR_LOOKUP_TABLE_DATA))
                {
                    OtherWordString newOb = new OtherWordString { Tag = new Tag { Id = TagHelper.ALPHA_PALETTE_COLOR_LOOKUP_TABLE_DATA }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ALPHA_PALETTE_COLOR_LOOKUP_TABLE_DATA) as OtherWordString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public OtherWordString LARGE_RED_PALETTE_COLOR_LOOKUP_TABLE_DATA
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LARGE_RED_PALETTE_COLOR_LOOKUP_TABLE_DATA))
                {
                    OtherWordString newOb = new OtherWordString { Tag = new Tag { Id = TagHelper.LARGE_RED_PALETTE_COLOR_LOOKUP_TABLE_DATA }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LARGE_RED_PALETTE_COLOR_LOOKUP_TABLE_DATA) as OtherWordString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public OtherWordString LARGE_GREEN_PALETTE_COLOR_LOOKUP_TABLE_DATA
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LARGE_GREEN_PALETTE_COLOR_LOOKUP_TABLE_DATA))
                {
                    OtherWordString newOb = new OtherWordString { Tag = new Tag { Id = TagHelper.LARGE_GREEN_PALETTE_COLOR_LOOKUP_TABLE_DATA }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LARGE_GREEN_PALETTE_COLOR_LOOKUP_TABLE_DATA) as OtherWordString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public OtherWordString LARGE_BLUE_PALETTE_COLOR_LOOKUP_TABLE_DATA
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LARGE_BLUE_PALETTE_COLOR_LOOKUP_TABLE_DATA))
                {
                    OtherWordString newOb = new OtherWordString { Tag = new Tag { Id = TagHelper.LARGE_BLUE_PALETTE_COLOR_LOOKUP_TABLE_DATA }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LARGE_BLUE_PALETTE_COLOR_LOOKUP_TABLE_DATA) as OtherWordString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier LARGE_PALETTE_COLOR_LOOKUP_TABLE_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LARGE_PALETTE_COLOR_LOOKUP_TABLE_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.LARGE_PALETTE_COLOR_LOOKUP_TABLE_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LARGE_PALETTE_COLOR_LOOKUP_TABLE_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public OtherWordString SEGMENTED_RED_PALETTE_COLOR_LOOKUP_TABLE_DATA
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SEGMENTED_RED_PALETTE_COLOR_LOOKUP_TABLE_DATA))
                {
                    OtherWordString newOb = new OtherWordString { Tag = new Tag { Id = TagHelper.SEGMENTED_RED_PALETTE_COLOR_LOOKUP_TABLE_DATA }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SEGMENTED_RED_PALETTE_COLOR_LOOKUP_TABLE_DATA) as OtherWordString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public OtherWordString SEGMENTED_GREEN_PALETTE_COLOR_LOOKUP_TABLE_DATA
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SEGMENTED_GREEN_PALETTE_COLOR_LOOKUP_TABLE_DATA))
                {
                    OtherWordString newOb = new OtherWordString { Tag = new Tag { Id = TagHelper.SEGMENTED_GREEN_PALETTE_COLOR_LOOKUP_TABLE_DATA }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SEGMENTED_GREEN_PALETTE_COLOR_LOOKUP_TABLE_DATA) as OtherWordString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public OtherWordString SEGMENTED_BLUE_PALETTE_COLOR_LOOKUP_TABLE_DATA
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SEGMENTED_BLUE_PALETTE_COLOR_LOOKUP_TABLE_DATA))
                {
                    OtherWordString newOb = new OtherWordString { Tag = new Tag { Id = TagHelper.SEGMENTED_BLUE_PALETTE_COLOR_LOOKUP_TABLE_DATA }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SEGMENTED_BLUE_PALETTE_COLOR_LOOKUP_TABLE_DATA) as OtherWordString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString BREAST_IMPLANT_PRESENT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BREAST_IMPLANT_PRESENT))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.BREAST_IMPLANT_PRESENT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BREAST_IMPLANT_PRESENT) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString PARTIAL_VIEW
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PARTIAL_VIEW))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.PARTIAL_VIEW }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PARTIAL_VIEW) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText PARTIAL_VIEW_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PARTIAL_VIEW_DESCRIPTION))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.PARTIAL_VIEW_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PARTIAL_VIEW_DESCRIPTION) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PARTIAL_VIEW_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PARTIAL_VIEW_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PARTIAL_VIEW_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PARTIAL_VIEW_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SPATIAL_LOCATIONS_PRESERVED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SPATIAL_LOCATIONS_PRESERVED))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SPATIAL_LOCATIONS_PRESERVED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SPATIAL_LOCATIONS_PRESERVED) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence DATA_FRAME_ASSIGNMENT_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DATA_FRAME_ASSIGNMENT_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.DATA_FRAME_ASSIGNMENT_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DATA_FRAME_ASSIGNMENT_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString DATA_PATH_ASSIGNMENT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DATA_PATH_ASSIGNMENT))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.DATA_PATH_ASSIGNMENT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DATA_PATH_ASSIGNMENT) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort BITS_MAPPED_TO_COLOR_LOOKUP_TABLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BITS_MAPPED_TO_COLOR_LOOKUP_TABLE))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.BITS_MAPPED_TO_COLOR_LOOKUP_TABLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BITS_MAPPED_TO_COLOR_LOOKUP_TABLE) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence BLENDING_LUT1SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BLENDING_LUT1SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.BLENDING_LUT1SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BLENDING_LUT1SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString BLENDING_LUT1TRANSFER_FUNCTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BLENDING_LUT1TRANSFER_FUNCTION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.BLENDING_LUT1TRANSFER_FUNCTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BLENDING_LUT1TRANSFER_FUNCTION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble BLENDING_WEIGHT_CONSTANT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BLENDING_WEIGHT_CONSTANT))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.BLENDING_WEIGHT_CONSTANT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BLENDING_WEIGHT_CONSTANT) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort BLENDING_LOOKUP_TABLE_DESCRIPTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BLENDING_LOOKUP_TABLE_DESCRIPTOR))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.BLENDING_LOOKUP_TABLE_DESCRIPTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BLENDING_LOOKUP_TABLE_DESCRIPTOR) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public OtherWordString BLENDING_LOOKUP_TABLE_DATA
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BLENDING_LOOKUP_TABLE_DATA))
                {
                    OtherWordString newOb = new OtherWordString { Tag = new Tag { Id = TagHelper.BLENDING_LOOKUP_TABLE_DATA }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BLENDING_LOOKUP_TABLE_DATA) as OtherWordString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ENHANCED_PALETTE_COLOR_LOOKUP_TABLE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ENHANCED_PALETTE_COLOR_LOOKUP_TABLE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ENHANCED_PALETTE_COLOR_LOOKUP_TABLE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ENHANCED_PALETTE_COLOR_LOOKUP_TABLE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence BLENDING_LUT2SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BLENDING_LUT2SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.BLENDING_LUT2SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BLENDING_LUT2SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString BLENDING_LUT2TRANSFER_FUNCTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BLENDING_LUT2TRANSFER_FUNCTION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.BLENDING_LUT2TRANSFER_FUNCTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BLENDING_LUT2TRANSFER_FUNCTION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString DATA_PATH_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DATA_PATH_ID))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.DATA_PATH_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DATA_PATH_ID) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString RGBLUTTRANSFER_FUNCTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RGBLUTTRANSFER_FUNCTION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.RGBLUTTRANSFER_FUNCTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RGBLUTTRANSFER_FUNCTION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString ALPHA_LUTTRANSFER_FUNCTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ALPHA_LUTTRANSFER_FUNCTION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.ALPHA_LUTTRANSFER_FUNCTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ALPHA_LUTTRANSFER_FUNCTION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public OtherByteString ICCPROFILE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ICCPROFILE))
                {
                    OtherByteString newOb = new OtherByteString { Tag = new Tag { Id = TagHelper.ICCPROFILE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ICCPROFILE) as OtherByteString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString LOSSY_IMAGE_COMPRESSION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LOSSY_IMAGE_COMPRESSION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.LOSSY_IMAGE_COMPRESSION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LOSSY_IMAGE_COMPRESSION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString LOSSY_IMAGE_COMPRESSION_RATIO
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LOSSY_IMAGE_COMPRESSION_RATIO))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.LOSSY_IMAGE_COMPRESSION_RATIO }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LOSSY_IMAGE_COMPRESSION_RATIO) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString LOSSY_IMAGE_COMPRESSION_METHOD
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LOSSY_IMAGE_COMPRESSION_METHOD))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.LOSSY_IMAGE_COMPRESSION_METHOD }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LOSSY_IMAGE_COMPRESSION_METHOD) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence MODALITY_LUTSEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MODALITY_LUTSEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.MODALITY_LUTSEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MODALITY_LUTSEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DICOMElement LUTDESCRIPTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LUTDESCRIPTOR))
                {
                    DICOMElement newOb = new DICOMElement { Tag = new Tag { Id = TagHelper.LUTDESCRIPTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LUTDESCRIPTOR) as DICOMElement;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString LUTEXPLANATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LUTEXPLANATION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.LUTEXPLANATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LUTEXPLANATION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString MODALITY_LUTTYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MODALITY_LUTTYPE))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.MODALITY_LUTTYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MODALITY_LUTTYPE) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DICOMElement LUTDATA
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LUTDATA))
                {
                    DICOMElement newOb = new DICOMElement { Tag = new Tag { Id = TagHelper.LUTDATA }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LUTDATA) as DICOMElement;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence VOILUTSEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VOILUTSEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.VOILUTSEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VOILUTSEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SOFTCOPY_VOILUTSEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOFTCOPY_VOILUTSEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SOFTCOPY_VOILUTSEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOFTCOPY_VOILUTSEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongText IMAGE_PRESENTATION_COMMENTS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_PRESENTATION_COMMENTS))
                {
                    LongText newOb = new LongText { Tag = new Tag { Id = TagHelper.IMAGE_PRESENTATION_COMMENTS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_PRESENTATION_COMMENTS) as LongText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence BI_PLANE_ACQUISITION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BI_PLANE_ACQUISITION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.BI_PLANE_ACQUISITION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BI_PLANE_ACQUISITION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort REPRESENTATIVE_FRAME_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REPRESENTATIVE_FRAME_NUMBER))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.REPRESENTATIVE_FRAME_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REPRESENTATIVE_FRAME_NUMBER) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort FRAME_NUMBERS_OF_INTEREST
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FRAME_NUMBERS_OF_INTEREST))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.FRAME_NUMBERS_OF_INTEREST }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FRAME_NUMBERS_OF_INTEREST) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString FRAME_OF_INTEREST_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FRAME_OF_INTEREST_DESCRIPTION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.FRAME_OF_INTEREST_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FRAME_OF_INTEREST_DESCRIPTION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString FRAME_OF_INTEREST_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FRAME_OF_INTEREST_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.FRAME_OF_INTEREST_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FRAME_OF_INTEREST_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort MASK_POINTERS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MASK_POINTERS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.MASK_POINTERS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MASK_POINTERS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort RWAVE_POINTER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RWAVE_POINTER))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.RWAVE_POINTER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RWAVE_POINTER) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence MASK_SUBTRACTION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MASK_SUBTRACTION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.MASK_SUBTRACTION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MASK_SUBTRACTION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString MASK_OPERATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MASK_OPERATION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.MASK_OPERATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MASK_OPERATION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort APPLICABLE_FRAME_RANGE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.APPLICABLE_FRAME_RANGE))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.APPLICABLE_FRAME_RANGE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.APPLICABLE_FRAME_RANGE) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort MASK_FRAME_NUMBERS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MASK_FRAME_NUMBERS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.MASK_FRAME_NUMBERS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MASK_FRAME_NUMBERS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort CONTRAST_FRAME_AVERAGING
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTRAST_FRAME_AVERAGING))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.CONTRAST_FRAME_AVERAGING }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTRAST_FRAME_AVERAGING) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle MASK_SUB_PIXEL_SHIFT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MASK_SUB_PIXEL_SHIFT))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.MASK_SUB_PIXEL_SHIFT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MASK_SUB_PIXEL_SHIFT) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public SignedShort TIDOFFSET
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TIDOFFSET))
                {
                    SignedShort newOb = new SignedShort { Tag = new Tag { Id = TagHelper.TIDOFFSET }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TIDOFFSET) as SignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText MASK_OPERATION_EXPLANATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MASK_OPERATION_EXPLANATION))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.MASK_OPERATION_EXPLANATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MASK_OPERATION_EXPLANATION) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnlimitedText PIXEL_DATA_PROVIDER_URL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PIXEL_DATA_PROVIDER_URL))
                {
                    UnlimitedText newOb = new UnlimitedText { Tag = new Tag { Id = TagHelper.PIXEL_DATA_PROVIDER_URL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PIXEL_DATA_PROVIDER_URL) as UnlimitedText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong DATA_POINT_ROWS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DATA_POINT_ROWS))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.DATA_POINT_ROWS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DATA_POINT_ROWS) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong DATA_POINT_COLUMNS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DATA_POINT_COLUMNS))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.DATA_POINT_COLUMNS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DATA_POINT_COLUMNS) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SIGNAL_DOMAIN_COLUMNS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SIGNAL_DOMAIN_COLUMNS))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SIGNAL_DOMAIN_COLUMNS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SIGNAL_DOMAIN_COLUMNS) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort LARGEST_MONOCHROME_PIXEL_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LARGEST_MONOCHROME_PIXEL_VALUE))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.LARGEST_MONOCHROME_PIXEL_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LARGEST_MONOCHROME_PIXEL_VALUE) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString DATA_REPRESENTATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DATA_REPRESENTATION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.DATA_REPRESENTATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DATA_REPRESENTATION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PIXEL_MEASURES_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PIXEL_MEASURES_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PIXEL_MEASURES_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PIXEL_MEASURES_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence FRAME_VOILUTSEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FRAME_VOILUTSEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.FRAME_VOILUTSEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FRAME_VOILUTSEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PIXEL_VALUE_TRANSFORMATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PIXEL_VALUE_TRANSFORMATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PIXEL_VALUE_TRANSFORMATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PIXEL_VALUE_TRANSFORMATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SIGNAL_DOMAIN_ROWS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SIGNAL_DOMAIN_ROWS))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SIGNAL_DOMAIN_ROWS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SIGNAL_DOMAIN_ROWS) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle DISPLAY_FILTER_PERCENTAGE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DISPLAY_FILTER_PERCENTAGE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.DISPLAY_FILTER_PERCENTAGE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DISPLAY_FILTER_PERCENTAGE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence FRAME_PIXEL_SHIFT_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FRAME_PIXEL_SHIFT_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.FRAME_PIXEL_SHIFT_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FRAME_PIXEL_SHIFT_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort SUBTRACTION_ITEM_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SUBTRACTION_ITEM_ID))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.SUBTRACTION_ITEM_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SUBTRACTION_ITEM_ID) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PIXEL_INTENSITY_RELATIONSHIP_LUTSEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PIXEL_INTENSITY_RELATIONSHIP_LUTSEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PIXEL_INTENSITY_RELATIONSHIP_LUTSEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PIXEL_INTENSITY_RELATIONSHIP_LUTSEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence FRAME_PIXEL_DATA_PROPERTIES_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FRAME_PIXEL_DATA_PROPERTIES_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.FRAME_PIXEL_DATA_PROPERTIES_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FRAME_PIXEL_DATA_PROPERTIES_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString GEOMETRICAL_PROPERTIES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GEOMETRICAL_PROPERTIES))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.GEOMETRICAL_PROPERTIES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GEOMETRICAL_PROPERTIES) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle GEOMETRIC_MAXIMUM_DISTORTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GEOMETRIC_MAXIMUM_DISTORTION))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.GEOMETRIC_MAXIMUM_DISTORTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GEOMETRIC_MAXIMUM_DISTORTION) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString IMAGE_PROCESSING_APPLIED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_PROCESSING_APPLIED))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.IMAGE_PROCESSING_APPLIED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_PROCESSING_APPLIED) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString MASK_SELECTION_MODE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MASK_SELECTION_MODE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.MASK_SELECTION_MODE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MASK_SELECTION_MODE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString LUTFUNCTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LUTFUNCTION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.LUTFUNCTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LUTFUNCTION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle MASK_VISIBILITY_PERCENTAGE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MASK_VISIBILITY_PERCENTAGE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.MASK_VISIBILITY_PERCENTAGE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MASK_VISIBILITY_PERCENTAGE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PIXEL_SHIFT_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PIXEL_SHIFT_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PIXEL_SHIFT_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PIXEL_SHIFT_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REGION_PIXEL_SHIFT_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REGION_PIXEL_SHIFT_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REGION_PIXEL_SHIFT_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REGION_PIXEL_SHIFT_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public SignedShort VERTICES_OF_THE_REGION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VERTICES_OF_THE_REGION))
                {
                    SignedShort newOb = new SignedShort { Tag = new Tag { Id = TagHelper.VERTICES_OF_THE_REGION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VERTICES_OF_THE_REGION) as SignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence MULTI_FRAME_PRESENTATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MULTI_FRAME_PRESENTATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.MULTI_FRAME_PRESENTATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MULTI_FRAME_PRESENTATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort PIXEL_SHIFT_FRAME_RANGE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PIXEL_SHIFT_FRAME_RANGE))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.PIXEL_SHIFT_FRAME_RANGE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PIXEL_SHIFT_FRAME_RANGE) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort LUTFRAME_RANGE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LUTFRAME_RANGE))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.LUTFRAME_RANGE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LUTFRAME_RANGE) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString IMAGE_TO_EQUIPMENT_MAPPING_MATRIX
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_TO_EQUIPMENT_MAPPING_MATRIX))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.IMAGE_TO_EQUIPMENT_MAPPING_MATRIX }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_TO_EQUIPMENT_MAPPING_MATRIX) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString EQUIPMENT_COORDINATE_SYSTEM_IDENTIFICATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.EQUIPMENT_COORDINATE_SYSTEM_IDENTIFICATION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.EQUIPMENT_COORDINATE_SYSTEM_IDENTIFICATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.EQUIPMENT_COORDINATE_SYSTEM_IDENTIFICATION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString STUDY_STATUS_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STUDY_STATUS_ID))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.STUDY_STATUS_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STUDY_STATUS_ID) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString STUDY_PRIORITY_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STUDY_PRIORITY_ID))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.STUDY_PRIORITY_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STUDY_PRIORITY_ID) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString STUDY_IDISSUER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STUDY_IDISSUER))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.STUDY_IDISSUER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STUDY_IDISSUER) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateVR STUDY_VERIFIED_DATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STUDY_VERIFIED_DATE))
                {
                    DateVR newOb = new DateVR { Tag = new Tag { Id = TagHelper.STUDY_VERIFIED_DATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STUDY_VERIFIED_DATE) as DateVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR STUDY_VERIFIED_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STUDY_VERIFIED_TIME))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.STUDY_VERIFIED_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STUDY_VERIFIED_TIME) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateVR STUDY_READ_DATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STUDY_READ_DATE))
                {
                    DateVR newOb = new DateVR { Tag = new Tag { Id = TagHelper.STUDY_READ_DATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STUDY_READ_DATE) as DateVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR STUDY_READ_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STUDY_READ_TIME))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.STUDY_READ_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STUDY_READ_TIME) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateVR SCHEDULED_STUDY_START_DATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCHEDULED_STUDY_START_DATE))
                {
                    DateVR newOb = new DateVR { Tag = new Tag { Id = TagHelper.SCHEDULED_STUDY_START_DATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCHEDULED_STUDY_START_DATE) as DateVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR SCHEDULED_STUDY_START_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCHEDULED_STUDY_START_TIME))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.SCHEDULED_STUDY_START_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCHEDULED_STUDY_START_TIME) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateVR SCHEDULED_STUDY_STOP_DATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCHEDULED_STUDY_STOP_DATE))
                {
                    DateVR newOb = new DateVR { Tag = new Tag { Id = TagHelper.SCHEDULED_STUDY_STOP_DATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCHEDULED_STUDY_STOP_DATE) as DateVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR SCHEDULED_STUDY_STOP_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCHEDULED_STUDY_STOP_TIME))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.SCHEDULED_STUDY_STOP_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCHEDULED_STUDY_STOP_TIME) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString SCHEDULED_STUDY_LOCATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCHEDULED_STUDY_LOCATION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.SCHEDULED_STUDY_LOCATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCHEDULED_STUDY_LOCATION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ApplicationEntity SCHEDULED_STUDY_LOCATION_AETITLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCHEDULED_STUDY_LOCATION_AETITLE))
                {
                    ApplicationEntity newOb = new ApplicationEntity { Tag = new Tag { Id = TagHelper.SCHEDULED_STUDY_LOCATION_AETITLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCHEDULED_STUDY_LOCATION_AETITLE) as ApplicationEntity;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString REASON_FOR_STUDY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REASON_FOR_STUDY))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.REASON_FOR_STUDY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REASON_FOR_STUDY) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REQUESTING_PHYSICIAN_IDENTIFICATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REQUESTING_PHYSICIAN_IDENTIFICATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REQUESTING_PHYSICIAN_IDENTIFICATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REQUESTING_PHYSICIAN_IDENTIFICATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public PersonsName REQUESTING_PHYSICIAN
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REQUESTING_PHYSICIAN))
                {
                    PersonsName newOb = new PersonsName { Tag = new Tag { Id = TagHelper.REQUESTING_PHYSICIAN }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REQUESTING_PHYSICIAN) as PersonsName;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString REQUESTING_SERVICE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REQUESTING_SERVICE))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.REQUESTING_SERVICE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REQUESTING_SERVICE) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REQUESTING_SERVICE_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REQUESTING_SERVICE_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REQUESTING_SERVICE_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REQUESTING_SERVICE_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateVR STUDY_ARRIVAL_DATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STUDY_ARRIVAL_DATE))
                {
                    DateVR newOb = new DateVR { Tag = new Tag { Id = TagHelper.STUDY_ARRIVAL_DATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STUDY_ARRIVAL_DATE) as DateVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR STUDY_ARRIVAL_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STUDY_ARRIVAL_TIME))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.STUDY_ARRIVAL_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STUDY_ARRIVAL_TIME) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateVR STUDY_COMPLETION_DATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STUDY_COMPLETION_DATE))
                {
                    DateVR newOb = new DateVR { Tag = new Tag { Id = TagHelper.STUDY_COMPLETION_DATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STUDY_COMPLETION_DATE) as DateVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR STUDY_COMPLETION_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STUDY_COMPLETION_TIME))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.STUDY_COMPLETION_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STUDY_COMPLETION_TIME) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString STUDY_COMPONENT_STATUS_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STUDY_COMPONENT_STATUS_ID))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.STUDY_COMPONENT_STATUS_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STUDY_COMPONENT_STATUS_ID) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString REQUESTED_PROCEDURE_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REQUESTED_PROCEDURE_DESCRIPTION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.REQUESTED_PROCEDURE_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REQUESTED_PROCEDURE_DESCRIPTION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REQUESTED_PROCEDURE_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REQUESTED_PROCEDURE_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REQUESTED_PROCEDURE_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REQUESTED_PROCEDURE_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString REQUESTED_CONTRAST_AGENT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REQUESTED_CONTRAST_AGENT))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.REQUESTED_CONTRAST_AGENT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REQUESTED_CONTRAST_AGENT) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongText STUDY_COMMENTS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STUDY_COMMENTS))
                {
                    LongText newOb = new LongText { Tag = new Tag { Id = TagHelper.STUDY_COMMENTS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STUDY_COMMENTS) as LongText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_PATIENT_ALIAS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_PATIENT_ALIAS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_PATIENT_ALIAS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_PATIENT_ALIAS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString VISIT_STATUS_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VISIT_STATUS_ID))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.VISIT_STATUS_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VISIT_STATUS_ID) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString ADMISSION_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ADMISSION_ID))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.ADMISSION_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ADMISSION_ID) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString ISSUER_OF_ADMISSION_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ISSUER_OF_ADMISSION_ID))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.ISSUER_OF_ADMISSION_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ISSUER_OF_ADMISSION_ID) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ISSUER_OF_ADMISSION_IDSEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ISSUER_OF_ADMISSION_IDSEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ISSUER_OF_ADMISSION_IDSEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ISSUER_OF_ADMISSION_IDSEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString ROUTE_OF_ADMISSIONS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ROUTE_OF_ADMISSIONS))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.ROUTE_OF_ADMISSIONS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ROUTE_OF_ADMISSIONS) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateVR SCHEDULED_ADMISSION_DATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCHEDULED_ADMISSION_DATE))
                {
                    DateVR newOb = new DateVR { Tag = new Tag { Id = TagHelper.SCHEDULED_ADMISSION_DATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCHEDULED_ADMISSION_DATE) as DateVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR SCHEDULED_ADMISSION_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCHEDULED_ADMISSION_TIME))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.SCHEDULED_ADMISSION_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCHEDULED_ADMISSION_TIME) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateVR SCHEDULED_DISCHARGE_DATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCHEDULED_DISCHARGE_DATE))
                {
                    DateVR newOb = new DateVR { Tag = new Tag { Id = TagHelper.SCHEDULED_DISCHARGE_DATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCHEDULED_DISCHARGE_DATE) as DateVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR SCHEDULED_DISCHARGE_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCHEDULED_DISCHARGE_TIME))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.SCHEDULED_DISCHARGE_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCHEDULED_DISCHARGE_TIME) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString SCHEDULED_PATIENT_INSTITUTION_RESIDENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCHEDULED_PATIENT_INSTITUTION_RESIDENCE))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.SCHEDULED_PATIENT_INSTITUTION_RESIDENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCHEDULED_PATIENT_INSTITUTION_RESIDENCE) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateVR ADMITTING_DATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ADMITTING_DATE))
                {
                    DateVR newOb = new DateVR { Tag = new Tag { Id = TagHelper.ADMITTING_DATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ADMITTING_DATE) as DateVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR ADMITTING_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ADMITTING_TIME))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.ADMITTING_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ADMITTING_TIME) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateVR DISCHARGE_DATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DISCHARGE_DATE))
                {
                    DateVR newOb = new DateVR { Tag = new Tag { Id = TagHelper.DISCHARGE_DATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DISCHARGE_DATE) as DateVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR DISCHARGE_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DISCHARGE_TIME))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.DISCHARGE_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DISCHARGE_TIME) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString DISCHARGE_DIAGNOSIS_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DISCHARGE_DIAGNOSIS_DESCRIPTION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.DISCHARGE_DIAGNOSIS_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DISCHARGE_DIAGNOSIS_DESCRIPTION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence DISCHARGE_DIAGNOSIS_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DISCHARGE_DIAGNOSIS_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.DISCHARGE_DIAGNOSIS_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DISCHARGE_DIAGNOSIS_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString SPECIAL_NEEDS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SPECIAL_NEEDS))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.SPECIAL_NEEDS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SPECIAL_NEEDS) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString SERVICE_EPISODE_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SERVICE_EPISODE_ID))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.SERVICE_EPISODE_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SERVICE_EPISODE_ID) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString ISSUER_OF_SERVICE_EPISODE_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ISSUER_OF_SERVICE_EPISODE_ID))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.ISSUER_OF_SERVICE_EPISODE_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ISSUER_OF_SERVICE_EPISODE_ID) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString SERVICE_EPISODE_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SERVICE_EPISODE_DESCRIPTION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.SERVICE_EPISODE_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SERVICE_EPISODE_DESCRIPTION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ISSUER_OF_SERVICE_EPISODE_IDSEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ISSUER_OF_SERVICE_EPISODE_IDSEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ISSUER_OF_SERVICE_EPISODE_IDSEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ISSUER_OF_SERVICE_EPISODE_IDSEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PERTINENT_DOCUMENTS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PERTINENT_DOCUMENTS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PERTINENT_DOCUMENTS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PERTINENT_DOCUMENTS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString CURRENT_PATIENT_LOCATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CURRENT_PATIENT_LOCATION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.CURRENT_PATIENT_LOCATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CURRENT_PATIENT_LOCATION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString PATIENT_INSTITUTION_RESIDENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_INSTITUTION_RESIDENCE))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.PATIENT_INSTITUTION_RESIDENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_INSTITUTION_RESIDENCE) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString PATIENT_STATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_STATE))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.PATIENT_STATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_STATE) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PATIENT_CLINICAL_TRIAL_PARTICIPATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_CLINICAL_TRIAL_PARTICIPATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PATIENT_CLINICAL_TRIAL_PARTICIPATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_CLINICAL_TRIAL_PARTICIPATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongText VISIT_COMMENTS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VISIT_COMMENTS))
                {
                    LongText newOb = new LongText { Tag = new Tag { Id = TagHelper.VISIT_COMMENTS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VISIT_COMMENTS) as LongText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString WAVEFORM_ORIGINALITY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.WAVEFORM_ORIGINALITY))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.WAVEFORM_ORIGINALITY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.WAVEFORM_ORIGINALITY) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort NUMBER_OF_WAVEFORM_CHANNELS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_WAVEFORM_CHANNELS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.NUMBER_OF_WAVEFORM_CHANNELS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_WAVEFORM_CHANNELS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong NUMBER_OF_WAVEFORM_SAMPLES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_WAVEFORM_SAMPLES))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.NUMBER_OF_WAVEFORM_SAMPLES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_WAVEFORM_SAMPLES) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString SAMPLING_FREQUENCY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SAMPLING_FREQUENCY))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.SAMPLING_FREQUENCY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SAMPLING_FREQUENCY) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString MULTIPLEX_GROUP_LABEL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MULTIPLEX_GROUP_LABEL))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.MULTIPLEX_GROUP_LABEL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MULTIPLEX_GROUP_LABEL) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CHANNEL_DEFINITION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CHANNEL_DEFINITION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CHANNEL_DEFINITION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CHANNEL_DEFINITION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString WAVEFORM_CHANNEL_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.WAVEFORM_CHANNEL_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.WAVEFORM_CHANNEL_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.WAVEFORM_CHANNEL_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString CHANNEL_LABEL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CHANNEL_LABEL))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.CHANNEL_LABEL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CHANNEL_LABEL) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString CHANNEL_STATUS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CHANNEL_STATUS))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.CHANNEL_STATUS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CHANNEL_STATUS) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CHANNEL_SOURCE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CHANNEL_SOURCE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CHANNEL_SOURCE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CHANNEL_SOURCE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CHANNEL_SOURCE_MODIFIERS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CHANNEL_SOURCE_MODIFIERS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CHANNEL_SOURCE_MODIFIERS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CHANNEL_SOURCE_MODIFIERS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SOURCE_WAVEFORM_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOURCE_WAVEFORM_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SOURCE_WAVEFORM_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOURCE_WAVEFORM_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString CHANNEL_DERIVATION_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CHANNEL_DERIVATION_DESCRIPTION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.CHANNEL_DERIVATION_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CHANNEL_DERIVATION_DESCRIPTION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString CHANNEL_SENSITIVITY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CHANNEL_SENSITIVITY))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.CHANNEL_SENSITIVITY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CHANNEL_SENSITIVITY) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CHANNEL_SENSITIVITY_UNITS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CHANNEL_SENSITIVITY_UNITS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CHANNEL_SENSITIVITY_UNITS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CHANNEL_SENSITIVITY_UNITS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString CHANNEL_SENSITIVITY_CORRECTION_FACTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CHANNEL_SENSITIVITY_CORRECTION_FACTOR))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.CHANNEL_SENSITIVITY_CORRECTION_FACTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CHANNEL_SENSITIVITY_CORRECTION_FACTOR) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString CHANNEL_BASELINE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CHANNEL_BASELINE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.CHANNEL_BASELINE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CHANNEL_BASELINE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString CHANNEL_TIME_SKEW
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CHANNEL_TIME_SKEW))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.CHANNEL_TIME_SKEW }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CHANNEL_TIME_SKEW) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString CHANNEL_SAMPLE_SKEW
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CHANNEL_SAMPLE_SKEW))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.CHANNEL_SAMPLE_SKEW }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CHANNEL_SAMPLE_SKEW) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString CHANNEL_OFFSET
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CHANNEL_OFFSET))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.CHANNEL_OFFSET }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CHANNEL_OFFSET) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort WAVEFORM_BITS_STORED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.WAVEFORM_BITS_STORED))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.WAVEFORM_BITS_STORED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.WAVEFORM_BITS_STORED) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString FILTER_LOW_FREQUENCY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FILTER_LOW_FREQUENCY))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.FILTER_LOW_FREQUENCY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FILTER_LOW_FREQUENCY) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString FILTER_HIGH_FREQUENCY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FILTER_HIGH_FREQUENCY))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.FILTER_HIGH_FREQUENCY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FILTER_HIGH_FREQUENCY) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString NOTCH_FILTER_FREQUENCY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NOTCH_FILTER_FREQUENCY))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.NOTCH_FILTER_FREQUENCY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NOTCH_FILTER_FREQUENCY) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString NOTCH_FILTER_BANDWIDTH
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NOTCH_FILTER_BANDWIDTH))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.NOTCH_FILTER_BANDWIDTH }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NOTCH_FILTER_BANDWIDTH) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle WAVEFORM_DATA_DISPLAY_SCALE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.WAVEFORM_DATA_DISPLAY_SCALE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.WAVEFORM_DATA_DISPLAY_SCALE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.WAVEFORM_DATA_DISPLAY_SCALE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort WAVEFORM_DISPLAY_BACKGROUND_CIELAB_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.WAVEFORM_DISPLAY_BACKGROUND_CIELAB_VALUE))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.WAVEFORM_DISPLAY_BACKGROUND_CIELAB_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.WAVEFORM_DISPLAY_BACKGROUND_CIELAB_VALUE) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence WAVEFORM_PRESENTATION_GROUP_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.WAVEFORM_PRESENTATION_GROUP_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.WAVEFORM_PRESENTATION_GROUP_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.WAVEFORM_PRESENTATION_GROUP_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort PRESENTATION_GROUP_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRESENTATION_GROUP_NUMBER))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.PRESENTATION_GROUP_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRESENTATION_GROUP_NUMBER) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CHANNEL_DISPLAY_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CHANNEL_DISPLAY_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CHANNEL_DISPLAY_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CHANNEL_DISPLAY_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort CHANNEL_RECOMMENDED_DISPLAY_CIELAB_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CHANNEL_RECOMMENDED_DISPLAY_CIELAB_VALUE))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.CHANNEL_RECOMMENDED_DISPLAY_CIELAB_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CHANNEL_RECOMMENDED_DISPLAY_CIELAB_VALUE) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle CHANNEL_POSITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CHANNEL_POSITION))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.CHANNEL_POSITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CHANNEL_POSITION) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString DISPLAY_SHADING_FLAG
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DISPLAY_SHADING_FLAG))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.DISPLAY_SHADING_FLAG }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DISPLAY_SHADING_FLAG) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle FRACTIONAL_CHANNEL_DISPLAY_SCALE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FRACTIONAL_CHANNEL_DISPLAY_SCALE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.FRACTIONAL_CHANNEL_DISPLAY_SCALE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FRACTIONAL_CHANNEL_DISPLAY_SCALE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle ABSOLUTE_CHANNEL_DISPLAY_SCALE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ABSOLUTE_CHANNEL_DISPLAY_SCALE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.ABSOLUTE_CHANNEL_DISPLAY_SCALE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ABSOLUTE_CHANNEL_DISPLAY_SCALE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence MULTIPLEXED_AUDIO_CHANNELS_DESCRIPTION_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MULTIPLEXED_AUDIO_CHANNELS_DESCRIPTION_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.MULTIPLEXED_AUDIO_CHANNELS_DESCRIPTION_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MULTIPLEXED_AUDIO_CHANNELS_DESCRIPTION_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString CHANNEL_IDENTIFICATION_CODE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CHANNEL_IDENTIFICATION_CODE))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.CHANNEL_IDENTIFICATION_CODE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CHANNEL_IDENTIFICATION_CODE) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString CHANNEL_MODE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CHANNEL_MODE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.CHANNEL_MODE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CHANNEL_MODE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ApplicationEntity SCHEDULED_STATION_AETITLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCHEDULED_STATION_AETITLE))
                {
                    ApplicationEntity newOb = new ApplicationEntity { Tag = new Tag { Id = TagHelper.SCHEDULED_STATION_AETITLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCHEDULED_STATION_AETITLE) as ApplicationEntity;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateVR SCHEDULED_PROCEDURE_STEP_START_DATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCHEDULED_PROCEDURE_STEP_START_DATE))
                {
                    DateVR newOb = new DateVR { Tag = new Tag { Id = TagHelper.SCHEDULED_PROCEDURE_STEP_START_DATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCHEDULED_PROCEDURE_STEP_START_DATE) as DateVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR SCHEDULED_PROCEDURE_STEP_START_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCHEDULED_PROCEDURE_STEP_START_TIME))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.SCHEDULED_PROCEDURE_STEP_START_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCHEDULED_PROCEDURE_STEP_START_TIME) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateVR SCHEDULED_PROCEDURE_STEP_END_DATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCHEDULED_PROCEDURE_STEP_END_DATE))
                {
                    DateVR newOb = new DateVR { Tag = new Tag { Id = TagHelper.SCHEDULED_PROCEDURE_STEP_END_DATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCHEDULED_PROCEDURE_STEP_END_DATE) as DateVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR SCHEDULED_PROCEDURE_STEP_END_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCHEDULED_PROCEDURE_STEP_END_TIME))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.SCHEDULED_PROCEDURE_STEP_END_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCHEDULED_PROCEDURE_STEP_END_TIME) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public PersonsName SCHEDULED_PERFORMING_PHYSICIAN_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCHEDULED_PERFORMING_PHYSICIAN_NAME))
                {
                    PersonsName newOb = new PersonsName { Tag = new Tag { Id = TagHelper.SCHEDULED_PERFORMING_PHYSICIAN_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCHEDULED_PERFORMING_PHYSICIAN_NAME) as PersonsName;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString SCHEDULED_PROCEDURE_STEP_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCHEDULED_PROCEDURE_STEP_DESCRIPTION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.SCHEDULED_PROCEDURE_STEP_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCHEDULED_PROCEDURE_STEP_DESCRIPTION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SCHEDULED_PROTOCOL_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCHEDULED_PROTOCOL_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SCHEDULED_PROTOCOL_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCHEDULED_PROTOCOL_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString SCHEDULED_PROCEDURE_STEP_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCHEDULED_PROCEDURE_STEP_ID))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.SCHEDULED_PROCEDURE_STEP_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCHEDULED_PROCEDURE_STEP_ID) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence STAGE_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STAGE_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.STAGE_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STAGE_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SCHEDULED_PERFORMING_PHYSICIAN_IDENTIFICATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCHEDULED_PERFORMING_PHYSICIAN_IDENTIFICATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SCHEDULED_PERFORMING_PHYSICIAN_IDENTIFICATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCHEDULED_PERFORMING_PHYSICIAN_IDENTIFICATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString SCHEDULED_STATION_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCHEDULED_STATION_NAME))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.SCHEDULED_STATION_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCHEDULED_STATION_NAME) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString SCHEDULED_PROCEDURE_STEP_LOCATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCHEDULED_PROCEDURE_STEP_LOCATION))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.SCHEDULED_PROCEDURE_STEP_LOCATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCHEDULED_PROCEDURE_STEP_LOCATION) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString PRE_MEDICATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRE_MEDICATION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.PRE_MEDICATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRE_MEDICATION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SCHEDULED_PROCEDURE_STEP_STATUS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCHEDULED_PROCEDURE_STEP_STATUS))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SCHEDULED_PROCEDURE_STEP_STATUS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCHEDULED_PROCEDURE_STEP_STATUS) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ORDER_PLACER_IDENTIFIER_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ORDER_PLACER_IDENTIFIER_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ORDER_PLACER_IDENTIFIER_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ORDER_PLACER_IDENTIFIER_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ORDER_FILLER_IDENTIFIER_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ORDER_FILLER_IDENTIFIER_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ORDER_FILLER_IDENTIFIER_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ORDER_FILLER_IDENTIFIER_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnlimitedText LOCAL_NAMESPACE_ENTITY_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LOCAL_NAMESPACE_ENTITY_ID))
                {
                    UnlimitedText newOb = new UnlimitedText { Tag = new Tag { Id = TagHelper.LOCAL_NAMESPACE_ENTITY_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LOCAL_NAMESPACE_ENTITY_ID) as UnlimitedText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnlimitedText UNIVERSAL_ENTITY_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.UNIVERSAL_ENTITY_ID))
                {
                    UnlimitedText newOb = new UnlimitedText { Tag = new Tag { Id = TagHelper.UNIVERSAL_ENTITY_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.UNIVERSAL_ENTITY_ID) as UnlimitedText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString UNIVERSAL_ENTITY_IDTYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.UNIVERSAL_ENTITY_IDTYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.UNIVERSAL_ENTITY_IDTYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.UNIVERSAL_ENTITY_IDTYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString IDENTIFIER_TYPE_CODE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IDENTIFIER_TYPE_CODE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.IDENTIFIER_TYPE_CODE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IDENTIFIER_TYPE_CODE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ASSIGNING_FACILITY_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ASSIGNING_FACILITY_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ASSIGNING_FACILITY_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ASSIGNING_FACILITY_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ASSIGNING_JURISDICTION_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ASSIGNING_JURISDICTION_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ASSIGNING_JURISDICTION_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ASSIGNING_JURISDICTION_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ASSIGNING_AGENCY_OR_DEPARTMENT_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ASSIGNING_AGENCY_OR_DEPARTMENT_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ASSIGNING_AGENCY_OR_DEPARTMENT_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ASSIGNING_AGENCY_OR_DEPARTMENT_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SCHEDULED_PROCEDURE_STEP_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCHEDULED_PROCEDURE_STEP_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SCHEDULED_PROCEDURE_STEP_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCHEDULED_PROCEDURE_STEP_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_NON_IMAGE_COMPOSITE_SOPINSTANCE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_NON_IMAGE_COMPOSITE_SOPINSTANCE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_NON_IMAGE_COMPOSITE_SOPINSTANCE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_NON_IMAGE_COMPOSITE_SOPINSTANCE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ApplicationEntity PERFORMED_STATION_AETITLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PERFORMED_STATION_AETITLE))
                {
                    ApplicationEntity newOb = new ApplicationEntity { Tag = new Tag { Id = TagHelper.PERFORMED_STATION_AETITLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PERFORMED_STATION_AETITLE) as ApplicationEntity;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString PERFORMED_STATION_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PERFORMED_STATION_NAME))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.PERFORMED_STATION_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PERFORMED_STATION_NAME) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString PERFORMED_LOCATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PERFORMED_LOCATION))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.PERFORMED_LOCATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PERFORMED_LOCATION) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateVR PERFORMED_PROCEDURE_STEP_START_DATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PERFORMED_PROCEDURE_STEP_START_DATE))
                {
                    DateVR newOb = new DateVR { Tag = new Tag { Id = TagHelper.PERFORMED_PROCEDURE_STEP_START_DATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PERFORMED_PROCEDURE_STEP_START_DATE) as DateVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR PERFORMED_PROCEDURE_STEP_START_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PERFORMED_PROCEDURE_STEP_START_TIME))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.PERFORMED_PROCEDURE_STEP_START_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PERFORMED_PROCEDURE_STEP_START_TIME) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateVR PERFORMED_PROCEDURE_STEP_END_DATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PERFORMED_PROCEDURE_STEP_END_DATE))
                {
                    DateVR newOb = new DateVR { Tag = new Tag { Id = TagHelper.PERFORMED_PROCEDURE_STEP_END_DATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PERFORMED_PROCEDURE_STEP_END_DATE) as DateVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR PERFORMED_PROCEDURE_STEP_END_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PERFORMED_PROCEDURE_STEP_END_TIME))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.PERFORMED_PROCEDURE_STEP_END_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PERFORMED_PROCEDURE_STEP_END_TIME) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString PERFORMED_PROCEDURE_STEP_STATUS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PERFORMED_PROCEDURE_STEP_STATUS))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.PERFORMED_PROCEDURE_STEP_STATUS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PERFORMED_PROCEDURE_STEP_STATUS) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString PERFORMED_PROCEDURE_STEP_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PERFORMED_PROCEDURE_STEP_ID))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.PERFORMED_PROCEDURE_STEP_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PERFORMED_PROCEDURE_STEP_ID) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString PERFORMED_PROCEDURE_STEP_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PERFORMED_PROCEDURE_STEP_DESCRIPTION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.PERFORMED_PROCEDURE_STEP_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PERFORMED_PROCEDURE_STEP_DESCRIPTION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString PERFORMED_PROCEDURE_TYPE_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PERFORMED_PROCEDURE_TYPE_DESCRIPTION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.PERFORMED_PROCEDURE_TYPE_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PERFORMED_PROCEDURE_TYPE_DESCRIPTION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PERFORMED_PROTOCOL_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PERFORMED_PROTOCOL_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PERFORMED_PROTOCOL_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PERFORMED_PROTOCOL_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString PERFORMED_PROTOCOL_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PERFORMED_PROTOCOL_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.PERFORMED_PROTOCOL_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PERFORMED_PROTOCOL_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SCHEDULED_STEP_ATTRIBUTES_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCHEDULED_STEP_ATTRIBUTES_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SCHEDULED_STEP_ATTRIBUTES_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCHEDULED_STEP_ATTRIBUTES_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REQUEST_ATTRIBUTES_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REQUEST_ATTRIBUTES_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REQUEST_ATTRIBUTES_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REQUEST_ATTRIBUTES_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText COMMENTS_ON_THE_PERFORMED_PROCEDURE_STEP
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COMMENTS_ON_THE_PERFORMED_PROCEDURE_STEP))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.COMMENTS_ON_THE_PERFORMED_PROCEDURE_STEP }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COMMENTS_ON_THE_PERFORMED_PROCEDURE_STEP) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PERFORMED_PROCEDURE_STEP_DISCONTINUATION_REASON_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PERFORMED_PROCEDURE_STEP_DISCONTINUATION_REASON_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PERFORMED_PROCEDURE_STEP_DISCONTINUATION_REASON_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PERFORMED_PROCEDURE_STEP_DISCONTINUATION_REASON_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence QUANTITY_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.QUANTITY_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.QUANTITY_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.QUANTITY_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString QUANTITY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.QUANTITY))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.QUANTITY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.QUANTITY) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence MEASURING_UNITS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MEASURING_UNITS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.MEASURING_UNITS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MEASURING_UNITS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence BILLING_ITEM_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BILLING_ITEM_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.BILLING_ITEM_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BILLING_ITEM_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort TOTAL_TIME_OF_FLUOROSCOPY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TOTAL_TIME_OF_FLUOROSCOPY))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.TOTAL_TIME_OF_FLUOROSCOPY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TOTAL_TIME_OF_FLUOROSCOPY) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort TOTAL_NUMBER_OF_EXPOSURES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TOTAL_NUMBER_OF_EXPOSURES))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.TOTAL_NUMBER_OF_EXPOSURES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TOTAL_NUMBER_OF_EXPOSURES) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort ENTRANCE_DOSE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ENTRANCE_DOSE))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.ENTRANCE_DOSE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ENTRANCE_DOSE) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort EXPOSED_AREA
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.EXPOSED_AREA))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.EXPOSED_AREA }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.EXPOSED_AREA) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DISTANCE_SOURCE_TO_ENTRANCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DISTANCE_SOURCE_TO_ENTRANCE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DISTANCE_SOURCE_TO_ENTRANCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DISTANCE_SOURCE_TO_ENTRANCE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DISTANCE_SOURCE_TO_SUPPORT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DISTANCE_SOURCE_TO_SUPPORT))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DISTANCE_SOURCE_TO_SUPPORT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DISTANCE_SOURCE_TO_SUPPORT) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence EXPOSURE_DOSE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.EXPOSURE_DOSE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.EXPOSURE_DOSE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.EXPOSURE_DOSE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText COMMENTS_ON_RADIATION_DOSE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COMMENTS_ON_RADIATION_DOSE))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.COMMENTS_ON_RADIATION_DOSE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COMMENTS_ON_RADIATION_DOSE) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString XRAY_OUTPUT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.XRAY_OUTPUT))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.XRAY_OUTPUT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.XRAY_OUTPUT) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString HALF_VALUE_LAYER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.HALF_VALUE_LAYER))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.HALF_VALUE_LAYER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.HALF_VALUE_LAYER) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString ORGAN_DOSE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ORGAN_DOSE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.ORGAN_DOSE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ORGAN_DOSE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString ORGAN_EXPOSED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ORGAN_EXPOSED))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.ORGAN_EXPOSED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ORGAN_EXPOSED) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence BILLING_PROCEDURE_STEP_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BILLING_PROCEDURE_STEP_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.BILLING_PROCEDURE_STEP_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BILLING_PROCEDURE_STEP_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence FILM_CONSUMPTION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FILM_CONSUMPTION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.FILM_CONSUMPTION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FILM_CONSUMPTION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence BILLING_SUPPLIES_AND_DEVICES_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BILLING_SUPPLIES_AND_DEVICES_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.BILLING_SUPPLIES_AND_DEVICES_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BILLING_SUPPLIES_AND_DEVICES_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_PROCEDURE_STEP_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_PROCEDURE_STEP_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_PROCEDURE_STEP_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_PROCEDURE_STEP_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PERFORMED_SERIES_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PERFORMED_SERIES_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PERFORMED_SERIES_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PERFORMED_SERIES_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongText COMMENTS_ON_THE_SCHEDULED_PROCEDURE_STEP
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COMMENTS_ON_THE_SCHEDULED_PROCEDURE_STEP))
                {
                    LongText newOb = new LongText { Tag = new Tag { Id = TagHelper.COMMENTS_ON_THE_SCHEDULED_PROCEDURE_STEP }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COMMENTS_ON_THE_SCHEDULED_PROCEDURE_STEP) as LongText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PROTOCOL_CONTEXT_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PROTOCOL_CONTEXT_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PROTOCOL_CONTEXT_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PROTOCOL_CONTEXT_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CONTENT_ITEM_MODIFIER_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTENT_ITEM_MODIFIER_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CONTENT_ITEM_MODIFIER_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTENT_ITEM_MODIFIER_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SCHEDULED_SPECIMEN_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCHEDULED_SPECIMEN_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SCHEDULED_SPECIMEN_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCHEDULED_SPECIMEN_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString SPECIMEN_ACCESSION_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SPECIMEN_ACCESSION_NUMBER))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.SPECIMEN_ACCESSION_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SPECIMEN_ACCESSION_NUMBER) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString CONTAINER_IDENTIFIER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTAINER_IDENTIFIER))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.CONTAINER_IDENTIFIER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTAINER_IDENTIFIER) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ISSUER_OF_THE_CONTAINER_IDENTIFIER_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ISSUER_OF_THE_CONTAINER_IDENTIFIER_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ISSUER_OF_THE_CONTAINER_IDENTIFIER_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ISSUER_OF_THE_CONTAINER_IDENTIFIER_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ALTERNATE_CONTAINER_IDENTIFIER_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ALTERNATE_CONTAINER_IDENTIFIER_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ALTERNATE_CONTAINER_IDENTIFIER_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ALTERNATE_CONTAINER_IDENTIFIER_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CONTAINER_TYPE_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTAINER_TYPE_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CONTAINER_TYPE_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTAINER_TYPE_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString CONTAINER_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTAINER_DESCRIPTION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.CONTAINER_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTAINER_DESCRIPTION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CONTAINER_COMPONENT_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTAINER_COMPONENT_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CONTAINER_COMPONENT_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTAINER_COMPONENT_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SPECIMEN_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SPECIMEN_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SPECIMEN_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SPECIMEN_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString SPECIMEN_IDENTIFIER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SPECIMEN_IDENTIFIER))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.SPECIMEN_IDENTIFIER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SPECIMEN_IDENTIFIER) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SPECIMEN_DESCRIPTION_SEQUENCE_TRIAL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SPECIMEN_DESCRIPTION_SEQUENCE_TRIAL))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SPECIMEN_DESCRIPTION_SEQUENCE_TRIAL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SPECIMEN_DESCRIPTION_SEQUENCE_TRIAL) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText SPECIMEN_DESCRIPTION_TRIAL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SPECIMEN_DESCRIPTION_TRIAL))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.SPECIMEN_DESCRIPTION_TRIAL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SPECIMEN_DESCRIPTION_TRIAL) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier SPECIMEN_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SPECIMEN_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.SPECIMEN_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SPECIMEN_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ACQUISITION_CONTEXT_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ACQUISITION_CONTEXT_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ACQUISITION_CONTEXT_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ACQUISITION_CONTEXT_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText ACQUISITION_CONTEXT_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ACQUISITION_CONTEXT_DESCRIPTION))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.ACQUISITION_CONTEXT_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ACQUISITION_CONTEXT_DESCRIPTION) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SPECIMEN_DESCRIPTION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SPECIMEN_DESCRIPTION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SPECIMEN_DESCRIPTION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SPECIMEN_DESCRIPTION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ISSUER_OF_THE_SPECIMEN_IDENTIFIER_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ISSUER_OF_THE_SPECIMEN_IDENTIFIER_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ISSUER_OF_THE_SPECIMEN_IDENTIFIER_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ISSUER_OF_THE_SPECIMEN_IDENTIFIER_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SPECIMEN_TYPE_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SPECIMEN_TYPE_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SPECIMEN_TYPE_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SPECIMEN_TYPE_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString SPECIMEN_SHORT_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SPECIMEN_SHORT_DESCRIPTION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.SPECIMEN_SHORT_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SPECIMEN_SHORT_DESCRIPTION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnlimitedText SPECIMEN_DETAILED_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SPECIMEN_DETAILED_DESCRIPTION))
                {
                    UnlimitedText newOb = new UnlimitedText { Tag = new Tag { Id = TagHelper.SPECIMEN_DETAILED_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SPECIMEN_DETAILED_DESCRIPTION) as UnlimitedText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SPECIMEN_PREPARATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SPECIMEN_PREPARATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SPECIMEN_PREPARATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SPECIMEN_PREPARATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SPECIMEN_PREPARATION_STEP_CONTENT_ITEM_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SPECIMEN_PREPARATION_STEP_CONTENT_ITEM_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SPECIMEN_PREPARATION_STEP_CONTENT_ITEM_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SPECIMEN_PREPARATION_STEP_CONTENT_ITEM_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SPECIMEN_LOCALIZATION_CONTENT_ITEM_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SPECIMEN_LOCALIZATION_CONTENT_ITEM_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SPECIMEN_LOCALIZATION_CONTENT_ITEM_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SPECIMEN_LOCALIZATION_CONTENT_ITEM_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString SLIDE_IDENTIFIER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SLIDE_IDENTIFIER))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.SLIDE_IDENTIFIER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SLIDE_IDENTIFIER) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence IMAGE_CENTER_POINT_COORDINATES_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_CENTER_POINT_COORDINATES_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.IMAGE_CENTER_POINT_COORDINATES_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_CENTER_POINT_COORDINATES_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString XOFFSET_IN_SLIDE_COORDINATE_SYSTEM
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.XOFFSET_IN_SLIDE_COORDINATE_SYSTEM))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.XOFFSET_IN_SLIDE_COORDINATE_SYSTEM }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.XOFFSET_IN_SLIDE_COORDINATE_SYSTEM) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString YOFFSET_IN_SLIDE_COORDINATE_SYSTEM
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.YOFFSET_IN_SLIDE_COORDINATE_SYSTEM))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.YOFFSET_IN_SLIDE_COORDINATE_SYSTEM }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.YOFFSET_IN_SLIDE_COORDINATE_SYSTEM) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString ZOFFSET_IN_SLIDE_COORDINATE_SYSTEM
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ZOFFSET_IN_SLIDE_COORDINATE_SYSTEM))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.ZOFFSET_IN_SLIDE_COORDINATE_SYSTEM }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ZOFFSET_IN_SLIDE_COORDINATE_SYSTEM) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PIXEL_SPACING_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PIXEL_SPACING_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PIXEL_SPACING_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PIXEL_SPACING_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence COORDINATE_SYSTEM_AXIS_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COORDINATE_SYSTEM_AXIS_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.COORDINATE_SYSTEM_AXIS_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COORDINATE_SYSTEM_AXIS_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence MEASUREMENT_UNITS_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MEASUREMENT_UNITS_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.MEASUREMENT_UNITS_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MEASUREMENT_UNITS_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence VITAL_STAIN_CODE_SEQUENCE_TRIAL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VITAL_STAIN_CODE_SEQUENCE_TRIAL))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.VITAL_STAIN_CODE_SEQUENCE_TRIAL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VITAL_STAIN_CODE_SEQUENCE_TRIAL) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString REQUESTED_PROCEDURE_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REQUESTED_PROCEDURE_ID))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.REQUESTED_PROCEDURE_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REQUESTED_PROCEDURE_ID) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString REASON_FOR_THE_REQUESTED_PROCEDURE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REASON_FOR_THE_REQUESTED_PROCEDURE))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.REASON_FOR_THE_REQUESTED_PROCEDURE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REASON_FOR_THE_REQUESTED_PROCEDURE) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString REQUESTED_PROCEDURE_PRIORITY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REQUESTED_PROCEDURE_PRIORITY))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.REQUESTED_PROCEDURE_PRIORITY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REQUESTED_PROCEDURE_PRIORITY) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString PATIENT_TRANSPORT_ARRANGEMENTS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_TRANSPORT_ARRANGEMENTS))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.PATIENT_TRANSPORT_ARRANGEMENTS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_TRANSPORT_ARRANGEMENTS) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString REQUESTED_PROCEDURE_LOCATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REQUESTED_PROCEDURE_LOCATION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.REQUESTED_PROCEDURE_LOCATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REQUESTED_PROCEDURE_LOCATION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString PLACER_ORDER_NUMBER_PROCEDURE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PLACER_ORDER_NUMBER_PROCEDURE))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.PLACER_ORDER_NUMBER_PROCEDURE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PLACER_ORDER_NUMBER_PROCEDURE) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString FILLER_ORDER_NUMBER_PROCEDURE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FILLER_ORDER_NUMBER_PROCEDURE))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.FILLER_ORDER_NUMBER_PROCEDURE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FILLER_ORDER_NUMBER_PROCEDURE) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString CONFIDENTIALITY_CODE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONFIDENTIALITY_CODE))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.CONFIDENTIALITY_CODE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONFIDENTIALITY_CODE) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString REPORTING_PRIORITY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REPORTING_PRIORITY))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.REPORTING_PRIORITY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REPORTING_PRIORITY) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REASON_FOR_REQUESTED_PROCEDURE_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REASON_FOR_REQUESTED_PROCEDURE_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REASON_FOR_REQUESTED_PROCEDURE_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REASON_FOR_REQUESTED_PROCEDURE_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public PersonsName NAMES_OF_INTENDED_RECIPIENTS_OF_RESULTS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NAMES_OF_INTENDED_RECIPIENTS_OF_RESULTS))
                {
                    PersonsName newOb = new PersonsName { Tag = new Tag { Id = TagHelper.NAMES_OF_INTENDED_RECIPIENTS_OF_RESULTS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NAMES_OF_INTENDED_RECIPIENTS_OF_RESULTS) as PersonsName;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence INTENDED_RECIPIENTS_OF_RESULTS_IDENTIFICATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INTENDED_RECIPIENTS_OF_RESULTS_IDENTIFICATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.INTENDED_RECIPIENTS_OF_RESULTS_IDENTIFICATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INTENDED_RECIPIENTS_OF_RESULTS_IDENTIFICATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REASON_FOR_PERFORMED_PROCEDURE_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REASON_FOR_PERFORMED_PROCEDURE_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REASON_FOR_PERFORMED_PROCEDURE_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REASON_FOR_PERFORMED_PROCEDURE_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PERSON_IDENTIFICATION_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PERSON_IDENTIFICATION_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PERSON_IDENTIFICATION_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PERSON_IDENTIFICATION_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText PERSON_ADDRESS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PERSON_ADDRESS))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.PERSON_ADDRESS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PERSON_ADDRESS) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString PERSON_TELEPHONE_NUMBERS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PERSON_TELEPHONE_NUMBERS))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.PERSON_TELEPHONE_NUMBERS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PERSON_TELEPHONE_NUMBERS) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongText REQUESTED_PROCEDURE_COMMENTS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REQUESTED_PROCEDURE_COMMENTS))
                {
                    LongText newOb = new LongText { Tag = new Tag { Id = TagHelper.REQUESTED_PROCEDURE_COMMENTS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REQUESTED_PROCEDURE_COMMENTS) as LongText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString REASON_FOR_THE_IMAGING_SERVICE_REQUEST
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REASON_FOR_THE_IMAGING_SERVICE_REQUEST))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.REASON_FOR_THE_IMAGING_SERVICE_REQUEST }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REASON_FOR_THE_IMAGING_SERVICE_REQUEST) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateVR ISSUE_DATE_OF_IMAGING_SERVICE_REQUEST
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ISSUE_DATE_OF_IMAGING_SERVICE_REQUEST))
                {
                    DateVR newOb = new DateVR { Tag = new Tag { Id = TagHelper.ISSUE_DATE_OF_IMAGING_SERVICE_REQUEST }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ISSUE_DATE_OF_IMAGING_SERVICE_REQUEST) as DateVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR ISSUE_TIME_OF_IMAGING_SERVICE_REQUEST
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ISSUE_TIME_OF_IMAGING_SERVICE_REQUEST))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.ISSUE_TIME_OF_IMAGING_SERVICE_REQUEST }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ISSUE_TIME_OF_IMAGING_SERVICE_REQUEST) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString PLACER_ORDER_NUMBER_IMAGING_SERVICE_REQUEST_RETIRED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PLACER_ORDER_NUMBER_IMAGING_SERVICE_REQUEST_RETIRED))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.PLACER_ORDER_NUMBER_IMAGING_SERVICE_REQUEST_RETIRED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PLACER_ORDER_NUMBER_IMAGING_SERVICE_REQUEST_RETIRED) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString FILLER_ORDER_NUMBER_IMAGING_SERVICE_REQUEST_RETIRED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FILLER_ORDER_NUMBER_IMAGING_SERVICE_REQUEST_RETIRED))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.FILLER_ORDER_NUMBER_IMAGING_SERVICE_REQUEST_RETIRED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FILLER_ORDER_NUMBER_IMAGING_SERVICE_REQUEST_RETIRED) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public PersonsName ORDER_ENTERED_BY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ORDER_ENTERED_BY))
                {
                    PersonsName newOb = new PersonsName { Tag = new Tag { Id = TagHelper.ORDER_ENTERED_BY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ORDER_ENTERED_BY) as PersonsName;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString ORDER_ENTERER_LOCATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ORDER_ENTERER_LOCATION))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.ORDER_ENTERER_LOCATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ORDER_ENTERER_LOCATION) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString ORDER_CALLBACK_PHONE_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ORDER_CALLBACK_PHONE_NUMBER))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.ORDER_CALLBACK_PHONE_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ORDER_CALLBACK_PHONE_NUMBER) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString PLACER_ORDER_NUMBER_IMAGING_SERVICE_REQUEST
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PLACER_ORDER_NUMBER_IMAGING_SERVICE_REQUEST))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.PLACER_ORDER_NUMBER_IMAGING_SERVICE_REQUEST }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PLACER_ORDER_NUMBER_IMAGING_SERVICE_REQUEST) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString FILLER_ORDER_NUMBER_IMAGING_SERVICE_REQUEST
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FILLER_ORDER_NUMBER_IMAGING_SERVICE_REQUEST))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.FILLER_ORDER_NUMBER_IMAGING_SERVICE_REQUEST }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FILLER_ORDER_NUMBER_IMAGING_SERVICE_REQUEST) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongText IMAGING_SERVICE_REQUEST_COMMENTS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGING_SERVICE_REQUEST_COMMENTS))
                {
                    LongText newOb = new LongText { Tag = new Tag { Id = TagHelper.IMAGING_SERVICE_REQUEST_COMMENTS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGING_SERVICE_REQUEST_COMMENTS) as LongText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString CONFIDENTIALITY_CONSTRAINT_ON_PATIENT_DATA_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONFIDENTIALITY_CONSTRAINT_ON_PATIENT_DATA_DESCRIPTION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.CONFIDENTIALITY_CONSTRAINT_ON_PATIENT_DATA_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONFIDENTIALITY_CONSTRAINT_ON_PATIENT_DATA_DESCRIPTION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString GENERAL_PURPOSE_SCHEDULED_PROCEDURE_STEP_STATUS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GENERAL_PURPOSE_SCHEDULED_PROCEDURE_STEP_STATUS))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.GENERAL_PURPOSE_SCHEDULED_PROCEDURE_STEP_STATUS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GENERAL_PURPOSE_SCHEDULED_PROCEDURE_STEP_STATUS) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString GENERAL_PURPOSE_PERFORMED_PROCEDURE_STEP_STATUS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GENERAL_PURPOSE_PERFORMED_PROCEDURE_STEP_STATUS))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.GENERAL_PURPOSE_PERFORMED_PROCEDURE_STEP_STATUS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GENERAL_PURPOSE_PERFORMED_PROCEDURE_STEP_STATUS) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString GENERAL_PURPOSE_SCHEDULED_PROCEDURE_STEP_PRIORITY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GENERAL_PURPOSE_SCHEDULED_PROCEDURE_STEP_PRIORITY))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.GENERAL_PURPOSE_SCHEDULED_PROCEDURE_STEP_PRIORITY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GENERAL_PURPOSE_SCHEDULED_PROCEDURE_STEP_PRIORITY) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SCHEDULED_PROCESSING_APPLICATIONS_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCHEDULED_PROCESSING_APPLICATIONS_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SCHEDULED_PROCESSING_APPLICATIONS_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCHEDULED_PROCESSING_APPLICATIONS_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateTimeVR SCHEDULED_PROCEDURE_STEP_START_DATE_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCHEDULED_PROCEDURE_STEP_START_DATE_TIME))
                {
                    DateTimeVR newOb = new DateTimeVR { Tag = new Tag { Id = TagHelper.SCHEDULED_PROCEDURE_STEP_START_DATE_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCHEDULED_PROCEDURE_STEP_START_DATE_TIME) as DateTimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString MULTIPLE_COPIES_FLAG
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MULTIPLE_COPIES_FLAG))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.MULTIPLE_COPIES_FLAG }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MULTIPLE_COPIES_FLAG) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PERFORMED_PROCESSING_APPLICATIONS_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PERFORMED_PROCESSING_APPLICATIONS_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PERFORMED_PROCESSING_APPLICATIONS_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PERFORMED_PROCESSING_APPLICATIONS_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence HUMAN_PERFORMER_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.HUMAN_PERFORMER_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.HUMAN_PERFORMER_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.HUMAN_PERFORMER_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateTimeVR SCHEDULED_PROCEDURE_STEP_MODIFICATION_DATE_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCHEDULED_PROCEDURE_STEP_MODIFICATION_DATE_TIME))
                {
                    DateTimeVR newOb = new DateTimeVR { Tag = new Tag { Id = TagHelper.SCHEDULED_PROCEDURE_STEP_MODIFICATION_DATE_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCHEDULED_PROCEDURE_STEP_MODIFICATION_DATE_TIME) as DateTimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateTimeVR EXPECTED_COMPLETION_DATE_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.EXPECTED_COMPLETION_DATE_TIME))
                {
                    DateTimeVR newOb = new DateTimeVR { Tag = new Tag { Id = TagHelper.EXPECTED_COMPLETION_DATE_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.EXPECTED_COMPLETION_DATE_TIME) as DateTimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence RESULTING_GENERAL_PURPOSE_PERFORMED_PROCEDURE_STEPS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RESULTING_GENERAL_PURPOSE_PERFORMED_PROCEDURE_STEPS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.RESULTING_GENERAL_PURPOSE_PERFORMED_PROCEDURE_STEPS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RESULTING_GENERAL_PURPOSE_PERFORMED_PROCEDURE_STEPS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_GENERAL_PURPOSE_SCHEDULED_PROCEDURE_STEP_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_GENERAL_PURPOSE_SCHEDULED_PROCEDURE_STEP_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_GENERAL_PURPOSE_SCHEDULED_PROCEDURE_STEP_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_GENERAL_PURPOSE_SCHEDULED_PROCEDURE_STEP_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SCHEDULED_WORKITEM_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCHEDULED_WORKITEM_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SCHEDULED_WORKITEM_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCHEDULED_WORKITEM_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PERFORMED_WORKITEM_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PERFORMED_WORKITEM_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PERFORMED_WORKITEM_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PERFORMED_WORKITEM_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString INPUT_AVAILABILITY_FLAG
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INPUT_AVAILABILITY_FLAG))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.INPUT_AVAILABILITY_FLAG }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INPUT_AVAILABILITY_FLAG) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence INPUT_INFORMATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INPUT_INFORMATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.INPUT_INFORMATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INPUT_INFORMATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence RELEVANT_INFORMATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RELEVANT_INFORMATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.RELEVANT_INFORMATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RELEVANT_INFORMATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier REFERENCED_GENERAL_PURPOSE_SCHEDULED_PROCEDURE_STEP_TRANSACTION_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_GENERAL_PURPOSE_SCHEDULED_PROCEDURE_STEP_TRANSACTION_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.REFERENCED_GENERAL_PURPOSE_SCHEDULED_PROCEDURE_STEP_TRANSACTION_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_GENERAL_PURPOSE_SCHEDULED_PROCEDURE_STEP_TRANSACTION_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SCHEDULED_STATION_NAME_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCHEDULED_STATION_NAME_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SCHEDULED_STATION_NAME_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCHEDULED_STATION_NAME_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SCHEDULED_STATION_CLASS_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCHEDULED_STATION_CLASS_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SCHEDULED_STATION_CLASS_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCHEDULED_STATION_CLASS_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SCHEDULED_STATION_GEOGRAPHIC_LOCATION_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCHEDULED_STATION_GEOGRAPHIC_LOCATION_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SCHEDULED_STATION_GEOGRAPHIC_LOCATION_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCHEDULED_STATION_GEOGRAPHIC_LOCATION_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PERFORMED_STATION_NAME_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PERFORMED_STATION_NAME_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PERFORMED_STATION_NAME_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PERFORMED_STATION_NAME_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PERFORMED_STATION_CLASS_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PERFORMED_STATION_CLASS_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PERFORMED_STATION_CLASS_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PERFORMED_STATION_CLASS_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PERFORMED_STATION_GEOGRAPHIC_LOCATION_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PERFORMED_STATION_GEOGRAPHIC_LOCATION_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PERFORMED_STATION_GEOGRAPHIC_LOCATION_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PERFORMED_STATION_GEOGRAPHIC_LOCATION_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REQUESTED_SUBSEQUENT_WORKITEM_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REQUESTED_SUBSEQUENT_WORKITEM_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REQUESTED_SUBSEQUENT_WORKITEM_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REQUESTED_SUBSEQUENT_WORKITEM_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence NON_DICOMOUTPUT_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NON_DICOMOUTPUT_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.NON_DICOMOUTPUT_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NON_DICOMOUTPUT_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence OUTPUT_INFORMATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OUTPUT_INFORMATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.OUTPUT_INFORMATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OUTPUT_INFORMATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SCHEDULED_HUMAN_PERFORMERS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCHEDULED_HUMAN_PERFORMERS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SCHEDULED_HUMAN_PERFORMERS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCHEDULED_HUMAN_PERFORMERS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ACTUAL_HUMAN_PERFORMERS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ACTUAL_HUMAN_PERFORMERS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ACTUAL_HUMAN_PERFORMERS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ACTUAL_HUMAN_PERFORMERS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString HUMAN_PERFORMER_ORGANIZATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.HUMAN_PERFORMER_ORGANIZATION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.HUMAN_PERFORMER_ORGANIZATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.HUMAN_PERFORMER_ORGANIZATION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public PersonsName HUMAN_PERFORMER_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.HUMAN_PERFORMER_NAME))
                {
                    PersonsName newOb = new PersonsName { Tag = new Tag { Id = TagHelper.HUMAN_PERFORMER_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.HUMAN_PERFORMER_NAME) as PersonsName;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString RAW_DATA_HANDLING
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RAW_DATA_HANDLING))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.RAW_DATA_HANDLING }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RAW_DATA_HANDLING) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString ENTRANCE_DOSE_INM_GY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ENTRANCE_DOSE_INM_GY))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.ENTRANCE_DOSE_INM_GY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ENTRANCE_DOSE_INM_GY) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_IMAGE_REAL_WORLD_VALUE_MAPPING_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_IMAGE_REAL_WORLD_VALUE_MAPPING_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_IMAGE_REAL_WORLD_VALUE_MAPPING_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_IMAGE_REAL_WORLD_VALUE_MAPPING_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REAL_WORLD_VALUE_MAPPING_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REAL_WORLD_VALUE_MAPPING_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REAL_WORLD_VALUE_MAPPING_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REAL_WORLD_VALUE_MAPPING_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PIXEL_VALUE_MAPPING_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PIXEL_VALUE_MAPPING_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PIXEL_VALUE_MAPPING_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PIXEL_VALUE_MAPPING_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString LUTLABEL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LUTLABEL))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.LUTLABEL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LUTLABEL) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DICOMElement REAL_WORLD_VALUE_LAST_VALUE_MAPPED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REAL_WORLD_VALUE_LAST_VALUE_MAPPED))
                {
                    DICOMElement newOb = new DICOMElement { Tag = new Tag { Id = TagHelper.REAL_WORLD_VALUE_LAST_VALUE_MAPPED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REAL_WORLD_VALUE_LAST_VALUE_MAPPED) as DICOMElement;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble REAL_WORLD_VALUE_LUTDATA
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REAL_WORLD_VALUE_LUTDATA))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.REAL_WORLD_VALUE_LUTDATA }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REAL_WORLD_VALUE_LUTDATA) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DICOMElement REAL_WORLD_VALUE_FIRST_VALUE_MAPPED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REAL_WORLD_VALUE_FIRST_VALUE_MAPPED))
                {
                    DICOMElement newOb = new DICOMElement { Tag = new Tag { Id = TagHelper.REAL_WORLD_VALUE_FIRST_VALUE_MAPPED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REAL_WORLD_VALUE_FIRST_VALUE_MAPPED) as DICOMElement;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble REAL_WORLD_VALUE_INTERCEPT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REAL_WORLD_VALUE_INTERCEPT))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.REAL_WORLD_VALUE_INTERCEPT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REAL_WORLD_VALUE_INTERCEPT) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble REAL_WORLD_VALUE_SLOPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REAL_WORLD_VALUE_SLOPE))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.REAL_WORLD_VALUE_SLOPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REAL_WORLD_VALUE_SLOPE) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString RELATIONSHIP_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RELATIONSHIP_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.RELATIONSHIP_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RELATIONSHIP_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString VERIFYING_ORGANIZATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VERIFYING_ORGANIZATION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.VERIFYING_ORGANIZATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VERIFYING_ORGANIZATION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateTimeVR VERIFICATION_DATE_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VERIFICATION_DATE_TIME))
                {
                    DateTimeVR newOb = new DateTimeVR { Tag = new Tag { Id = TagHelper.VERIFICATION_DATE_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VERIFICATION_DATE_TIME) as DateTimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateTimeVR OBSERVATION_DATE_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OBSERVATION_DATE_TIME))
                {
                    DateTimeVR newOb = new DateTimeVR { Tag = new Tag { Id = TagHelper.OBSERVATION_DATE_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OBSERVATION_DATE_TIME) as DateTimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString VALUE_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VALUE_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.VALUE_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VALUE_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CONCEPT_NAME_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONCEPT_NAME_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CONCEPT_NAME_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONCEPT_NAME_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString CONTINUITY_OF_CONTENT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTINUITY_OF_CONTENT))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.CONTINUITY_OF_CONTENT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTINUITY_OF_CONTENT) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence VERIFYING_OBSERVER_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VERIFYING_OBSERVER_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.VERIFYING_OBSERVER_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VERIFYING_OBSERVER_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public PersonsName VERIFYING_OBSERVER_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VERIFYING_OBSERVER_NAME))
                {
                    PersonsName newOb = new PersonsName { Tag = new Tag { Id = TagHelper.VERIFYING_OBSERVER_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VERIFYING_OBSERVER_NAME) as PersonsName;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence AUTHOR_OBSERVER_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.AUTHOR_OBSERVER_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.AUTHOR_OBSERVER_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.AUTHOR_OBSERVER_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PARTICIPANT_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PARTICIPANT_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PARTICIPANT_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PARTICIPANT_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CUSTODIAL_ORGANIZATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CUSTODIAL_ORGANIZATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CUSTODIAL_ORGANIZATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CUSTODIAL_ORGANIZATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString PARTICIPATION_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PARTICIPATION_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.PARTICIPATION_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PARTICIPATION_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateTimeVR PARTICIPATION_DATE_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PARTICIPATION_DATE_TIME))
                {
                    DateTimeVR newOb = new DateTimeVR { Tag = new Tag { Id = TagHelper.PARTICIPATION_DATE_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PARTICIPATION_DATE_TIME) as DateTimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString OBSERVER_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OBSERVER_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.OBSERVER_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OBSERVER_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence VERIFYING_OBSERVER_IDENTIFICATION_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VERIFYING_OBSERVER_IDENTIFICATION_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.VERIFYING_OBSERVER_IDENTIFICATION_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VERIFYING_OBSERVER_IDENTIFICATION_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence EQUIVALENT_CDADOCUMENT_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.EQUIVALENT_CDADOCUMENT_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.EQUIVALENT_CDADOCUMENT_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.EQUIVALENT_CDADOCUMENT_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort REFERENCED_WAVEFORM_CHANNELS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_WAVEFORM_CHANNELS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.REFERENCED_WAVEFORM_CHANNELS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_WAVEFORM_CHANNELS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateTimeVR DATE_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DATE_TIME))
                {
                    DateTimeVR newOb = new DateTimeVR { Tag = new Tag { Id = TagHelper.DATE_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DATE_TIME) as DateTimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateVR DATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DATE))
                {
                    DateVR newOb = new DateVR { Tag = new Tag { Id = TagHelper.DATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DATE) as DateVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TIME))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TIME) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public PersonsName PERSON_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PERSON_NAME))
                {
                    PersonsName newOb = new PersonsName { Tag = new Tag { Id = TagHelper.PERSON_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PERSON_NAME) as PersonsName;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString TEMPORAL_RANGE_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TEMPORAL_RANGE_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.TEMPORAL_RANGE_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TEMPORAL_RANGE_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong REFERENCED_SAMPLE_POSITIONS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_SAMPLE_POSITIONS))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.REFERENCED_SAMPLE_POSITIONS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_SAMPLE_POSITIONS) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort REFERENCED_FRAME_NUMBERS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_FRAME_NUMBERS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.REFERENCED_FRAME_NUMBERS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_FRAME_NUMBERS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString REFERENCED_TIME_OFFSETS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_TIME_OFFSETS))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.REFERENCED_TIME_OFFSETS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_TIME_OFFSETS) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateTimeVR REFERENCED_DATE_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_DATE_TIME))
                {
                    DateTimeVR newOb = new DateTimeVR { Tag = new Tag { Id = TagHelper.REFERENCED_DATE_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_DATE_TIME) as DateTimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnlimitedText TEXT_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TEXT_VALUE))
                {
                    UnlimitedText newOb = new UnlimitedText { Tag = new Tag { Id = TagHelper.TEXT_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TEXT_VALUE) as UnlimitedText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CONCEPT_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONCEPT_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CONCEPT_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONCEPT_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PURPOSE_OF_REFERENCE_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PURPOSE_OF_REFERENCE_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PURPOSE_OF_REFERENCE_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PURPOSE_OF_REFERENCE_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort ANNOTATION_GROUP_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ANNOTATION_GROUP_NUMBER))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.ANNOTATION_GROUP_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ANNOTATION_GROUP_NUMBER) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence MODIFIER_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MODIFIER_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.MODIFIER_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MODIFIER_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence MEASURED_VALUE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MEASURED_VALUE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.MEASURED_VALUE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MEASURED_VALUE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence NUMERIC_VALUE_QUALIFIER_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMERIC_VALUE_QUALIFIER_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.NUMERIC_VALUE_QUALIFIER_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMERIC_VALUE_QUALIFIER_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString NUMERIC_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMERIC_VALUE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.NUMERIC_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMERIC_VALUE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText ADDRESS_TRIAL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ADDRESS_TRIAL))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.ADDRESS_TRIAL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ADDRESS_TRIAL) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString TELEPHONE_NUMBER_TRIAL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TELEPHONE_NUMBER_TRIAL))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.TELEPHONE_NUMBER_TRIAL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TELEPHONE_NUMBER_TRIAL) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PREDECESSOR_DOCUMENTS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PREDECESSOR_DOCUMENTS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PREDECESSOR_DOCUMENTS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PREDECESSOR_DOCUMENTS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_REQUEST_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_REQUEST_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_REQUEST_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_REQUEST_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PERFORMED_PROCEDURE_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PERFORMED_PROCEDURE_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PERFORMED_PROCEDURE_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PERFORMED_PROCEDURE_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CURRENT_REQUESTED_PROCEDURE_EVIDENCE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CURRENT_REQUESTED_PROCEDURE_EVIDENCE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CURRENT_REQUESTED_PROCEDURE_EVIDENCE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CURRENT_REQUESTED_PROCEDURE_EVIDENCE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PERTINENT_OTHER_EVIDENCE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PERTINENT_OTHER_EVIDENCE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PERTINENT_OTHER_EVIDENCE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PERTINENT_OTHER_EVIDENCE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence HL7STRUCTURED_DOCUMENT_REFERENCE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.HL7STRUCTURED_DOCUMENT_REFERENCE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.HL7STRUCTURED_DOCUMENT_REFERENCE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.HL7STRUCTURED_DOCUMENT_REFERENCE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString COMPLETION_FLAG
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COMPLETION_FLAG))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.COMPLETION_FLAG }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COMPLETION_FLAG) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString COMPLETION_FLAG_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COMPLETION_FLAG_DESCRIPTION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.COMPLETION_FLAG_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COMPLETION_FLAG_DESCRIPTION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString VERIFICATION_FLAG
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VERIFICATION_FLAG))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.VERIFICATION_FLAG }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VERIFICATION_FLAG) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString ARCHIVE_REQUESTED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ARCHIVE_REQUESTED))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.ARCHIVE_REQUESTED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ARCHIVE_REQUESTED) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString PRELIMINARY_FLAG
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRELIMINARY_FLAG))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.PRELIMINARY_FLAG }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRELIMINARY_FLAG) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CONTENT_TEMPLATE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTENT_TEMPLATE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CONTENT_TEMPLATE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTENT_TEMPLATE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence IDENTICAL_DOCUMENTS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IDENTICAL_DOCUMENTS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.IDENTICAL_DOCUMENTS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IDENTICAL_DOCUMENTS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CONTENT_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTENT_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CONTENT_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTENT_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence WAVEFORM_ANNOTATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.WAVEFORM_ANNOTATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.WAVEFORM_ANNOTATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.WAVEFORM_ANNOTATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString TEMPLATE_IDENTIFIER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TEMPLATE_IDENTIFIER))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.TEMPLATE_IDENTIFIER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TEMPLATE_IDENTIFIER) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateTimeVR TEMPLATE_VERSION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TEMPLATE_VERSION))
                {
                    DateTimeVR newOb = new DateTimeVR { Tag = new Tag { Id = TagHelper.TEMPLATE_VERSION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TEMPLATE_VERSION) as DateTimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateTimeVR TEMPLATE_LOCAL_VERSION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TEMPLATE_LOCAL_VERSION))
                {
                    DateTimeVR newOb = new DateTimeVR { Tag = new Tag { Id = TagHelper.TEMPLATE_LOCAL_VERSION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TEMPLATE_LOCAL_VERSION) as DateTimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString TEMPLATE_EXTENSION_FLAG
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TEMPLATE_EXTENSION_FLAG))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.TEMPLATE_EXTENSION_FLAG }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TEMPLATE_EXTENSION_FLAG) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier TEMPLATE_EXTENSION_ORGANIZATION_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TEMPLATE_EXTENSION_ORGANIZATION_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.TEMPLATE_EXTENSION_ORGANIZATION_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TEMPLATE_EXTENSION_ORGANIZATION_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier TEMPLATE_EXTENSION_CREATOR_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TEMPLATE_EXTENSION_CREATOR_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.TEMPLATE_EXTENSION_CREATOR_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TEMPLATE_EXTENSION_CREATOR_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong REFERENCED_CONTENT_ITEM_IDENTIFIER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_CONTENT_ITEM_IDENTIFIER))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.REFERENCED_CONTENT_ITEM_IDENTIFIER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_CONTENT_ITEM_IDENTIFIER) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText HL7INSTANCE_IDENTIFIER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.HL7INSTANCE_IDENTIFIER))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.HL7INSTANCE_IDENTIFIER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.HL7INSTANCE_IDENTIFIER) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateTimeVR HL7DOCUMENT_EFFECTIVE_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.HL7DOCUMENT_EFFECTIVE_TIME))
                {
                    DateTimeVR newOb = new DateTimeVR { Tag = new Tag { Id = TagHelper.HL7DOCUMENT_EFFECTIVE_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.HL7DOCUMENT_EFFECTIVE_TIME) as DateTimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence HL7DOCUMENT_TYPE_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.HL7DOCUMENT_TYPE_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.HL7DOCUMENT_TYPE_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.HL7DOCUMENT_TYPE_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnlimitedText RETRIEVE_URI
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RETRIEVE_URI))
                {
                    UnlimitedText newOb = new UnlimitedText { Tag = new Tag { Id = TagHelper.RETRIEVE_URI }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RETRIEVE_URI) as UnlimitedText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier RETRIEVE_LOCATION_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RETRIEVE_LOCATION_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.RETRIEVE_LOCATION_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RETRIEVE_LOCATION_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText DOCUMENT_TITLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DOCUMENT_TITLE))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.DOCUMENT_TITLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DOCUMENT_TITLE) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public OtherByteString ENCAPSULATED_DOCUMENT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ENCAPSULATED_DOCUMENT))
                {
                    OtherByteString newOb = new OtherByteString { Tag = new Tag { Id = TagHelper.ENCAPSULATED_DOCUMENT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ENCAPSULATED_DOCUMENT) as OtherByteString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString MIMETYPE_OF_ENCAPSULATED_DOCUMENT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MIMETYPE_OF_ENCAPSULATED_DOCUMENT))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.MIMETYPE_OF_ENCAPSULATED_DOCUMENT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MIMETYPE_OF_ENCAPSULATED_DOCUMENT) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SOURCE_INSTANCE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOURCE_INSTANCE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SOURCE_INSTANCE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOURCE_INSTANCE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString LIST_OF_MIMETYPES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LIST_OF_MIMETYPES))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.LIST_OF_MIMETYPES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LIST_OF_MIMETYPES) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText PRODUCT_PACKAGE_IDENTIFIER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRODUCT_PACKAGE_IDENTIFIER))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.PRODUCT_PACKAGE_IDENTIFIER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRODUCT_PACKAGE_IDENTIFIER) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SUBSTANCE_ADMINISTRATION_APPROVAL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SUBSTANCE_ADMINISTRATION_APPROVAL))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SUBSTANCE_ADMINISTRATION_APPROVAL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SUBSTANCE_ADMINISTRATION_APPROVAL) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongText APPROVAL_STATUS_FURTHER_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.APPROVAL_STATUS_FURTHER_DESCRIPTION))
                {
                    LongText newOb = new LongText { Tag = new Tag { Id = TagHelper.APPROVAL_STATUS_FURTHER_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.APPROVAL_STATUS_FURTHER_DESCRIPTION) as LongText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateTimeVR APPROVAL_STATUS_DATE_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.APPROVAL_STATUS_DATE_TIME))
                {
                    DateTimeVR newOb = new DateTimeVR { Tag = new Tag { Id = TagHelper.APPROVAL_STATUS_DATE_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.APPROVAL_STATUS_DATE_TIME) as DateTimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PRODUCT_TYPE_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRODUCT_TYPE_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PRODUCT_TYPE_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRODUCT_TYPE_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString PRODUCT_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRODUCT_NAME))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.PRODUCT_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRODUCT_NAME) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongText PRODUCT_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRODUCT_DESCRIPTION))
                {
                    LongText newOb = new LongText { Tag = new Tag { Id = TagHelper.PRODUCT_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRODUCT_DESCRIPTION) as LongText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString PRODUCT_LOT_IDENTIFIER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRODUCT_LOT_IDENTIFIER))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.PRODUCT_LOT_IDENTIFIER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRODUCT_LOT_IDENTIFIER) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateTimeVR PRODUCT_EXPIRATION_DATE_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRODUCT_EXPIRATION_DATE_TIME))
                {
                    DateTimeVR newOb = new DateTimeVR { Tag = new Tag { Id = TagHelper.PRODUCT_EXPIRATION_DATE_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRODUCT_EXPIRATION_DATE_TIME) as DateTimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateTimeVR SUBSTANCE_ADMINISTRATION_DATE_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SUBSTANCE_ADMINISTRATION_DATE_TIME))
                {
                    DateTimeVR newOb = new DateTimeVR { Tag = new Tag { Id = TagHelper.SUBSTANCE_ADMINISTRATION_DATE_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SUBSTANCE_ADMINISTRATION_DATE_TIME) as DateTimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString SUBSTANCE_ADMINISTRATION_NOTES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SUBSTANCE_ADMINISTRATION_NOTES))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.SUBSTANCE_ADMINISTRATION_NOTES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SUBSTANCE_ADMINISTRATION_NOTES) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString SUBSTANCE_ADMINISTRATION_DEVICE_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SUBSTANCE_ADMINISTRATION_DEVICE_ID))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.SUBSTANCE_ADMINISTRATION_DEVICE_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SUBSTANCE_ADMINISTRATION_DEVICE_ID) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PRODUCT_PARAMETER_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRODUCT_PARAMETER_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PRODUCT_PARAMETER_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRODUCT_PARAMETER_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SUBSTANCE_ADMINISTRATION_PARAMETER_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SUBSTANCE_ADMINISTRATION_PARAMETER_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SUBSTANCE_ADMINISTRATION_PARAMETER_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SUBSTANCE_ADMINISTRATION_PARAMETER_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString LENS_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LENS_DESCRIPTION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.LENS_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LENS_DESCRIPTION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence RIGHT_LENS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RIGHT_LENS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.RIGHT_LENS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RIGHT_LENS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence LEFT_LENS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LEFT_LENS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.LEFT_LENS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LEFT_LENS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence UNSPECIFIED_LATERALITY_LENS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.UNSPECIFIED_LATERALITY_LENS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.UNSPECIFIED_LATERALITY_LENS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.UNSPECIFIED_LATERALITY_LENS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CYLINDER_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CYLINDER_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CYLINDER_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CYLINDER_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PRISM_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRISM_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PRISM_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRISM_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble HORIZONTAL_PRISM_POWER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.HORIZONTAL_PRISM_POWER))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.HORIZONTAL_PRISM_POWER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.HORIZONTAL_PRISM_POWER) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString HORIZONTAL_PRISM_BASE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.HORIZONTAL_PRISM_BASE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.HORIZONTAL_PRISM_BASE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.HORIZONTAL_PRISM_BASE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble VERTICAL_PRISM_POWER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VERTICAL_PRISM_POWER))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.VERTICAL_PRISM_POWER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VERTICAL_PRISM_POWER) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString VERTICAL_PRISM_BASE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VERTICAL_PRISM_BASE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.VERTICAL_PRISM_BASE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VERTICAL_PRISM_BASE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString LENS_SEGMENT_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LENS_SEGMENT_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.LENS_SEGMENT_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LENS_SEGMENT_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble OPTICAL_TRANSMITTANCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OPTICAL_TRANSMITTANCE))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.OPTICAL_TRANSMITTANCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OPTICAL_TRANSMITTANCE) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble CHANNEL_WIDTH
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CHANNEL_WIDTH))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.CHANNEL_WIDTH }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CHANNEL_WIDTH) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble PUPIL_SIZE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PUPIL_SIZE))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.PUPIL_SIZE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PUPIL_SIZE) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble CORNEAL_SIZE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CORNEAL_SIZE))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.CORNEAL_SIZE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CORNEAL_SIZE) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence AUTOREFRACTION_RIGHT_EYE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.AUTOREFRACTION_RIGHT_EYE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.AUTOREFRACTION_RIGHT_EYE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.AUTOREFRACTION_RIGHT_EYE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence AUTOREFRACTION_LEFT_EYE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.AUTOREFRACTION_LEFT_EYE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.AUTOREFRACTION_LEFT_EYE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.AUTOREFRACTION_LEFT_EYE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble DISTANCE_PUPILLARY_DISTANCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DISTANCE_PUPILLARY_DISTANCE))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.DISTANCE_PUPILLARY_DISTANCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DISTANCE_PUPILLARY_DISTANCE) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble NEAR_PUPILLARY_DISTANCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NEAR_PUPILLARY_DISTANCE))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.NEAR_PUPILLARY_DISTANCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NEAR_PUPILLARY_DISTANCE) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble INTERMEDIATE_PUPILLARY_DISTANCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INTERMEDIATE_PUPILLARY_DISTANCE))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.INTERMEDIATE_PUPILLARY_DISTANCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INTERMEDIATE_PUPILLARY_DISTANCE) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble OTHER_PUPILLARY_DISTANCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OTHER_PUPILLARY_DISTANCE))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.OTHER_PUPILLARY_DISTANCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OTHER_PUPILLARY_DISTANCE) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence KERATOMETRY_RIGHT_EYE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.KERATOMETRY_RIGHT_EYE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.KERATOMETRY_RIGHT_EYE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.KERATOMETRY_RIGHT_EYE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence KERATOMETRY_LEFT_EYE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.KERATOMETRY_LEFT_EYE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.KERATOMETRY_LEFT_EYE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.KERATOMETRY_LEFT_EYE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence STEEP_KERATOMETRIC_AXIS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STEEP_KERATOMETRIC_AXIS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.STEEP_KERATOMETRIC_AXIS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STEEP_KERATOMETRIC_AXIS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble RADIUS_OF_CURVATURE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RADIUS_OF_CURVATURE))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.RADIUS_OF_CURVATURE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RADIUS_OF_CURVATURE) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble KERATOMETRIC_POWER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.KERATOMETRIC_POWER))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.KERATOMETRIC_POWER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.KERATOMETRIC_POWER) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble KERATOMETRIC_AXIS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.KERATOMETRIC_AXIS))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.KERATOMETRIC_AXIS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.KERATOMETRIC_AXIS) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence FLAT_KERATOMETRIC_AXIS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FLAT_KERATOMETRIC_AXIS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.FLAT_KERATOMETRIC_AXIS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FLAT_KERATOMETRIC_AXIS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString BACKGROUND_COLOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BACKGROUND_COLOR))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.BACKGROUND_COLOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BACKGROUND_COLOR) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString OPTOTYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OPTOTYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.OPTOTYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OPTOTYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString OPTOTYPE_PRESENTATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OPTOTYPE_PRESENTATION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.OPTOTYPE_PRESENTATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OPTOTYPE_PRESENTATION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SUBJECTIVE_REFRACTION_RIGHT_EYE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SUBJECTIVE_REFRACTION_RIGHT_EYE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SUBJECTIVE_REFRACTION_RIGHT_EYE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SUBJECTIVE_REFRACTION_RIGHT_EYE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SUBJECTIVE_REFRACTION_LEFT_EYE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SUBJECTIVE_REFRACTION_LEFT_EYE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SUBJECTIVE_REFRACTION_LEFT_EYE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SUBJECTIVE_REFRACTION_LEFT_EYE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ADD_NEAR_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ADD_NEAR_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ADD_NEAR_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ADD_NEAR_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ADD_INTERMEDIATE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ADD_INTERMEDIATE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ADD_INTERMEDIATE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ADD_INTERMEDIATE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ADD_OTHER_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ADD_OTHER_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ADD_OTHER_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ADD_OTHER_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble ADD_POWER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ADD_POWER))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.ADD_POWER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ADD_POWER) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble VIEWING_DISTANCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VIEWING_DISTANCE))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.VIEWING_DISTANCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VIEWING_DISTANCE) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence VISUAL_ACUITY_TYPE_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VISUAL_ACUITY_TYPE_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.VISUAL_ACUITY_TYPE_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VISUAL_ACUITY_TYPE_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence VISUAL_ACUITY_RIGHT_EYE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VISUAL_ACUITY_RIGHT_EYE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.VISUAL_ACUITY_RIGHT_EYE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VISUAL_ACUITY_RIGHT_EYE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence VISUAL_ACUITY_LEFT_EYE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VISUAL_ACUITY_LEFT_EYE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.VISUAL_ACUITY_LEFT_EYE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VISUAL_ACUITY_LEFT_EYE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence VISUAL_ACUITY_BOTH_EYES_OPEN_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VISUAL_ACUITY_BOTH_EYES_OPEN_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.VISUAL_ACUITY_BOTH_EYES_OPEN_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VISUAL_ACUITY_BOTH_EYES_OPEN_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString VIEWING_DISTANCE_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VIEWING_DISTANCE_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.VIEWING_DISTANCE_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VIEWING_DISTANCE_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public SignedShort VISUAL_ACUITY_MODIFIERS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VISUAL_ACUITY_MODIFIERS))
                {
                    SignedShort newOb = new SignedShort { Tag = new Tag { Id = TagHelper.VISUAL_ACUITY_MODIFIERS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VISUAL_ACUITY_MODIFIERS) as SignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble DECIMAL_VISUAL_ACUITY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DECIMAL_VISUAL_ACUITY))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.DECIMAL_VISUAL_ACUITY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DECIMAL_VISUAL_ACUITY) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString OPTOTYPE_DETAILED_DEFINITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OPTOTYPE_DETAILED_DEFINITION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.OPTOTYPE_DETAILED_DEFINITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OPTOTYPE_DETAILED_DEFINITION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_REFRACTIVE_MEASUREMENTS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_REFRACTIVE_MEASUREMENTS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_REFRACTIVE_MEASUREMENTS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_REFRACTIVE_MEASUREMENTS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble SPHERE_POWER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SPHERE_POWER))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.SPHERE_POWER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SPHERE_POWER) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble CYLINDER_POWER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CYLINDER_POWER))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.CYLINDER_POWER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CYLINDER_POWER) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString CALIBRATION_IMAGE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CALIBRATION_IMAGE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.CALIBRATION_IMAGE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CALIBRATION_IMAGE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence DEVICE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DEVICE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.DEVICE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DEVICE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CONTAINER_COMPONENT_TYPE_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTAINER_COMPONENT_TYPE_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CONTAINER_COMPONENT_TYPE_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTAINER_COMPONENT_TYPE_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble CONTAINER_COMPONENT_THICKNESS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTAINER_COMPONENT_THICKNESS))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.CONTAINER_COMPONENT_THICKNESS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTAINER_COMPONENT_THICKNESS) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DEVICE_LENGTH
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DEVICE_LENGTH))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DEVICE_LENGTH }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DEVICE_LENGTH) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble CONTAINER_COMPONENT_WIDTH
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTAINER_COMPONENT_WIDTH))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.CONTAINER_COMPONENT_WIDTH }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTAINER_COMPONENT_WIDTH) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DEVICE_DIAMETER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DEVICE_DIAMETER))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DEVICE_DIAMETER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DEVICE_DIAMETER) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString DEVICE_DIAMETER_UNITS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DEVICE_DIAMETER_UNITS))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.DEVICE_DIAMETER_UNITS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DEVICE_DIAMETER_UNITS) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DEVICE_VOLUME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DEVICE_VOLUME))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DEVICE_VOLUME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DEVICE_VOLUME) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString INTER_MARKER_DISTANCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INTER_MARKER_DISTANCE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.INTER_MARKER_DISTANCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INTER_MARKER_DISTANCE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString CONTAINER_COMPONENT_MATERIAL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTAINER_COMPONENT_MATERIAL))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.CONTAINER_COMPONENT_MATERIAL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTAINER_COMPONENT_MATERIAL) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString CONTAINER_COMPONENT_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTAINER_COMPONENT_ID))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.CONTAINER_COMPONENT_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTAINER_COMPONENT_ID) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble CONTAINER_COMPONENT_LENGTH
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTAINER_COMPONENT_LENGTH))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.CONTAINER_COMPONENT_LENGTH }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTAINER_COMPONENT_LENGTH) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble CONTAINER_COMPONENT_DIAMETER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTAINER_COMPONENT_DIAMETER))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.CONTAINER_COMPONENT_DIAMETER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTAINER_COMPONENT_DIAMETER) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString CONTAINER_COMPONENT_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTAINER_COMPONENT_DESCRIPTION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.CONTAINER_COMPONENT_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTAINER_COMPONENT_DESCRIPTION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString DEVICE_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DEVICE_DESCRIPTION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.DEVICE_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DEVICE_DESCRIPTION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort ENERGY_WINDOW_VECTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ENERGY_WINDOW_VECTOR))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.ENERGY_WINDOW_VECTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ENERGY_WINDOW_VECTOR) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort NUMBER_OF_ENERGY_WINDOWS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_ENERGY_WINDOWS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.NUMBER_OF_ENERGY_WINDOWS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_ENERGY_WINDOWS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ENERGY_WINDOW_INFORMATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ENERGY_WINDOW_INFORMATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ENERGY_WINDOW_INFORMATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ENERGY_WINDOW_INFORMATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ENERGY_WINDOW_RANGE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ENERGY_WINDOW_RANGE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ENERGY_WINDOW_RANGE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ENERGY_WINDOW_RANGE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString ENERGY_WINDOW_LOWER_LIMIT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ENERGY_WINDOW_LOWER_LIMIT))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.ENERGY_WINDOW_LOWER_LIMIT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ENERGY_WINDOW_LOWER_LIMIT) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString ENERGY_WINDOW_UPPER_LIMIT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ENERGY_WINDOW_UPPER_LIMIT))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.ENERGY_WINDOW_UPPER_LIMIT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ENERGY_WINDOW_UPPER_LIMIT) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence RADIOPHARMACEUTICAL_INFORMATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RADIOPHARMACEUTICAL_INFORMATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.RADIOPHARMACEUTICAL_INFORMATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RADIOPHARMACEUTICAL_INFORMATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString RESIDUAL_SYRINGE_COUNTS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RESIDUAL_SYRINGE_COUNTS))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.RESIDUAL_SYRINGE_COUNTS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RESIDUAL_SYRINGE_COUNTS) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString ENERGY_WINDOW_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ENERGY_WINDOW_NAME))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.ENERGY_WINDOW_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ENERGY_WINDOW_NAME) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort DETECTOR_VECTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DETECTOR_VECTOR))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.DETECTOR_VECTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DETECTOR_VECTOR) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort NUMBER_OF_DETECTORS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_DETECTORS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.NUMBER_OF_DETECTORS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_DETECTORS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence DETECTOR_INFORMATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DETECTOR_INFORMATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.DETECTOR_INFORMATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DETECTOR_INFORMATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort PHASE_VECTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PHASE_VECTOR))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.PHASE_VECTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PHASE_VECTOR) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort NUMBER_OF_PHASES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_PHASES))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.NUMBER_OF_PHASES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_PHASES) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PHASE_INFORMATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PHASE_INFORMATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PHASE_INFORMATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PHASE_INFORMATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort NUMBER_OF_FRAMES_IN_PHASE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_FRAMES_IN_PHASE))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.NUMBER_OF_FRAMES_IN_PHASE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_FRAMES_IN_PHASE) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString PHASE_DELAY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PHASE_DELAY))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.PHASE_DELAY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PHASE_DELAY) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString PAUSE_BETWEEN_FRAMES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PAUSE_BETWEEN_FRAMES))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.PAUSE_BETWEEN_FRAMES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PAUSE_BETWEEN_FRAMES) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString PHASE_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PHASE_DESCRIPTION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.PHASE_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PHASE_DESCRIPTION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort ROTATION_VECTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ROTATION_VECTOR))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.ROTATION_VECTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ROTATION_VECTOR) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort NUMBER_OF_ROTATIONS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_ROTATIONS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.NUMBER_OF_ROTATIONS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_ROTATIONS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ROTATION_INFORMATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ROTATION_INFORMATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ROTATION_INFORMATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ROTATION_INFORMATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort NUMBER_OF_FRAMES_IN_ROTATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_FRAMES_IN_ROTATION))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.NUMBER_OF_FRAMES_IN_ROTATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_FRAMES_IN_ROTATION) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort RRINTERVAL_VECTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RRINTERVAL_VECTOR))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.RRINTERVAL_VECTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RRINTERVAL_VECTOR) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort NUMBER_OF_RRINTERVALS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_RRINTERVALS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.NUMBER_OF_RRINTERVALS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_RRINTERVALS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence GATED_INFORMATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GATED_INFORMATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.GATED_INFORMATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GATED_INFORMATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence DATA_INFORMATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DATA_INFORMATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.DATA_INFORMATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DATA_INFORMATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort TIME_SLOT_VECTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TIME_SLOT_VECTOR))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.TIME_SLOT_VECTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TIME_SLOT_VECTOR) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort NUMBER_OF_TIME_SLOTS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_TIME_SLOTS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.NUMBER_OF_TIME_SLOTS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_TIME_SLOTS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence TIME_SLOT_INFORMATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TIME_SLOT_INFORMATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.TIME_SLOT_INFORMATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TIME_SLOT_INFORMATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString TIME_SLOT_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TIME_SLOT_TIME))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.TIME_SLOT_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TIME_SLOT_TIME) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort SLICE_VECTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SLICE_VECTOR))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.SLICE_VECTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SLICE_VECTOR) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort NUMBER_OF_SLICES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_SLICES))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.NUMBER_OF_SLICES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_SLICES) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort ANGULAR_VIEW_VECTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ANGULAR_VIEW_VECTOR))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.ANGULAR_VIEW_VECTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ANGULAR_VIEW_VECTOR) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort TIME_SLICE_VECTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TIME_SLICE_VECTOR))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.TIME_SLICE_VECTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TIME_SLICE_VECTOR) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort NUMBER_OF_TIME_SLICES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_TIME_SLICES))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.NUMBER_OF_TIME_SLICES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_TIME_SLICES) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString START_ANGLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.START_ANGLE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.START_ANGLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.START_ANGLE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString TYPE_OF_DETECTOR_MOTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TYPE_OF_DETECTOR_MOTION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.TYPE_OF_DETECTOR_MOTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TYPE_OF_DETECTOR_MOTION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString TRIGGER_VECTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TRIGGER_VECTOR))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.TRIGGER_VECTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TRIGGER_VECTOR) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort NUMBER_OF_TRIGGERS_IN_PHASE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_TRIGGERS_IN_PHASE))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.NUMBER_OF_TRIGGERS_IN_PHASE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_TRIGGERS_IN_PHASE) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence VIEW_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VIEW_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.VIEW_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VIEW_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence VIEW_MODIFIER_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VIEW_MODIFIER_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.VIEW_MODIFIER_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VIEW_MODIFIER_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence RADIONUCLIDE_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RADIONUCLIDE_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.RADIONUCLIDE_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RADIONUCLIDE_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ADMINISTRATION_ROUTE_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ADMINISTRATION_ROUTE_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ADMINISTRATION_ROUTE_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ADMINISTRATION_ROUTE_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence RADIOPHARMACEUTICAL_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RADIOPHARMACEUTICAL_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.RADIOPHARMACEUTICAL_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RADIOPHARMACEUTICAL_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CALIBRATION_DATA_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CALIBRATION_DATA_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CALIBRATION_DATA_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CALIBRATION_DATA_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort ENERGY_WINDOW_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ENERGY_WINDOW_NUMBER))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.ENERGY_WINDOW_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ENERGY_WINDOW_NUMBER) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString IMAGE_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_ID))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.IMAGE_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_ID) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PATIENT_ORIENTATION_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_ORIENTATION_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PATIENT_ORIENTATION_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_ORIENTATION_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PATIENT_ORIENTATION_MODIFIER_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_ORIENTATION_MODIFIER_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PATIENT_ORIENTATION_MODIFIER_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_ORIENTATION_MODIFIER_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PATIENT_GANTRY_RELATIONSHIP_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_GANTRY_RELATIONSHIP_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PATIENT_GANTRY_RELATIONSHIP_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_GANTRY_RELATIONSHIP_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SLICE_PROGRESSION_DIRECTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SLICE_PROGRESSION_DIRECTION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SLICE_PROGRESSION_DIRECTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SLICE_PROGRESSION_DIRECTION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SERIES_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SERIES_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SERIES_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SERIES_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString UNITS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.UNITS))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.UNITS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.UNITS) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString COUNTS_SOURCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COUNTS_SOURCE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.COUNTS_SOURCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COUNTS_SOURCE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString REPROJECTION_METHOD
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REPROJECTION_METHOD))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.REPROJECTION_METHOD }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REPROJECTION_METHOD) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString RANDOMS_CORRECTION_METHOD
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RANDOMS_CORRECTION_METHOD))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.RANDOMS_CORRECTION_METHOD }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RANDOMS_CORRECTION_METHOD) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString ATTENUATION_CORRECTION_METHOD
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ATTENUATION_CORRECTION_METHOD))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.ATTENUATION_CORRECTION_METHOD }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ATTENUATION_CORRECTION_METHOD) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString DECAY_CORRECTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DECAY_CORRECTION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.DECAY_CORRECTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DECAY_CORRECTION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString RECONSTRUCTION_METHOD
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RECONSTRUCTION_METHOD))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.RECONSTRUCTION_METHOD }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RECONSTRUCTION_METHOD) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString DETECTOR_LINES_OF_RESPONSE_USED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DETECTOR_LINES_OF_RESPONSE_USED))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.DETECTOR_LINES_OF_RESPONSE_USED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DETECTOR_LINES_OF_RESPONSE_USED) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString SCATTER_CORRECTION_METHOD
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCATTER_CORRECTION_METHOD))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.SCATTER_CORRECTION_METHOD }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCATTER_CORRECTION_METHOD) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString AXIAL_ACCEPTANCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.AXIAL_ACCEPTANCE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.AXIAL_ACCEPTANCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.AXIAL_ACCEPTANCE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString AXIAL_MASH
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.AXIAL_MASH))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.AXIAL_MASH }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.AXIAL_MASH) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString TRANSVERSE_MASH
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TRANSVERSE_MASH))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.TRANSVERSE_MASH }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TRANSVERSE_MASH) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DETECTOR_ELEMENT_SIZE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DETECTOR_ELEMENT_SIZE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DETECTOR_ELEMENT_SIZE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DETECTOR_ELEMENT_SIZE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString COINCIDENCE_WINDOW_WIDTH
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COINCIDENCE_WINDOW_WIDTH))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.COINCIDENCE_WINDOW_WIDTH }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COINCIDENCE_WINDOW_WIDTH) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SECONDARY_COUNTS_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SECONDARY_COUNTS_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SECONDARY_COUNTS_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SECONDARY_COUNTS_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString FRAME_REFERENCE_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FRAME_REFERENCE_TIME))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.FRAME_REFERENCE_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FRAME_REFERENCE_TIME) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString PRIMARY_PROMPTS_COUNTS_ACCUMULATED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRIMARY_PROMPTS_COUNTS_ACCUMULATED))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.PRIMARY_PROMPTS_COUNTS_ACCUMULATED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRIMARY_PROMPTS_COUNTS_ACCUMULATED) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString SECONDARY_COUNTS_ACCUMULATED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SECONDARY_COUNTS_ACCUMULATED))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.SECONDARY_COUNTS_ACCUMULATED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SECONDARY_COUNTS_ACCUMULATED) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString SLICE_SENSITIVITY_FACTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SLICE_SENSITIVITY_FACTOR))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.SLICE_SENSITIVITY_FACTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SLICE_SENSITIVITY_FACTOR) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DECAY_FACTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DECAY_FACTOR))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DECAY_FACTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DECAY_FACTOR) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DOSE_CALIBRATION_FACTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DOSE_CALIBRATION_FACTOR))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DOSE_CALIBRATION_FACTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DOSE_CALIBRATION_FACTOR) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString SCATTER_FRACTION_FACTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCATTER_FRACTION_FACTOR))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.SCATTER_FRACTION_FACTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCATTER_FRACTION_FACTOR) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DEAD_TIME_FACTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DEAD_TIME_FACTOR))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DEAD_TIME_FACTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DEAD_TIME_FACTOR) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort IMAGE_INDEX
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_INDEX))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.IMAGE_INDEX }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_INDEX) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString COUNTS_INCLUDED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COUNTS_INCLUDED))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.COUNTS_INCLUDED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COUNTS_INCLUDED) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString DEAD_TIME_CORRECTION_FLAG
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DEAD_TIME_CORRECTION_FLAG))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.DEAD_TIME_CORRECTION_FLAG }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DEAD_TIME_CORRECTION_FLAG) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence HISTOGRAM_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.HISTOGRAM_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.HISTOGRAM_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.HISTOGRAM_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort HISTOGRAM_NUMBER_OF_BINS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.HISTOGRAM_NUMBER_OF_BINS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.HISTOGRAM_NUMBER_OF_BINS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.HISTOGRAM_NUMBER_OF_BINS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DICOMElement HISTOGRAM_FIRST_BIN_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.HISTOGRAM_FIRST_BIN_VALUE))
                {
                    DICOMElement newOb = new DICOMElement { Tag = new Tag { Id = TagHelper.HISTOGRAM_FIRST_BIN_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.HISTOGRAM_FIRST_BIN_VALUE) as DICOMElement;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DICOMElement HISTOGRAM_LAST_BIN_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.HISTOGRAM_LAST_BIN_VALUE))
                {
                    DICOMElement newOb = new DICOMElement { Tag = new Tag { Id = TagHelper.HISTOGRAM_LAST_BIN_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.HISTOGRAM_LAST_BIN_VALUE) as DICOMElement;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort HISTOGRAM_BIN_WIDTH
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.HISTOGRAM_BIN_WIDTH))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.HISTOGRAM_BIN_WIDTH }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.HISTOGRAM_BIN_WIDTH) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString HISTOGRAM_EXPLANATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.HISTOGRAM_EXPLANATION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.HISTOGRAM_EXPLANATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.HISTOGRAM_EXPLANATION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong HISTOGRAM_DATA
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.HISTOGRAM_DATA))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.HISTOGRAM_DATA }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.HISTOGRAM_DATA) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SEGMENTATION_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SEGMENTATION_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SEGMENTATION_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SEGMENTATION_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SEGMENT_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SEGMENT_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SEGMENT_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SEGMENT_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SEGMENTED_PROPERTY_CATEGORY_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SEGMENTED_PROPERTY_CATEGORY_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SEGMENTED_PROPERTY_CATEGORY_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SEGMENTED_PROPERTY_CATEGORY_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort SEGMENT_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SEGMENT_NUMBER))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.SEGMENT_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SEGMENT_NUMBER) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString SEGMENT_LABEL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SEGMENT_LABEL))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.SEGMENT_LABEL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SEGMENT_LABEL) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText SEGMENT_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SEGMENT_DESCRIPTION))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.SEGMENT_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SEGMENT_DESCRIPTION) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SEGMENT_ALGORITHM_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SEGMENT_ALGORITHM_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SEGMENT_ALGORITHM_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SEGMENT_ALGORITHM_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString SEGMENT_ALGORITHM_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SEGMENT_ALGORITHM_NAME))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.SEGMENT_ALGORITHM_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SEGMENT_ALGORITHM_NAME) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SEGMENT_IDENTIFICATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SEGMENT_IDENTIFICATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SEGMENT_IDENTIFICATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SEGMENT_IDENTIFICATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort REFERENCED_SEGMENT_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_SEGMENT_NUMBER))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.REFERENCED_SEGMENT_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_SEGMENT_NUMBER) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort RECOMMENDED_DISPLAY_GRAYSCALE_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RECOMMENDED_DISPLAY_GRAYSCALE_VALUE))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.RECOMMENDED_DISPLAY_GRAYSCALE_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RECOMMENDED_DISPLAY_GRAYSCALE_VALUE) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort RECOMMENDED_DISPLAY_CIELAB_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RECOMMENDED_DISPLAY_CIELAB_VALUE))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.RECOMMENDED_DISPLAY_CIELAB_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RECOMMENDED_DISPLAY_CIELAB_VALUE) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort MAXIMUM_FRACTIONAL_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MAXIMUM_FRACTIONAL_VALUE))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.MAXIMUM_FRACTIONAL_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MAXIMUM_FRACTIONAL_VALUE) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SEGMENTED_PROPERTY_TYPE_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SEGMENTED_PROPERTY_TYPE_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SEGMENTED_PROPERTY_TYPE_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SEGMENTED_PROPERTY_TYPE_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SEGMENTATION_FRACTIONAL_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SEGMENTATION_FRACTIONAL_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SEGMENTATION_FRACTIONAL_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SEGMENTATION_FRACTIONAL_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence DEFORMABLE_REGISTRATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DEFORMABLE_REGISTRATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.DEFORMABLE_REGISTRATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DEFORMABLE_REGISTRATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier SOURCE_FRAME_OF_REFERENCE_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOURCE_FRAME_OF_REFERENCE_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.SOURCE_FRAME_OF_REFERENCE_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOURCE_FRAME_OF_REFERENCE_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence DEFORMABLE_REGISTRATION_GRID_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DEFORMABLE_REGISTRATION_GRID_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.DEFORMABLE_REGISTRATION_GRID_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DEFORMABLE_REGISTRATION_GRID_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong GRID_DIMENSIONS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GRID_DIMENSIONS))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.GRID_DIMENSIONS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GRID_DIMENSIONS) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble GRID_RESOLUTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GRID_RESOLUTION))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.GRID_RESOLUTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GRID_RESOLUTION) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public OtherFloatString VECTOR_GRID_DATA
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VECTOR_GRID_DATA))
                {
                    OtherFloatString newOb = new OtherFloatString { Tag = new Tag { Id = TagHelper.VECTOR_GRID_DATA }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VECTOR_GRID_DATA) as OtherFloatString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PRE_DEFORMATION_MATRIX_REGISTRATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRE_DEFORMATION_MATRIX_REGISTRATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PRE_DEFORMATION_MATRIX_REGISTRATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRE_DEFORMATION_MATRIX_REGISTRATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence POST_DEFORMATION_MATRIX_REGISTRATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.POST_DEFORMATION_MATRIX_REGISTRATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.POST_DEFORMATION_MATRIX_REGISTRATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.POST_DEFORMATION_MATRIX_REGISTRATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong NUMBER_OF_SURFACES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_SURFACES))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.NUMBER_OF_SURFACES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_SURFACES) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SURFACE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SURFACE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SURFACE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SURFACE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong SURFACE_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SURFACE_NUMBER))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.SURFACE_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SURFACE_NUMBER) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongText SURFACE_COMMENTS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SURFACE_COMMENTS))
                {
                    LongText newOb = new LongText { Tag = new Tag { Id = TagHelper.SURFACE_COMMENTS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SURFACE_COMMENTS) as LongText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SURFACE_PROCESSING
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SURFACE_PROCESSING))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SURFACE_PROCESSING }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SURFACE_PROCESSING) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle SURFACE_PROCESSING_RATIO
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SURFACE_PROCESSING_RATIO))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.SURFACE_PROCESSING_RATIO }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SURFACE_PROCESSING_RATIO) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString SURFACE_PROCESSING_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SURFACE_PROCESSING_DESCRIPTION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.SURFACE_PROCESSING_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SURFACE_PROCESSING_DESCRIPTION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle RECOMMENDED_PRESENTATION_OPACITY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RECOMMENDED_PRESENTATION_OPACITY))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.RECOMMENDED_PRESENTATION_OPACITY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RECOMMENDED_PRESENTATION_OPACITY) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString RECOMMENDED_PRESENTATION_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RECOMMENDED_PRESENTATION_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.RECOMMENDED_PRESENTATION_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RECOMMENDED_PRESENTATION_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString FINITE_VOLUME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FINITE_VOLUME))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.FINITE_VOLUME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FINITE_VOLUME) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString MANIFOLD
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MANIFOLD))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.MANIFOLD }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MANIFOLD) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SURFACE_POINTS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SURFACE_POINTS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SURFACE_POINTS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SURFACE_POINTS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SURFACE_POINTS_NORMALS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SURFACE_POINTS_NORMALS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SURFACE_POINTS_NORMALS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SURFACE_POINTS_NORMALS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SURFACE_MESH_PRIMITIVES_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SURFACE_MESH_PRIMITIVES_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SURFACE_MESH_PRIMITIVES_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SURFACE_MESH_PRIMITIVES_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong NUMBER_OF_SURFACE_POINTS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_SURFACE_POINTS))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.NUMBER_OF_SURFACE_POINTS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_SURFACE_POINTS) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public OtherFloatString POINT_COORDINATES_DATA
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.POINT_COORDINATES_DATA))
                {
                    OtherFloatString newOb = new OtherFloatString { Tag = new Tag { Id = TagHelper.POINT_COORDINATES_DATA }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.POINT_COORDINATES_DATA) as OtherFloatString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle POINT_POSITION_ACCURACY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.POINT_POSITION_ACCURACY))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.POINT_POSITION_ACCURACY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.POINT_POSITION_ACCURACY) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle MEAN_POINT_DISTANCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MEAN_POINT_DISTANCE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.MEAN_POINT_DISTANCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MEAN_POINT_DISTANCE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle MAXIMUM_POINT_DISTANCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MAXIMUM_POINT_DISTANCE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.MAXIMUM_POINT_DISTANCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MAXIMUM_POINT_DISTANCE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle POINTS_BOUNDING_BOX_COORDINATES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.POINTS_BOUNDING_BOX_COORDINATES))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.POINTS_BOUNDING_BOX_COORDINATES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.POINTS_BOUNDING_BOX_COORDINATES) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle AXIS_OF_ROTATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.AXIS_OF_ROTATION))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.AXIS_OF_ROTATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.AXIS_OF_ROTATION) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle CENTER_OF_ROTATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CENTER_OF_ROTATION))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.CENTER_OF_ROTATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CENTER_OF_ROTATION) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong NUMBER_OF_VECTORS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_VECTORS))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.NUMBER_OF_VECTORS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_VECTORS) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort VECTOR_DIMENSIONALITY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VECTOR_DIMENSIONALITY))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.VECTOR_DIMENSIONALITY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VECTOR_DIMENSIONALITY) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle VECTOR_ACCURACY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VECTOR_ACCURACY))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.VECTOR_ACCURACY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VECTOR_ACCURACY) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public OtherFloatString VECTOR_COORDINATE_DATA
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VECTOR_COORDINATE_DATA))
                {
                    OtherFloatString newOb = new OtherFloatString { Tag = new Tag { Id = TagHelper.VECTOR_COORDINATE_DATA }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VECTOR_COORDINATE_DATA) as OtherFloatString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public OtherWordString TRIANGLE_POINT_INDEX_LIST
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TRIANGLE_POINT_INDEX_LIST))
                {
                    OtherWordString newOb = new OtherWordString { Tag = new Tag { Id = TagHelper.TRIANGLE_POINT_INDEX_LIST }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TRIANGLE_POINT_INDEX_LIST) as OtherWordString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public OtherWordString EDGE_POINT_INDEX_LIST
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.EDGE_POINT_INDEX_LIST))
                {
                    OtherWordString newOb = new OtherWordString { Tag = new Tag { Id = TagHelper.EDGE_POINT_INDEX_LIST }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.EDGE_POINT_INDEX_LIST) as OtherWordString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public OtherWordString VERTEX_POINT_INDEX_LIST
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VERTEX_POINT_INDEX_LIST))
                {
                    OtherWordString newOb = new OtherWordString { Tag = new Tag { Id = TagHelper.VERTEX_POINT_INDEX_LIST }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VERTEX_POINT_INDEX_LIST) as OtherWordString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence TRIANGLE_STRIP_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TRIANGLE_STRIP_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.TRIANGLE_STRIP_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TRIANGLE_STRIP_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence TRIANGLE_FAN_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TRIANGLE_FAN_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.TRIANGLE_FAN_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TRIANGLE_FAN_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence LINE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LINE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.LINE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LINE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public OtherWordString PRIMITIVE_POINT_INDEX_LIST
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRIMITIVE_POINT_INDEX_LIST))
                {
                    OtherWordString newOb = new OtherWordString { Tag = new Tag { Id = TagHelper.PRIMITIVE_POINT_INDEX_LIST }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRIMITIVE_POINT_INDEX_LIST) as OtherWordString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong SURFACE_COUNT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SURFACE_COUNT))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.SURFACE_COUNT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SURFACE_COUNT) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_SURFACE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_SURFACE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_SURFACE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_SURFACE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong REFERENCED_SURFACE_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_SURFACE_NUMBER))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.REFERENCED_SURFACE_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_SURFACE_NUMBER) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SEGMENT_SURFACE_GENERATION_ALGORITHM_IDENTIFICATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SEGMENT_SURFACE_GENERATION_ALGORITHM_IDENTIFICATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SEGMENT_SURFACE_GENERATION_ALGORITHM_IDENTIFICATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SEGMENT_SURFACE_GENERATION_ALGORITHM_IDENTIFICATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SEGMENT_SURFACE_SOURCE_INSTANCE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SEGMENT_SURFACE_SOURCE_INSTANCE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SEGMENT_SURFACE_SOURCE_INSTANCE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SEGMENT_SURFACE_SOURCE_INSTANCE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ALGORITHM_FAMILY_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ALGORITHM_FAMILY_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ALGORITHM_FAMILY_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ALGORITHM_FAMILY_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ALGORITHM_NAME_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ALGORITHM_NAME_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ALGORITHM_NAME_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ALGORITHM_NAME_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString ALGORITHM_VERSION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ALGORITHM_VERSION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.ALGORITHM_VERSION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ALGORITHM_VERSION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongText ALGORITHM_PARAMETERS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ALGORITHM_PARAMETERS))
                {
                    LongText newOb = new LongText { Tag = new Tag { Id = TagHelper.ALGORITHM_PARAMETERS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ALGORITHM_PARAMETERS) as LongText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence FACET_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FACET_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.FACET_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FACET_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SURFACE_PROCESSING_ALGORITHM_IDENTIFICATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SURFACE_PROCESSING_ALGORITHM_IDENTIFICATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SURFACE_PROCESSING_ALGORITHM_IDENTIFICATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SURFACE_PROCESSING_ALGORITHM_IDENTIFICATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString ALGORITHM_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ALGORITHM_NAME))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.ALGORITHM_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ALGORITHM_NAME) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence GRAPHIC_ANNOTATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GRAPHIC_ANNOTATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.GRAPHIC_ANNOTATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GRAPHIC_ANNOTATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString GRAPHIC_LAYER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GRAPHIC_LAYER))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.GRAPHIC_LAYER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GRAPHIC_LAYER) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString BOUNDING_BOX_ANNOTATION_UNITS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BOUNDING_BOX_ANNOTATION_UNITS))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.BOUNDING_BOX_ANNOTATION_UNITS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BOUNDING_BOX_ANNOTATION_UNITS) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString ANCHOR_POINT_ANNOTATION_UNITS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ANCHOR_POINT_ANNOTATION_UNITS))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.ANCHOR_POINT_ANNOTATION_UNITS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ANCHOR_POINT_ANNOTATION_UNITS) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString GRAPHIC_ANNOTATION_UNITS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GRAPHIC_ANNOTATION_UNITS))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.GRAPHIC_ANNOTATION_UNITS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GRAPHIC_ANNOTATION_UNITS) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText UNFORMATTED_TEXT_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.UNFORMATTED_TEXT_VALUE))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.UNFORMATTED_TEXT_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.UNFORMATTED_TEXT_VALUE) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence TEXT_OBJECT_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TEXT_OBJECT_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.TEXT_OBJECT_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TEXT_OBJECT_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence GRAPHIC_OBJECT_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GRAPHIC_OBJECT_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.GRAPHIC_OBJECT_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GRAPHIC_OBJECT_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle BOUNDING_BOX_TOP_LEFT_HAND_CORNER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BOUNDING_BOX_TOP_LEFT_HAND_CORNER))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.BOUNDING_BOX_TOP_LEFT_HAND_CORNER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BOUNDING_BOX_TOP_LEFT_HAND_CORNER) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle BOUNDING_BOX_BOTTOM_RIGHT_HAND_CORNER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BOUNDING_BOX_BOTTOM_RIGHT_HAND_CORNER))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.BOUNDING_BOX_BOTTOM_RIGHT_HAND_CORNER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BOUNDING_BOX_BOTTOM_RIGHT_HAND_CORNER) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString BOUNDING_BOX_TEXT_HORIZONTAL_JUSTIFICATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BOUNDING_BOX_TEXT_HORIZONTAL_JUSTIFICATION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.BOUNDING_BOX_TEXT_HORIZONTAL_JUSTIFICATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BOUNDING_BOX_TEXT_HORIZONTAL_JUSTIFICATION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle ANCHOR_POINT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ANCHOR_POINT))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.ANCHOR_POINT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ANCHOR_POINT) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString ANCHOR_POINT_VISIBILITY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ANCHOR_POINT_VISIBILITY))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.ANCHOR_POINT_VISIBILITY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ANCHOR_POINT_VISIBILITY) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort GRAPHIC_DIMENSIONS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GRAPHIC_DIMENSIONS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.GRAPHIC_DIMENSIONS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GRAPHIC_DIMENSIONS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort NUMBER_OF_GRAPHIC_POINTS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_GRAPHIC_POINTS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.NUMBER_OF_GRAPHIC_POINTS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_GRAPHIC_POINTS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle GRAPHIC_DATA
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GRAPHIC_DATA))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.GRAPHIC_DATA }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GRAPHIC_DATA) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString GRAPHIC_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GRAPHIC_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.GRAPHIC_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GRAPHIC_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString GRAPHIC_FILLED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GRAPHIC_FILLED))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.GRAPHIC_FILLED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GRAPHIC_FILLED) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString IMAGE_ROTATION_RETIRED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_ROTATION_RETIRED))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.IMAGE_ROTATION_RETIRED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_ROTATION_RETIRED) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString IMAGE_HORIZONTAL_FLIP
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_HORIZONTAL_FLIP))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.IMAGE_HORIZONTAL_FLIP }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_HORIZONTAL_FLIP) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort IMAGE_ROTATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_ROTATION))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.IMAGE_ROTATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_ROTATION) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort DISPLAYED_AREA_TOP_LEFT_HAND_CORNER_TRIAL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DISPLAYED_AREA_TOP_LEFT_HAND_CORNER_TRIAL))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.DISPLAYED_AREA_TOP_LEFT_HAND_CORNER_TRIAL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DISPLAYED_AREA_TOP_LEFT_HAND_CORNER_TRIAL) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort DISPLAYED_AREA_BOTTOM_RIGHT_HAND_CORNER_TRIAL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DISPLAYED_AREA_BOTTOM_RIGHT_HAND_CORNER_TRIAL))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.DISPLAYED_AREA_BOTTOM_RIGHT_HAND_CORNER_TRIAL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DISPLAYED_AREA_BOTTOM_RIGHT_HAND_CORNER_TRIAL) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public SignedLong DISPLAYED_AREA_TOP_LEFT_HAND_CORNER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DISPLAYED_AREA_TOP_LEFT_HAND_CORNER))
                {
                    SignedLong newOb = new SignedLong { Tag = new Tag { Id = TagHelper.DISPLAYED_AREA_TOP_LEFT_HAND_CORNER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DISPLAYED_AREA_TOP_LEFT_HAND_CORNER) as SignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public SignedLong DISPLAYED_AREA_BOTTOM_RIGHT_HAND_CORNER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DISPLAYED_AREA_BOTTOM_RIGHT_HAND_CORNER))
                {
                    SignedLong newOb = new SignedLong { Tag = new Tag { Id = TagHelper.DISPLAYED_AREA_BOTTOM_RIGHT_HAND_CORNER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DISPLAYED_AREA_BOTTOM_RIGHT_HAND_CORNER) as SignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence DISPLAYED_AREA_SELECTION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DISPLAYED_AREA_SELECTION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.DISPLAYED_AREA_SELECTION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DISPLAYED_AREA_SELECTION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence GRAPHIC_LAYER_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GRAPHIC_LAYER_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.GRAPHIC_LAYER_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GRAPHIC_LAYER_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString GRAPHIC_LAYER_ORDER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GRAPHIC_LAYER_ORDER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.GRAPHIC_LAYER_ORDER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GRAPHIC_LAYER_ORDER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort GRAPHIC_LAYER_RECOMMENDED_DISPLAY_GRAYSCALE_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GRAPHIC_LAYER_RECOMMENDED_DISPLAY_GRAYSCALE_VALUE))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.GRAPHIC_LAYER_RECOMMENDED_DISPLAY_GRAYSCALE_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GRAPHIC_LAYER_RECOMMENDED_DISPLAY_GRAYSCALE_VALUE) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort GRAPHIC_LAYER_RECOMMENDED_DISPLAY_RGBVALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GRAPHIC_LAYER_RECOMMENDED_DISPLAY_RGBVALUE))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.GRAPHIC_LAYER_RECOMMENDED_DISPLAY_RGBVALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GRAPHIC_LAYER_RECOMMENDED_DISPLAY_RGBVALUE) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString GRAPHIC_LAYER_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GRAPHIC_LAYER_DESCRIPTION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.GRAPHIC_LAYER_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GRAPHIC_LAYER_DESCRIPTION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString CONTENT_LABEL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTENT_LABEL))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.CONTENT_LABEL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTENT_LABEL) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString CONTENT_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTENT_DESCRIPTION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.CONTENT_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTENT_DESCRIPTION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateVR PRESENTATION_CREATION_DATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRESENTATION_CREATION_DATE))
                {
                    DateVR newOb = new DateVR { Tag = new Tag { Id = TagHelper.PRESENTATION_CREATION_DATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRESENTATION_CREATION_DATE) as DateVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR PRESENTATION_CREATION_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRESENTATION_CREATION_TIME))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.PRESENTATION_CREATION_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRESENTATION_CREATION_TIME) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public PersonsName CONTENT_CREATOR_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTENT_CREATOR_NAME))
                {
                    PersonsName newOb = new PersonsName { Tag = new Tag { Id = TagHelper.CONTENT_CREATOR_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTENT_CREATOR_NAME) as PersonsName;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CONTENT_CREATOR_IDENTIFICATION_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTENT_CREATOR_IDENTIFICATION_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CONTENT_CREATOR_IDENTIFICATION_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTENT_CREATOR_IDENTIFICATION_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ALTERNATE_CONTENT_DESCRIPTION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ALTERNATE_CONTENT_DESCRIPTION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ALTERNATE_CONTENT_DESCRIPTION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ALTERNATE_CONTENT_DESCRIPTION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString PRESENTATION_SIZE_MODE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRESENTATION_SIZE_MODE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.PRESENTATION_SIZE_MODE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRESENTATION_SIZE_MODE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString PRESENTATION_PIXEL_SPACING
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRESENTATION_PIXEL_SPACING))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.PRESENTATION_PIXEL_SPACING }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRESENTATION_PIXEL_SPACING) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString PRESENTATION_PIXEL_ASPECT_RATIO
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRESENTATION_PIXEL_ASPECT_RATIO))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.PRESENTATION_PIXEL_ASPECT_RATIO }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRESENTATION_PIXEL_ASPECT_RATIO) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle PRESENTATION_PIXEL_MAGNIFICATION_RATIO
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRESENTATION_PIXEL_MAGNIFICATION_RATIO))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.PRESENTATION_PIXEL_MAGNIFICATION_RATIO }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRESENTATION_PIXEL_MAGNIFICATION_RATIO) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString GRAPHIC_GROUP_LABEL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GRAPHIC_GROUP_LABEL))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.GRAPHIC_GROUP_LABEL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GRAPHIC_GROUP_LABEL) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText GRAPHIC_GROUP_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GRAPHIC_GROUP_DESCRIPTION))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.GRAPHIC_GROUP_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GRAPHIC_GROUP_DESCRIPTION) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence COMPOUND_GRAPHIC_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COMPOUND_GRAPHIC_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.COMPOUND_GRAPHIC_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COMPOUND_GRAPHIC_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong COMPOUND_GRAPHIC_INSTANCE_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COMPOUND_GRAPHIC_INSTANCE_ID))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.COMPOUND_GRAPHIC_INSTANCE_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COMPOUND_GRAPHIC_INSTANCE_ID) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString FONT_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FONT_NAME))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.FONT_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FONT_NAME) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString FONT_NAME_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FONT_NAME_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.FONT_NAME_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FONT_NAME_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString CSSFONT_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CSSFONT_NAME))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.CSSFONT_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CSSFONT_NAME) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble ROTATION_ANGLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ROTATION_ANGLE))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.ROTATION_ANGLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ROTATION_ANGLE) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence TEXT_STYLE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TEXT_STYLE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.TEXT_STYLE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TEXT_STYLE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence LINE_STYLE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LINE_STYLE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.LINE_STYLE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LINE_STYLE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence FILL_STYLE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FILL_STYLE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.FILL_STYLE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FILL_STYLE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence GRAPHIC_GROUP_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GRAPHIC_GROUP_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.GRAPHIC_GROUP_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GRAPHIC_GROUP_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort TEXT_COLOR_CIELAB_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TEXT_COLOR_CIELAB_VALUE))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.TEXT_COLOR_CIELAB_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TEXT_COLOR_CIELAB_VALUE) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString HORIZONTAL_ALIGNMENT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.HORIZONTAL_ALIGNMENT))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.HORIZONTAL_ALIGNMENT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.HORIZONTAL_ALIGNMENT) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString VERTICAL_ALIGNMENT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VERTICAL_ALIGNMENT))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.VERTICAL_ALIGNMENT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VERTICAL_ALIGNMENT) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SHADOW_STYLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SHADOW_STYLE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SHADOW_STYLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SHADOW_STYLE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle SHADOW_OFFSET_X
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SHADOW_OFFSET_X))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.SHADOW_OFFSET_X }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SHADOW_OFFSET_X) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle SHADOW_OFFSET_Y
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SHADOW_OFFSET_Y))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.SHADOW_OFFSET_Y }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SHADOW_OFFSET_Y) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort SHADOW_COLOR_CIELAB_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SHADOW_COLOR_CIELAB_VALUE))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.SHADOW_COLOR_CIELAB_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SHADOW_COLOR_CIELAB_VALUE) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString UNDERLINED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.UNDERLINED))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.UNDERLINED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.UNDERLINED) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString BOLD
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BOLD))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.BOLD }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BOLD) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString ITALIC
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ITALIC))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.ITALIC }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ITALIC) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort PATTERN_ON_COLOR_CIELAB_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATTERN_ON_COLOR_CIELAB_VALUE))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.PATTERN_ON_COLOR_CIELAB_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATTERN_ON_COLOR_CIELAB_VALUE) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort PATTERN_OFF_COLOR_CIELAB_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATTERN_OFF_COLOR_CIELAB_VALUE))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.PATTERN_OFF_COLOR_CIELAB_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATTERN_OFF_COLOR_CIELAB_VALUE) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle LINE_THICKNESS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LINE_THICKNESS))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.LINE_THICKNESS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LINE_THICKNESS) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString LINE_DASHING_STYLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LINE_DASHING_STYLE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.LINE_DASHING_STYLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LINE_DASHING_STYLE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong LINE_PATTERN
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LINE_PATTERN))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.LINE_PATTERN }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LINE_PATTERN) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public OtherByteString FILL_PATTERN
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FILL_PATTERN))
                {
                    OtherByteString newOb = new OtherByteString { Tag = new Tag { Id = TagHelper.FILL_PATTERN }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FILL_PATTERN) as OtherByteString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString FILL_MODE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FILL_MODE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.FILL_MODE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FILL_MODE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle SHADOW_OPACITY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SHADOW_OPACITY))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.SHADOW_OPACITY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SHADOW_OPACITY) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle GAP_LENGTH
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GAP_LENGTH))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.GAP_LENGTH }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GAP_LENGTH) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle DIAMETER_OF_VISIBILITY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DIAMETER_OF_VISIBILITY))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.DIAMETER_OF_VISIBILITY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DIAMETER_OF_VISIBILITY) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle ROTATION_POINT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ROTATION_POINT))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.ROTATION_POINT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ROTATION_POINT) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString TICK_ALIGNMENT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TICK_ALIGNMENT))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.TICK_ALIGNMENT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TICK_ALIGNMENT) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SHOW_TICK_LABEL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SHOW_TICK_LABEL))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SHOW_TICK_LABEL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SHOW_TICK_LABEL) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString TICK_LABEL_ALIGNMENT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TICK_LABEL_ALIGNMENT))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.TICK_LABEL_ALIGNMENT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TICK_LABEL_ALIGNMENT) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString COMPOUND_GRAPHIC_UNITS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COMPOUND_GRAPHIC_UNITS))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.COMPOUND_GRAPHIC_UNITS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COMPOUND_GRAPHIC_UNITS) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle PATTERN_ON_OPACITY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATTERN_ON_OPACITY))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.PATTERN_ON_OPACITY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATTERN_ON_OPACITY) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle PATTERN_OFF_OPACITY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATTERN_OFF_OPACITY))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.PATTERN_OFF_OPACITY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATTERN_OFF_OPACITY) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence MAJOR_TICKS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MAJOR_TICKS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.MAJOR_TICKS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MAJOR_TICKS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle TICK_POSITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TICK_POSITION))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.TICK_POSITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TICK_POSITION) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString TICK_LABEL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TICK_LABEL))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.TICK_LABEL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TICK_LABEL) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString COMPOUND_GRAPHIC_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COMPOUND_GRAPHIC_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.COMPOUND_GRAPHIC_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COMPOUND_GRAPHIC_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong GRAPHIC_GROUP_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GRAPHIC_GROUP_ID))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.GRAPHIC_GROUP_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GRAPHIC_GROUP_ID) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SHAPE_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SHAPE_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SHAPE_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SHAPE_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REGISTRATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REGISTRATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REGISTRATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REGISTRATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence MATRIX_REGISTRATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MATRIX_REGISTRATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.MATRIX_REGISTRATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MATRIX_REGISTRATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence MATRIX_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MATRIX_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.MATRIX_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MATRIX_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString FRAME_OF_REFERENCE_TRANSFORMATION_MATRIX_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FRAME_OF_REFERENCE_TRANSFORMATION_MATRIX_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.FRAME_OF_REFERENCE_TRANSFORMATION_MATRIX_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FRAME_OF_REFERENCE_TRANSFORMATION_MATRIX_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REGISTRATION_TYPE_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REGISTRATION_TYPE_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REGISTRATION_TYPE_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REGISTRATION_TYPE_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText FIDUCIAL_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FIDUCIAL_DESCRIPTION))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.FIDUCIAL_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FIDUCIAL_DESCRIPTION) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString FIDUCIAL_IDENTIFIER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FIDUCIAL_IDENTIFIER))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.FIDUCIAL_IDENTIFIER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FIDUCIAL_IDENTIFIER) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence FIDUCIAL_IDENTIFIER_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FIDUCIAL_IDENTIFIER_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.FIDUCIAL_IDENTIFIER_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FIDUCIAL_IDENTIFIER_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble CONTOUR_UNCERTAINTY_RADIUS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTOUR_UNCERTAINTY_RADIUS))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.CONTOUR_UNCERTAINTY_RADIUS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTOUR_UNCERTAINTY_RADIUS) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence USED_FIDUCIALS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.USED_FIDUCIALS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.USED_FIDUCIALS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.USED_FIDUCIALS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence GRAPHIC_COORDINATES_DATA_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GRAPHIC_COORDINATES_DATA_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.GRAPHIC_COORDINATES_DATA_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GRAPHIC_COORDINATES_DATA_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier FIDUCIAL_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FIDUCIAL_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.FIDUCIAL_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FIDUCIAL_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence FIDUCIAL_SET_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FIDUCIAL_SET_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.FIDUCIAL_SET_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FIDUCIAL_SET_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence FIDUCIAL_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FIDUCIAL_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.FIDUCIAL_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FIDUCIAL_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort GRAPHIC_LAYER_RECOMMENDED_DISPLAY_CIELAB_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GRAPHIC_LAYER_RECOMMENDED_DISPLAY_CIELAB_VALUE))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.GRAPHIC_LAYER_RECOMMENDED_DISPLAY_CIELAB_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GRAPHIC_LAYER_RECOMMENDED_DISPLAY_CIELAB_VALUE) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence BLENDING_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BLENDING_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.BLENDING_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BLENDING_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle RELATIVE_OPACITY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RELATIVE_OPACITY))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.RELATIVE_OPACITY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RELATIVE_OPACITY) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_SPATIAL_REGISTRATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_SPATIAL_REGISTRATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_SPATIAL_REGISTRATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_SPATIAL_REGISTRATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString BLENDING_POSITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BLENDING_POSITION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.BLENDING_POSITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BLENDING_POSITION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString HANGING_PROTOCOL_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.HANGING_PROTOCOL_NAME))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.HANGING_PROTOCOL_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.HANGING_PROTOCOL_NAME) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString HANGING_PROTOCOL_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.HANGING_PROTOCOL_DESCRIPTION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.HANGING_PROTOCOL_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.HANGING_PROTOCOL_DESCRIPTION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString HANGING_PROTOCOL_LEVEL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.HANGING_PROTOCOL_LEVEL))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.HANGING_PROTOCOL_LEVEL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.HANGING_PROTOCOL_LEVEL) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString HANGING_PROTOCOL_CREATOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.HANGING_PROTOCOL_CREATOR))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.HANGING_PROTOCOL_CREATOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.HANGING_PROTOCOL_CREATOR) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateTimeVR HANGING_PROTOCOL_CREATION_DATE_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.HANGING_PROTOCOL_CREATION_DATE_TIME))
                {
                    DateTimeVR newOb = new DateTimeVR { Tag = new Tag { Id = TagHelper.HANGING_PROTOCOL_CREATION_DATE_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.HANGING_PROTOCOL_CREATION_DATE_TIME) as DateTimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence HANGING_PROTOCOL_DEFINITION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.HANGING_PROTOCOL_DEFINITION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.HANGING_PROTOCOL_DEFINITION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.HANGING_PROTOCOL_DEFINITION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence HANGING_PROTOCOL_USER_IDENTIFICATION_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.HANGING_PROTOCOL_USER_IDENTIFICATION_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.HANGING_PROTOCOL_USER_IDENTIFICATION_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.HANGING_PROTOCOL_USER_IDENTIFICATION_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString HANGING_PROTOCOL_USER_GROUP_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.HANGING_PROTOCOL_USER_GROUP_NAME))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.HANGING_PROTOCOL_USER_GROUP_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.HANGING_PROTOCOL_USER_GROUP_NAME) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SOURCE_HANGING_PROTOCOL_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOURCE_HANGING_PROTOCOL_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SOURCE_HANGING_PROTOCOL_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOURCE_HANGING_PROTOCOL_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort NUMBER_OF_PRIORS_REFERENCED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_PRIORS_REFERENCED))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.NUMBER_OF_PRIORS_REFERENCED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_PRIORS_REFERENCED) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence IMAGE_SETS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_SETS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.IMAGE_SETS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_SETS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence IMAGE_SET_SELECTOR_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_SET_SELECTOR_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.IMAGE_SET_SELECTOR_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_SET_SELECTOR_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString IMAGE_SET_SELECTOR_USAGE_FLAG
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_SET_SELECTOR_USAGE_FLAG))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.IMAGE_SET_SELECTOR_USAGE_FLAG }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_SET_SELECTOR_USAGE_FLAG) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public AttributeTag SELECTOR_ATTRIBUTE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SELECTOR_ATTRIBUTE))
                {
                    AttributeTag newOb = new AttributeTag { Tag = new Tag { Id = TagHelper.SELECTOR_ATTRIBUTE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SELECTOR_ATTRIBUTE) as AttributeTag;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort SELECTOR_VALUE_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SELECTOR_VALUE_NUMBER))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.SELECTOR_VALUE_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SELECTOR_VALUE_NUMBER) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence TIME_BASED_IMAGE_SETS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TIME_BASED_IMAGE_SETS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.TIME_BASED_IMAGE_SETS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TIME_BASED_IMAGE_SETS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort IMAGE_SET_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_SET_NUMBER))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.IMAGE_SET_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_SET_NUMBER) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString IMAGE_SET_SELECTOR_CATEGORY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_SET_SELECTOR_CATEGORY))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.IMAGE_SET_SELECTOR_CATEGORY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_SET_SELECTOR_CATEGORY) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort RELATIVE_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RELATIVE_TIME))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.RELATIVE_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RELATIVE_TIME) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString RELATIVE_TIME_UNITS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RELATIVE_TIME_UNITS))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.RELATIVE_TIME_UNITS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RELATIVE_TIME_UNITS) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public SignedShort ABSTRACT_PRIOR_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ABSTRACT_PRIOR_VALUE))
                {
                    SignedShort newOb = new SignedShort { Tag = new Tag { Id = TagHelper.ABSTRACT_PRIOR_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ABSTRACT_PRIOR_VALUE) as SignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ABSTRACT_PRIOR_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ABSTRACT_PRIOR_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ABSTRACT_PRIOR_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ABSTRACT_PRIOR_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString IMAGE_SET_LABEL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_SET_LABEL))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.IMAGE_SET_LABEL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_SET_LABEL) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SELECTOR_ATTRIBUTE_VR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SELECTOR_ATTRIBUTE_VR))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SELECTOR_ATTRIBUTE_VR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SELECTOR_ATTRIBUTE_VR) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public AttributeTag SELECTOR_SEQUENCE_POINTER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SELECTOR_SEQUENCE_POINTER))
                {
                    AttributeTag newOb = new AttributeTag { Tag = new Tag { Id = TagHelper.SELECTOR_SEQUENCE_POINTER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SELECTOR_SEQUENCE_POINTER) as AttributeTag;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString SELECTOR_SEQUENCE_POINTER_PRIVATE_CREATOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SELECTOR_SEQUENCE_POINTER_PRIVATE_CREATOR))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.SELECTOR_SEQUENCE_POINTER_PRIVATE_CREATOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SELECTOR_SEQUENCE_POINTER_PRIVATE_CREATOR) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString SELECTOR_ATTRIBUTE_PRIVATE_CREATOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SELECTOR_ATTRIBUTE_PRIVATE_CREATOR))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.SELECTOR_ATTRIBUTE_PRIVATE_CREATOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SELECTOR_ATTRIBUTE_PRIVATE_CREATOR) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public AttributeTag SELECTOR_ATVALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SELECTOR_ATVALUE))
                {
                    AttributeTag newOb = new AttributeTag { Tag = new Tag { Id = TagHelper.SELECTOR_ATVALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SELECTOR_ATVALUE) as AttributeTag;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SELECTOR_CSVALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SELECTOR_CSVALUE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SELECTOR_CSVALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SELECTOR_CSVALUE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString SELECTOR_ISVALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SELECTOR_ISVALUE))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.SELECTOR_ISVALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SELECTOR_ISVALUE) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString SELECTOR_LOVALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SELECTOR_LOVALUE))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.SELECTOR_LOVALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SELECTOR_LOVALUE) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongText SELECTOR_LTVALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SELECTOR_LTVALUE))
                {
                    LongText newOb = new LongText { Tag = new Tag { Id = TagHelper.SELECTOR_LTVALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SELECTOR_LTVALUE) as LongText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public PersonsName SELECTOR_PNVALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SELECTOR_PNVALUE))
                {
                    PersonsName newOb = new PersonsName { Tag = new Tag { Id = TagHelper.SELECTOR_PNVALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SELECTOR_PNVALUE) as PersonsName;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString SELECTOR_SHVALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SELECTOR_SHVALUE))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.SELECTOR_SHVALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SELECTOR_SHVALUE) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText SELECTOR_STVALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SELECTOR_STVALUE))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.SELECTOR_STVALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SELECTOR_STVALUE) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnlimitedText SELECTOR_UTVALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SELECTOR_UTVALUE))
                {
                    UnlimitedText newOb = new UnlimitedText { Tag = new Tag { Id = TagHelper.SELECTOR_UTVALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SELECTOR_UTVALUE) as UnlimitedText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString SELECTOR_DSVALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SELECTOR_DSVALUE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.SELECTOR_DSVALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SELECTOR_DSVALUE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble SELECTOR_FDVALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SELECTOR_FDVALUE))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.SELECTOR_FDVALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SELECTOR_FDVALUE) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle SELECTOR_FLVALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SELECTOR_FLVALUE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.SELECTOR_FLVALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SELECTOR_FLVALUE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong SELECTOR_ULVALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SELECTOR_ULVALUE))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.SELECTOR_ULVALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SELECTOR_ULVALUE) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort SELECTOR_USVALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SELECTOR_USVALUE))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.SELECTOR_USVALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SELECTOR_USVALUE) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public SignedLong SELECTOR_SLVALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SELECTOR_SLVALUE))
                {
                    SignedLong newOb = new SignedLong { Tag = new Tag { Id = TagHelper.SELECTOR_SLVALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SELECTOR_SLVALUE) as SignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public SignedShort SELECTOR_SSVALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SELECTOR_SSVALUE))
                {
                    SignedShort newOb = new SignedShort { Tag = new Tag { Id = TagHelper.SELECTOR_SSVALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SELECTOR_SSVALUE) as SignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SELECTOR_CODE_SEQUENCE_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SELECTOR_CODE_SEQUENCE_VALUE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SELECTOR_CODE_SEQUENCE_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SELECTOR_CODE_SEQUENCE_VALUE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort NUMBER_OF_SCREENS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_SCREENS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.NUMBER_OF_SCREENS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_SCREENS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence NOMINAL_SCREEN_DEFINITION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NOMINAL_SCREEN_DEFINITION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.NOMINAL_SCREEN_DEFINITION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NOMINAL_SCREEN_DEFINITION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort NUMBER_OF_VERTICAL_PIXELS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_VERTICAL_PIXELS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.NUMBER_OF_VERTICAL_PIXELS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_VERTICAL_PIXELS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort NUMBER_OF_HORIZONTAL_PIXELS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_HORIZONTAL_PIXELS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.NUMBER_OF_HORIZONTAL_PIXELS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_HORIZONTAL_PIXELS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble DISPLAY_ENVIRONMENT_SPATIAL_POSITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DISPLAY_ENVIRONMENT_SPATIAL_POSITION))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.DISPLAY_ENVIRONMENT_SPATIAL_POSITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DISPLAY_ENVIRONMENT_SPATIAL_POSITION) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort SCREEN_MINIMUM_GRAYSCALE_BIT_DEPTH
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCREEN_MINIMUM_GRAYSCALE_BIT_DEPTH))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.SCREEN_MINIMUM_GRAYSCALE_BIT_DEPTH }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCREEN_MINIMUM_GRAYSCALE_BIT_DEPTH) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort SCREEN_MINIMUM_COLOR_BIT_DEPTH
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCREEN_MINIMUM_COLOR_BIT_DEPTH))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.SCREEN_MINIMUM_COLOR_BIT_DEPTH }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCREEN_MINIMUM_COLOR_BIT_DEPTH) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort APPLICATION_MAXIMUM_REPAINT_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.APPLICATION_MAXIMUM_REPAINT_TIME))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.APPLICATION_MAXIMUM_REPAINT_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.APPLICATION_MAXIMUM_REPAINT_TIME) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence DISPLAY_SETS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DISPLAY_SETS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.DISPLAY_SETS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DISPLAY_SETS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort DISPLAY_SET_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DISPLAY_SET_NUMBER))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.DISPLAY_SET_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DISPLAY_SET_NUMBER) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString DISPLAY_SET_LABEL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DISPLAY_SET_LABEL))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.DISPLAY_SET_LABEL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DISPLAY_SET_LABEL) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort DISPLAY_SET_PRESENTATION_GROUP
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DISPLAY_SET_PRESENTATION_GROUP))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.DISPLAY_SET_PRESENTATION_GROUP }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DISPLAY_SET_PRESENTATION_GROUP) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString DISPLAY_SET_PRESENTATION_GROUP_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DISPLAY_SET_PRESENTATION_GROUP_DESCRIPTION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.DISPLAY_SET_PRESENTATION_GROUP_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DISPLAY_SET_PRESENTATION_GROUP_DESCRIPTION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString PARTIAL_DATA_DISPLAY_HANDLING
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PARTIAL_DATA_DISPLAY_HANDLING))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.PARTIAL_DATA_DISPLAY_HANDLING }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PARTIAL_DATA_DISPLAY_HANDLING) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SYNCHRONIZED_SCROLLING_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SYNCHRONIZED_SCROLLING_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SYNCHRONIZED_SCROLLING_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SYNCHRONIZED_SCROLLING_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort DISPLAY_SET_SCROLLING_GROUP
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DISPLAY_SET_SCROLLING_GROUP))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.DISPLAY_SET_SCROLLING_GROUP }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DISPLAY_SET_SCROLLING_GROUP) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence NAVIGATION_INDICATOR_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NAVIGATION_INDICATOR_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.NAVIGATION_INDICATOR_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NAVIGATION_INDICATOR_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort NAVIGATION_DISPLAY_SET
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NAVIGATION_DISPLAY_SET))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.NAVIGATION_DISPLAY_SET }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NAVIGATION_DISPLAY_SET) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort REFERENCE_DISPLAY_SETS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCE_DISPLAY_SETS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.REFERENCE_DISPLAY_SETS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCE_DISPLAY_SETS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence IMAGE_BOXES_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_BOXES_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.IMAGE_BOXES_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_BOXES_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort IMAGE_BOX_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_BOX_NUMBER))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.IMAGE_BOX_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_BOX_NUMBER) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString IMAGE_BOX_LAYOUT_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_BOX_LAYOUT_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.IMAGE_BOX_LAYOUT_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_BOX_LAYOUT_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort IMAGE_BOX_TILE_HORIZONTAL_DIMENSION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_BOX_TILE_HORIZONTAL_DIMENSION))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.IMAGE_BOX_TILE_HORIZONTAL_DIMENSION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_BOX_TILE_HORIZONTAL_DIMENSION) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort IMAGE_BOX_TILE_VERTICAL_DIMENSION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_BOX_TILE_VERTICAL_DIMENSION))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.IMAGE_BOX_TILE_VERTICAL_DIMENSION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_BOX_TILE_VERTICAL_DIMENSION) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString IMAGE_BOX_SCROLL_DIRECTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_BOX_SCROLL_DIRECTION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.IMAGE_BOX_SCROLL_DIRECTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_BOX_SCROLL_DIRECTION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString IMAGE_BOX_SMALL_SCROLL_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_BOX_SMALL_SCROLL_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.IMAGE_BOX_SMALL_SCROLL_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_BOX_SMALL_SCROLL_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort IMAGE_BOX_SMALL_SCROLL_AMOUNT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_BOX_SMALL_SCROLL_AMOUNT))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.IMAGE_BOX_SMALL_SCROLL_AMOUNT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_BOX_SMALL_SCROLL_AMOUNT) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString IMAGE_BOX_LARGE_SCROLL_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_BOX_LARGE_SCROLL_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.IMAGE_BOX_LARGE_SCROLL_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_BOX_LARGE_SCROLL_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort IMAGE_BOX_LARGE_SCROLL_AMOUNT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_BOX_LARGE_SCROLL_AMOUNT))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.IMAGE_BOX_LARGE_SCROLL_AMOUNT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_BOX_LARGE_SCROLL_AMOUNT) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort IMAGE_BOX_OVERLAP_PRIORITY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_BOX_OVERLAP_PRIORITY))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.IMAGE_BOX_OVERLAP_PRIORITY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_BOX_OVERLAP_PRIORITY) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble CINE_RELATIVE_TO_REAL_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CINE_RELATIVE_TO_REAL_TIME))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.CINE_RELATIVE_TO_REAL_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CINE_RELATIVE_TO_REAL_TIME) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence FILTER_OPERATIONS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FILTER_OPERATIONS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.FILTER_OPERATIONS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FILTER_OPERATIONS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString FILTER_BY_CATEGORY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FILTER_BY_CATEGORY))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.FILTER_BY_CATEGORY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FILTER_BY_CATEGORY) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString FILTER_BY_ATTRIBUTE_PRESENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FILTER_BY_ATTRIBUTE_PRESENCE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.FILTER_BY_ATTRIBUTE_PRESENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FILTER_BY_ATTRIBUTE_PRESENCE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString FILTER_BY_OPERATOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FILTER_BY_OPERATOR))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.FILTER_BY_OPERATOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FILTER_BY_OPERATOR) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort STRUCTURED_DISPLAY_BACKGROUND_CIELAB_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STRUCTURED_DISPLAY_BACKGROUND_CIELAB_VALUE))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.STRUCTURED_DISPLAY_BACKGROUND_CIELAB_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STRUCTURED_DISPLAY_BACKGROUND_CIELAB_VALUE) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort EMPTY_IMAGE_BOX_CIELAB_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.EMPTY_IMAGE_BOX_CIELAB_VALUE))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.EMPTY_IMAGE_BOX_CIELAB_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.EMPTY_IMAGE_BOX_CIELAB_VALUE) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence STRUCTURED_DISPLAY_IMAGE_BOX_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STRUCTURED_DISPLAY_IMAGE_BOX_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.STRUCTURED_DISPLAY_IMAGE_BOX_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STRUCTURED_DISPLAY_IMAGE_BOX_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence STRUCTURED_DISPLAY_TEXT_BOX_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STRUCTURED_DISPLAY_TEXT_BOX_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.STRUCTURED_DISPLAY_TEXT_BOX_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STRUCTURED_DISPLAY_TEXT_BOX_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_FIRST_FRAME_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_FIRST_FRAME_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_FIRST_FRAME_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_FIRST_FRAME_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence IMAGE_BOX_SYNCHRONIZATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_BOX_SYNCHRONIZATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.IMAGE_BOX_SYNCHRONIZATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_BOX_SYNCHRONIZATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort SYNCHRONIZED_IMAGE_BOX_LIST
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SYNCHRONIZED_IMAGE_BOX_LIST))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.SYNCHRONIZED_IMAGE_BOX_LIST }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SYNCHRONIZED_IMAGE_BOX_LIST) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString TYPE_OF_SYNCHRONIZATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TYPE_OF_SYNCHRONIZATION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.TYPE_OF_SYNCHRONIZATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TYPE_OF_SYNCHRONIZATION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString BLENDING_OPERATION_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BLENDING_OPERATION_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.BLENDING_OPERATION_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BLENDING_OPERATION_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString REFORMATTING_OPERATION_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFORMATTING_OPERATION_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.REFORMATTING_OPERATION_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFORMATTING_OPERATION_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble REFORMATTING_THICKNESS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFORMATTING_THICKNESS))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.REFORMATTING_THICKNESS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFORMATTING_THICKNESS) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointDouble REFORMATTING_INTERVAL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFORMATTING_INTERVAL))
                {
                    FloatingPointDouble newOb = new FloatingPointDouble { Tag = new Tag { Id = TagHelper.REFORMATTING_INTERVAL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFORMATTING_INTERVAL) as FloatingPointDouble;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString REFORMATTING_OPERATION_INITIAL_VIEW_DIRECTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFORMATTING_OPERATION_INITIAL_VIEW_DIRECTION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.REFORMATTING_OPERATION_INITIAL_VIEW_DIRECTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFORMATTING_OPERATION_INITIAL_VIEW_DIRECTION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString THREE_DRENDERING_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.THREE_DRENDERING_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.THREE_DRENDERING_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.THREE_DRENDERING_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SORTING_OPERATIONS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SORTING_OPERATIONS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SORTING_OPERATIONS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SORTING_OPERATIONS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SORT_BY_CATEGORY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SORT_BY_CATEGORY))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SORT_BY_CATEGORY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SORT_BY_CATEGORY) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SORTING_DIRECTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SORTING_DIRECTION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SORTING_DIRECTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SORTING_DIRECTION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString DISPLAY_SET_PATIENT_ORIENTATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DISPLAY_SET_PATIENT_ORIENTATION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.DISPLAY_SET_PATIENT_ORIENTATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DISPLAY_SET_PATIENT_ORIENTATION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString VOITYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VOITYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.VOITYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VOITYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString PSEUDO_COLOR_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PSEUDO_COLOR_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.PSEUDO_COLOR_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PSEUDO_COLOR_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SHOW_GRAYSCALE_INVERTED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SHOW_GRAYSCALE_INVERTED))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SHOW_GRAYSCALE_INVERTED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SHOW_GRAYSCALE_INVERTED) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SHOW_IMAGE_TRUE_SIZE_FLAG
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SHOW_IMAGE_TRUE_SIZE_FLAG))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SHOW_IMAGE_TRUE_SIZE_FLAG }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SHOW_IMAGE_TRUE_SIZE_FLAG) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SHOW_GRAPHIC_ANNOTATION_FLAG
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SHOW_GRAPHIC_ANNOTATION_FLAG))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SHOW_GRAPHIC_ANNOTATION_FLAG }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SHOW_GRAPHIC_ANNOTATION_FLAG) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SHOW_PATIENT_DEMOGRAPHICS_FLAG
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SHOW_PATIENT_DEMOGRAPHICS_FLAG))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SHOW_PATIENT_DEMOGRAPHICS_FLAG }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SHOW_PATIENT_DEMOGRAPHICS_FLAG) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SHOW_ACQUISITION_TECHNIQUES_FLAG
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SHOW_ACQUISITION_TECHNIQUES_FLAG))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SHOW_ACQUISITION_TECHNIQUES_FLAG }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SHOW_ACQUISITION_TECHNIQUES_FLAG) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString DISPLAY_SET_HORIZONTAL_JUSTIFICATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DISPLAY_SET_HORIZONTAL_JUSTIFICATION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.DISPLAY_SET_HORIZONTAL_JUSTIFICATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DISPLAY_SET_HORIZONTAL_JUSTIFICATION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString DISPLAY_SET_VERTICAL_JUSTIFICATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DISPLAY_SET_VERTICAL_JUSTIFICATION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.DISPLAY_SET_VERTICAL_JUSTIFICATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DISPLAY_SET_VERTICAL_JUSTIFICATION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString UNIFIED_PROCEDURE_STEP_STATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.UNIFIED_PROCEDURE_STEP_STATE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.UNIFIED_PROCEDURE_STEP_STATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.UNIFIED_PROCEDURE_STEP_STATE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence UNIFIED_PROCEDURE_STEP_PROGRESS_INFORMATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.UNIFIED_PROCEDURE_STEP_PROGRESS_INFORMATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.UNIFIED_PROCEDURE_STEP_PROGRESS_INFORMATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.UNIFIED_PROCEDURE_STEP_PROGRESS_INFORMATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString UNIFIED_PROCEDURE_STEP_PROGRESS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.UNIFIED_PROCEDURE_STEP_PROGRESS))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.UNIFIED_PROCEDURE_STEP_PROGRESS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.UNIFIED_PROCEDURE_STEP_PROGRESS) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText UNIFIED_PROCEDURE_STEP_PROGRESS_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.UNIFIED_PROCEDURE_STEP_PROGRESS_DESCRIPTION))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.UNIFIED_PROCEDURE_STEP_PROGRESS_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.UNIFIED_PROCEDURE_STEP_PROGRESS_DESCRIPTION) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence UNIFIED_PROCEDURE_STEP_COMMUNICATIONS_URISEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.UNIFIED_PROCEDURE_STEP_COMMUNICATIONS_URISEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.UNIFIED_PROCEDURE_STEP_COMMUNICATIONS_URISEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.UNIFIED_PROCEDURE_STEP_COMMUNICATIONS_URISEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText CONTACT_URI
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTACT_URI))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.CONTACT_URI }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTACT_URI) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString CONTACT_DISPLAY_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTACT_DISPLAY_NAME))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.CONTACT_DISPLAY_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTACT_DISPLAY_NAME) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence UNIFIED_PROCEDURE_STEP_DISCONTINUATION_REASON_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.UNIFIED_PROCEDURE_STEP_DISCONTINUATION_REASON_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.UNIFIED_PROCEDURE_STEP_DISCONTINUATION_REASON_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.UNIFIED_PROCEDURE_STEP_DISCONTINUATION_REASON_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence BEAM_TASK_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BEAM_TASK_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.BEAM_TASK_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BEAM_TASK_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString BEAM_TASK_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BEAM_TASK_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.BEAM_TASK_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BEAM_TASK_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString BEAM_ORDER_INDEX
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BEAM_ORDER_INDEX))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.BEAM_ORDER_INDEX }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BEAM_ORDER_INDEX) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence DELIVERY_VERIFICATION_IMAGE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DELIVERY_VERIFICATION_IMAGE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.DELIVERY_VERIFICATION_IMAGE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DELIVERY_VERIFICATION_IMAGE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString VERIFICATION_IMAGE_TIMING
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VERIFICATION_IMAGE_TIMING))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.VERIFICATION_IMAGE_TIMING }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VERIFICATION_IMAGE_TIMING) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString DOUBLE_EXPOSURE_FLAG
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DOUBLE_EXPOSURE_FLAG))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.DOUBLE_EXPOSURE_FLAG }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DOUBLE_EXPOSURE_FLAG) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString DOUBLE_EXPOSURE_ORDERING
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DOUBLE_EXPOSURE_ORDERING))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.DOUBLE_EXPOSURE_ORDERING }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DOUBLE_EXPOSURE_ORDERING) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DOUBLE_EXPOSURE_METERSET
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DOUBLE_EXPOSURE_METERSET))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DOUBLE_EXPOSURE_METERSET }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DOUBLE_EXPOSURE_METERSET) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DOUBLE_EXPOSURE_FIELD_DELTA
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DOUBLE_EXPOSURE_FIELD_DELTA))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DOUBLE_EXPOSURE_FIELD_DELTA }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DOUBLE_EXPOSURE_FIELD_DELTA) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence RELATED_REFERENCE_RTIMAGE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RELATED_REFERENCE_RTIMAGE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.RELATED_REFERENCE_RTIMAGE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RELATED_REFERENCE_RTIMAGE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence GENERAL_MACHINE_VERIFICATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GENERAL_MACHINE_VERIFICATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.GENERAL_MACHINE_VERIFICATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GENERAL_MACHINE_VERIFICATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CONVENTIONAL_MACHINE_VERIFICATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONVENTIONAL_MACHINE_VERIFICATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CONVENTIONAL_MACHINE_VERIFICATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONVENTIONAL_MACHINE_VERIFICATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ION_MACHINE_VERIFICATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ION_MACHINE_VERIFICATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ION_MACHINE_VERIFICATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ION_MACHINE_VERIFICATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence FAILED_ATTRIBUTES_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FAILED_ATTRIBUTES_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.FAILED_ATTRIBUTES_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FAILED_ATTRIBUTES_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence OVERRIDDEN_ATTRIBUTES_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERRIDDEN_ATTRIBUTES_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.OVERRIDDEN_ATTRIBUTES_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERRIDDEN_ATTRIBUTES_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CONVENTIONAL_CONTROL_POINT_VERIFICATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONVENTIONAL_CONTROL_POINT_VERIFICATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CONVENTIONAL_CONTROL_POINT_VERIFICATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONVENTIONAL_CONTROL_POINT_VERIFICATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ION_CONTROL_POINT_VERIFICATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ION_CONTROL_POINT_VERIFICATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ION_CONTROL_POINT_VERIFICATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ION_CONTROL_POINT_VERIFICATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ATTRIBUTE_OCCURRENCE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ATTRIBUTE_OCCURRENCE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ATTRIBUTE_OCCURRENCE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ATTRIBUTE_OCCURRENCE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public AttributeTag ATTRIBUTE_OCCURRENCE_POINTER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ATTRIBUTE_OCCURRENCE_POINTER))
                {
                    AttributeTag newOb = new AttributeTag { Tag = new Tag { Id = TagHelper.ATTRIBUTE_OCCURRENCE_POINTER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ATTRIBUTE_OCCURRENCE_POINTER) as AttributeTag;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong ATTRIBUTE_ITEM_SELECTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ATTRIBUTE_ITEM_SELECTOR))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.ATTRIBUTE_ITEM_SELECTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ATTRIBUTE_ITEM_SELECTOR) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString ATTRIBUTE_OCCURRENCE_PRIVATE_CREATOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ATTRIBUTE_OCCURRENCE_PRIVATE_CREATOR))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.ATTRIBUTE_OCCURRENCE_PRIVATE_CREATOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ATTRIBUTE_OCCURRENCE_PRIVATE_CREATOR) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SCHEDULED_PROCEDURE_STEP_PRIORITY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCHEDULED_PROCEDURE_STEP_PRIORITY))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SCHEDULED_PROCEDURE_STEP_PRIORITY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCHEDULED_PROCEDURE_STEP_PRIORITY) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString WORKLIST_LABEL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.WORKLIST_LABEL))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.WORKLIST_LABEL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.WORKLIST_LABEL) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString PROCEDURE_STEP_LABEL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PROCEDURE_STEP_LABEL))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.PROCEDURE_STEP_LABEL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PROCEDURE_STEP_LABEL) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SCHEDULED_PROCESSING_PARAMETERS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCHEDULED_PROCESSING_PARAMETERS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SCHEDULED_PROCESSING_PARAMETERS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCHEDULED_PROCESSING_PARAMETERS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PERFORMED_PROCESSING_PARAMETERS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PERFORMED_PROCESSING_PARAMETERS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PERFORMED_PROCESSING_PARAMETERS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PERFORMED_PROCESSING_PARAMETERS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence UNIFIED_PROCEDURE_STEP_PERFORMED_PROCEDURE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.UNIFIED_PROCEDURE_STEP_PERFORMED_PROCEDURE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.UNIFIED_PROCEDURE_STEP_PERFORMED_PROCEDURE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.UNIFIED_PROCEDURE_STEP_PERFORMED_PROCEDURE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence RELATED_PROCEDURE_STEP_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RELATED_PROCEDURE_STEP_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.RELATED_PROCEDURE_STEP_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RELATED_PROCEDURE_STEP_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString PROCEDURE_STEP_RELATIONSHIP_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PROCEDURE_STEP_RELATIONSHIP_TYPE))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.PROCEDURE_STEP_RELATIONSHIP_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PROCEDURE_STEP_RELATIONSHIP_TYPE) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString DELETION_LOCK
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DELETION_LOCK))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.DELETION_LOCK }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DELETION_LOCK) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ApplicationEntity RECEIVING_AE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RECEIVING_AE))
                {
                    ApplicationEntity newOb = new ApplicationEntity { Tag = new Tag { Id = TagHelper.RECEIVING_AE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RECEIVING_AE) as ApplicationEntity;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ApplicationEntity REQUESTING_AE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REQUESTING_AE))
                {
                    ApplicationEntity newOb = new ApplicationEntity { Tag = new Tag { Id = TagHelper.REQUESTING_AE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REQUESTING_AE) as ApplicationEntity;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongText REASON_FOR_CANCELLATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REASON_FOR_CANCELLATION))
                {
                    LongText newOb = new LongText { Tag = new Tag { Id = TagHelper.REASON_FOR_CANCELLATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REASON_FOR_CANCELLATION) as LongText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SCPSTATUS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCPSTATUS))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SCPSTATUS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCPSTATUS) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SUBSCRIPTION_LIST_STATUS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SUBSCRIPTION_LIST_STATUS))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SUBSCRIPTION_LIST_STATUS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SUBSCRIPTION_LIST_STATUS) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString UNIFIED_PROCEDURE_STEP_LIST_STATUS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.UNIFIED_PROCEDURE_STEP_LIST_STATUS))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.UNIFIED_PROCEDURE_STEP_LIST_STATUS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.UNIFIED_PROCEDURE_STEP_LIST_STATUS) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString STORAGE_MEDIA_FILE_SET_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STORAGE_MEDIA_FILE_SET_ID))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.STORAGE_MEDIA_FILE_SET_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STORAGE_MEDIA_FILE_SET_ID) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier STORAGE_MEDIA_FILE_SET_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STORAGE_MEDIA_FILE_SET_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.STORAGE_MEDIA_FILE_SET_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STORAGE_MEDIA_FILE_SET_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ICON_IMAGE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ICON_IMAGE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ICON_IMAGE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ICON_IMAGE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString TOPIC_TITLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TOPIC_TITLE))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.TOPIC_TITLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TOPIC_TITLE) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText TOPIC_SUBJECT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TOPIC_SUBJECT))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.TOPIC_SUBJECT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TOPIC_SUBJECT) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString TOPIC_AUTHOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TOPIC_AUTHOR))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.TOPIC_AUTHOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TOPIC_AUTHOR) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString TOPIC_KEYWORDS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TOPIC_KEYWORDS))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.TOPIC_KEYWORDS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TOPIC_KEYWORDS) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SOPINSTANCE_STATUS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOPINSTANCE_STATUS))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SOPINSTANCE_STATUS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOPINSTANCE_STATUS) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateTimeVR SOPAUTHORIZATION_DATE_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOPAUTHORIZATION_DATE_TIME))
                {
                    DateTimeVR newOb = new DateTimeVR { Tag = new Tag { Id = TagHelper.SOPAUTHORIZATION_DATE_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOPAUTHORIZATION_DATE_TIME) as DateTimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongText SOPAUTHORIZATION_COMMENT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOPAUTHORIZATION_COMMENT))
                {
                    LongText newOb = new LongText { Tag = new Tag { Id = TagHelper.SOPAUTHORIZATION_COMMENT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOPAUTHORIZATION_COMMENT) as LongText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString AUTHORIZATION_EQUIPMENT_CERTIFICATION_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.AUTHORIZATION_EQUIPMENT_CERTIFICATION_NUMBER))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.AUTHORIZATION_EQUIPMENT_CERTIFICATION_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.AUTHORIZATION_EQUIPMENT_CERTIFICATION_NUMBER) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort MACIDNUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MACIDNUMBER))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.MACIDNUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MACIDNUMBER) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier MACCALCULATION_TRANSFER_SYNTAX_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MACCALCULATION_TRANSFER_SYNTAX_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.MACCALCULATION_TRANSFER_SYNTAX_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MACCALCULATION_TRANSFER_SYNTAX_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString MACALGORITHM
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MACALGORITHM))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.MACALGORITHM }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MACALGORITHM) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public AttributeTag DATA_ELEMENTS_SIGNED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DATA_ELEMENTS_SIGNED))
                {
                    AttributeTag newOb = new AttributeTag { Tag = new Tag { Id = TagHelper.DATA_ELEMENTS_SIGNED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DATA_ELEMENTS_SIGNED) as AttributeTag;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier DIGITAL_SIGNATURE_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DIGITAL_SIGNATURE_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.DIGITAL_SIGNATURE_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DIGITAL_SIGNATURE_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateTimeVR DIGITAL_SIGNATURE_DATE_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DIGITAL_SIGNATURE_DATE_TIME))
                {
                    DateTimeVR newOb = new DateTimeVR { Tag = new Tag { Id = TagHelper.DIGITAL_SIGNATURE_DATE_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DIGITAL_SIGNATURE_DATE_TIME) as DateTimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString CERTIFICATE_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CERTIFICATE_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.CERTIFICATE_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CERTIFICATE_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public OtherByteString CERTIFICATE_OF_SIGNER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CERTIFICATE_OF_SIGNER))
                {
                    OtherByteString newOb = new OtherByteString { Tag = new Tag { Id = TagHelper.CERTIFICATE_OF_SIGNER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CERTIFICATE_OF_SIGNER) as OtherByteString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public OtherByteString SIGNATURE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SIGNATURE))
                {
                    OtherByteString newOb = new OtherByteString { Tag = new Tag { Id = TagHelper.SIGNATURE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SIGNATURE) as OtherByteString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString CERTIFIED_TIMESTAMP_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CERTIFIED_TIMESTAMP_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.CERTIFIED_TIMESTAMP_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CERTIFIED_TIMESTAMP_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public OtherByteString CERTIFIED_TIMESTAMP
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CERTIFIED_TIMESTAMP))
                {
                    OtherByteString newOb = new OtherByteString { Tag = new Tag { Id = TagHelper.CERTIFIED_TIMESTAMP }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CERTIFIED_TIMESTAMP) as OtherByteString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence DIGITAL_SIGNATURE_PURPOSE_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DIGITAL_SIGNATURE_PURPOSE_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.DIGITAL_SIGNATURE_PURPOSE_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DIGITAL_SIGNATURE_PURPOSE_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_DIGITAL_SIGNATURE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_DIGITAL_SIGNATURE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_DIGITAL_SIGNATURE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_DIGITAL_SIGNATURE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_SOPINSTANCE_MACSEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_SOPINSTANCE_MACSEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_SOPINSTANCE_MACSEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_SOPINSTANCE_MACSEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public OtherByteString MAC
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MAC))
                {
                    OtherByteString newOb = new OtherByteString { Tag = new Tag { Id = TagHelper.MAC }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MAC) as OtherByteString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ENCRYPTED_ATTRIBUTES_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ENCRYPTED_ATTRIBUTES_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ENCRYPTED_ATTRIBUTES_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ENCRYPTED_ATTRIBUTES_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier ENCRYPTED_CONTENT_TRANSFER_SYNTAX_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ENCRYPTED_CONTENT_TRANSFER_SYNTAX_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.ENCRYPTED_CONTENT_TRANSFER_SYNTAX_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ENCRYPTED_CONTENT_TRANSFER_SYNTAX_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public OtherByteString ENCRYPTED_CONTENT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ENCRYPTED_CONTENT))
                {
                    OtherByteString newOb = new OtherByteString { Tag = new Tag { Id = TagHelper.ENCRYPTED_CONTENT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ENCRYPTED_CONTENT) as OtherByteString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence MODIFIED_ATTRIBUTES_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MODIFIED_ATTRIBUTES_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.MODIFIED_ATTRIBUTES_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MODIFIED_ATTRIBUTES_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ORIGINAL_ATTRIBUTES_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ORIGINAL_ATTRIBUTES_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ORIGINAL_ATTRIBUTES_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ORIGINAL_ATTRIBUTES_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateTimeVR ATTRIBUTE_MODIFICATION_DATE_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ATTRIBUTE_MODIFICATION_DATE_TIME))
                {
                    DateTimeVR newOb = new DateTimeVR { Tag = new Tag { Id = TagHelper.ATTRIBUTE_MODIFICATION_DATE_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ATTRIBUTE_MODIFICATION_DATE_TIME) as DateTimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString MODIFYING_SYSTEM
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MODIFYING_SYSTEM))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.MODIFYING_SYSTEM }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MODIFYING_SYSTEM) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString SOURCE_OF_PREVIOUS_VALUES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOURCE_OF_PREVIOUS_VALUES))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.SOURCE_OF_PREVIOUS_VALUES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOURCE_OF_PREVIOUS_VALUES) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString REASON_FOR_THE_ATTRIBUTE_MODIFICATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REASON_FOR_THE_ATTRIBUTE_MODIFICATION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.REASON_FOR_THE_ATTRIBUTE_MODIFICATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REASON_FOR_THE_ATTRIBUTE_MODIFICATION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort ESCAPE_TRIPLET
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ESCAPE_TRIPLET))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.ESCAPE_TRIPLET }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ESCAPE_TRIPLET) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort RUN_LENGTH_TRIPLET
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RUN_LENGTH_TRIPLET))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.RUN_LENGTH_TRIPLET }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RUN_LENGTH_TRIPLET) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort HUFFMAN_TABLE_SIZE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.HUFFMAN_TABLE_SIZE))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.HUFFMAN_TABLE_SIZE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.HUFFMAN_TABLE_SIZE) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort HUFFMAN_TABLE_TRIPLET
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.HUFFMAN_TABLE_TRIPLET))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.HUFFMAN_TABLE_TRIPLET }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.HUFFMAN_TABLE_TRIPLET) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort SHIFT_TABLE_SIZE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SHIFT_TABLE_SIZE))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.SHIFT_TABLE_SIZE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SHIFT_TABLE_SIZE) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort SHIFT_TABLE_TRIPLET
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SHIFT_TABLE_TRIPLET))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.SHIFT_TABLE_TRIPLET }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SHIFT_TABLE_TRIPLET) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort ZONAL_MAP
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ZONAL_MAP))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.ZONAL_MAP }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ZONAL_MAP) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString NUMBER_OF_COPIES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_COPIES))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.NUMBER_OF_COPIES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_COPIES) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PRINTER_CONFIGURATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRINTER_CONFIGURATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PRINTER_CONFIGURATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRINTER_CONFIGURATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString PRINT_PRIORITY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRINT_PRIORITY))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.PRINT_PRIORITY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRINT_PRIORITY) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString MEDIUM_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MEDIUM_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.MEDIUM_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MEDIUM_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString FILM_DESTINATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FILM_DESTINATION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.FILM_DESTINATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FILM_DESTINATION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString FILM_SESSION_LABEL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FILM_SESSION_LABEL))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.FILM_SESSION_LABEL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FILM_SESSION_LABEL) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString MEMORY_ALLOCATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MEMORY_ALLOCATION))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.MEMORY_ALLOCATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MEMORY_ALLOCATION) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString MAXIMUM_MEMORY_ALLOCATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MAXIMUM_MEMORY_ALLOCATION))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.MAXIMUM_MEMORY_ALLOCATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MAXIMUM_MEMORY_ALLOCATION) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString COLOR_IMAGE_PRINTING_FLAG
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COLOR_IMAGE_PRINTING_FLAG))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.COLOR_IMAGE_PRINTING_FLAG }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COLOR_IMAGE_PRINTING_FLAG) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString COLLATION_FLAG
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COLLATION_FLAG))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.COLLATION_FLAG }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COLLATION_FLAG) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString ANNOTATION_FLAG
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ANNOTATION_FLAG))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.ANNOTATION_FLAG }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ANNOTATION_FLAG) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString IMAGE_OVERLAY_FLAG
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_OVERLAY_FLAG))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.IMAGE_OVERLAY_FLAG }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_OVERLAY_FLAG) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString PRESENTATION_LUTFLAG
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRESENTATION_LUTFLAG))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.PRESENTATION_LUTFLAG }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRESENTATION_LUTFLAG) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString IMAGE_BOX_PRESENTATION_LUTFLAG
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_BOX_PRESENTATION_LUTFLAG))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.IMAGE_BOX_PRESENTATION_LUTFLAG }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_BOX_PRESENTATION_LUTFLAG) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort MEMORY_BIT_DEPTH
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MEMORY_BIT_DEPTH))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.MEMORY_BIT_DEPTH }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MEMORY_BIT_DEPTH) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort PRINTING_BIT_DEPTH
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRINTING_BIT_DEPTH))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.PRINTING_BIT_DEPTH }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRINTING_BIT_DEPTH) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence MEDIA_INSTALLED_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MEDIA_INSTALLED_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.MEDIA_INSTALLED_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MEDIA_INSTALLED_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence OTHER_MEDIA_AVAILABLE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OTHER_MEDIA_AVAILABLE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.OTHER_MEDIA_AVAILABLE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OTHER_MEDIA_AVAILABLE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SUPPORTED_IMAGE_DISPLAY_FORMATS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SUPPORTED_IMAGE_DISPLAY_FORMATS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SUPPORTED_IMAGE_DISPLAY_FORMATS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SUPPORTED_IMAGE_DISPLAY_FORMATS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_FILM_BOX_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_FILM_BOX_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_FILM_BOX_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_FILM_BOX_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_STORED_PRINT_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_STORED_PRINT_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_STORED_PRINT_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_STORED_PRINT_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText IMAGE_DISPLAY_FORMAT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_DISPLAY_FORMAT))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.IMAGE_DISPLAY_FORMAT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_DISPLAY_FORMAT) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString ANNOTATION_DISPLAY_FORMAT_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ANNOTATION_DISPLAY_FORMAT_ID))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.ANNOTATION_DISPLAY_FORMAT_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ANNOTATION_DISPLAY_FORMAT_ID) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString FILM_ORIENTATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FILM_ORIENTATION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.FILM_ORIENTATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FILM_ORIENTATION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString FILM_SIZE_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FILM_SIZE_ID))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.FILM_SIZE_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FILM_SIZE_ID) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString PRINTER_RESOLUTION_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRINTER_RESOLUTION_ID))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.PRINTER_RESOLUTION_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRINTER_RESOLUTION_ID) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString DEFAULT_PRINTER_RESOLUTION_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DEFAULT_PRINTER_RESOLUTION_ID))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.DEFAULT_PRINTER_RESOLUTION_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DEFAULT_PRINTER_RESOLUTION_ID) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString MAGNIFICATION_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MAGNIFICATION_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.MAGNIFICATION_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MAGNIFICATION_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SMOOTHING_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SMOOTHING_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SMOOTHING_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SMOOTHING_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString DEFAULT_MAGNIFICATION_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DEFAULT_MAGNIFICATION_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.DEFAULT_MAGNIFICATION_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DEFAULT_MAGNIFICATION_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString OTHER_MAGNIFICATION_TYPES_AVAILABLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OTHER_MAGNIFICATION_TYPES_AVAILABLE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.OTHER_MAGNIFICATION_TYPES_AVAILABLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OTHER_MAGNIFICATION_TYPES_AVAILABLE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString DEFAULT_SMOOTHING_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DEFAULT_SMOOTHING_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.DEFAULT_SMOOTHING_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DEFAULT_SMOOTHING_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString OTHER_SMOOTHING_TYPES_AVAILABLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OTHER_SMOOTHING_TYPES_AVAILABLE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.OTHER_SMOOTHING_TYPES_AVAILABLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OTHER_SMOOTHING_TYPES_AVAILABLE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString BORDER_DENSITY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BORDER_DENSITY))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.BORDER_DENSITY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BORDER_DENSITY) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString EMPTY_IMAGE_DENSITY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.EMPTY_IMAGE_DENSITY))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.EMPTY_IMAGE_DENSITY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.EMPTY_IMAGE_DENSITY) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort MIN_DENSITY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MIN_DENSITY))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.MIN_DENSITY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MIN_DENSITY) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort MAX_DENSITY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MAX_DENSITY))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.MAX_DENSITY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MAX_DENSITY) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString TRIM
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TRIM))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.TRIM }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TRIM) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText CONFIGURATION_INFORMATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONFIGURATION_INFORMATION))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.CONFIGURATION_INFORMATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONFIGURATION_INFORMATION) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongText CONFIGURATION_INFORMATION_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONFIGURATION_INFORMATION_DESCRIPTION))
                {
                    LongText newOb = new LongText { Tag = new Tag { Id = TagHelper.CONFIGURATION_INFORMATION_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONFIGURATION_INFORMATION_DESCRIPTION) as LongText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString MAXIMUM_COLLATED_FILMS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MAXIMUM_COLLATED_FILMS))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.MAXIMUM_COLLATED_FILMS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MAXIMUM_COLLATED_FILMS) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort ILLUMINATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ILLUMINATION))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.ILLUMINATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ILLUMINATION) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort REFLECTED_AMBIENT_LIGHT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFLECTED_AMBIENT_LIGHT))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.REFLECTED_AMBIENT_LIGHT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFLECTED_AMBIENT_LIGHT) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString PRINTER_PIXEL_SPACING
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRINTER_PIXEL_SPACING))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.PRINTER_PIXEL_SPACING }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRINTER_PIXEL_SPACING) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_FILM_SESSION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_FILM_SESSION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_FILM_SESSION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_FILM_SESSION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_IMAGE_BOX_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_IMAGE_BOX_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_IMAGE_BOX_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_IMAGE_BOX_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_BASIC_ANNOTATION_BOX_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_BASIC_ANNOTATION_BOX_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_BASIC_ANNOTATION_BOX_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_BASIC_ANNOTATION_BOX_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort IMAGE_BOX_POSITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_BOX_POSITION))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.IMAGE_BOX_POSITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_BOX_POSITION) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString POLARITY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.POLARITY))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.POLARITY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.POLARITY) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString REQUESTED_IMAGE_SIZE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REQUESTED_IMAGE_SIZE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.REQUESTED_IMAGE_SIZE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REQUESTED_IMAGE_SIZE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString REQUESTED_DECIMATE_CROP_BEHAVIOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REQUESTED_DECIMATE_CROP_BEHAVIOR))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.REQUESTED_DECIMATE_CROP_BEHAVIOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REQUESTED_DECIMATE_CROP_BEHAVIOR) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString REQUESTED_RESOLUTION_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REQUESTED_RESOLUTION_ID))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.REQUESTED_RESOLUTION_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REQUESTED_RESOLUTION_ID) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString REQUESTED_IMAGE_SIZE_FLAG
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REQUESTED_IMAGE_SIZE_FLAG))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.REQUESTED_IMAGE_SIZE_FLAG }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REQUESTED_IMAGE_SIZE_FLAG) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString DECIMATE_CROP_RESULT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DECIMATE_CROP_RESULT))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.DECIMATE_CROP_RESULT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DECIMATE_CROP_RESULT) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence BASIC_GRAYSCALE_IMAGE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BASIC_GRAYSCALE_IMAGE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.BASIC_GRAYSCALE_IMAGE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BASIC_GRAYSCALE_IMAGE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence BASIC_COLOR_IMAGE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BASIC_COLOR_IMAGE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.BASIC_COLOR_IMAGE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BASIC_COLOR_IMAGE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_IMAGE_OVERLAY_BOX_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_IMAGE_OVERLAY_BOX_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_IMAGE_OVERLAY_BOX_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_IMAGE_OVERLAY_BOX_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_VOILUTBOX_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_VOILUTBOX_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_VOILUTBOX_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_VOILUTBOX_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort ANNOTATION_POSITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ANNOTATION_POSITION))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.ANNOTATION_POSITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ANNOTATION_POSITION) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString TEXT_STRING
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TEXT_STRING))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.TEXT_STRING }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TEXT_STRING) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_OVERLAY_PLANE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_OVERLAY_PLANE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_OVERLAY_PLANE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_OVERLAY_PLANE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort REFERENCED_OVERLAY_PLANE_GROUPS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_OVERLAY_PLANE_GROUPS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.REFERENCED_OVERLAY_PLANE_GROUPS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_OVERLAY_PLANE_GROUPS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence OVERLAY_PIXEL_DATA_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERLAY_PIXEL_DATA_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.OVERLAY_PIXEL_DATA_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERLAY_PIXEL_DATA_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString OVERLAY_MAGNIFICATION_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERLAY_MAGNIFICATION_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.OVERLAY_MAGNIFICATION_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERLAY_MAGNIFICATION_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString OVERLAY_SMOOTHING_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERLAY_SMOOTHING_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.OVERLAY_SMOOTHING_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERLAY_SMOOTHING_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString OVERLAY_OR_IMAGE_MAGNIFICATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERLAY_OR_IMAGE_MAGNIFICATION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.OVERLAY_OR_IMAGE_MAGNIFICATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERLAY_OR_IMAGE_MAGNIFICATION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort MAGNIFY_TO_NUMBER_OF_COLUMNS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MAGNIFY_TO_NUMBER_OF_COLUMNS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.MAGNIFY_TO_NUMBER_OF_COLUMNS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MAGNIFY_TO_NUMBER_OF_COLUMNS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString OVERLAY_FOREGROUND_DENSITY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERLAY_FOREGROUND_DENSITY))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.OVERLAY_FOREGROUND_DENSITY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERLAY_FOREGROUND_DENSITY) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString OVERLAY_BACKGROUND_DENSITY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERLAY_BACKGROUND_DENSITY))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.OVERLAY_BACKGROUND_DENSITY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERLAY_BACKGROUND_DENSITY) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString OVERLAY_MODE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERLAY_MODE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.OVERLAY_MODE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERLAY_MODE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString THRESHOLD_DENSITY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.THRESHOLD_DENSITY))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.THRESHOLD_DENSITY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.THRESHOLD_DENSITY) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_IMAGE_BOX_SEQUENCE_RETIRED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_IMAGE_BOX_SEQUENCE_RETIRED))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_IMAGE_BOX_SEQUENCE_RETIRED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_IMAGE_BOX_SEQUENCE_RETIRED) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PRESENTATION_LUTSEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRESENTATION_LUTSEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PRESENTATION_LUTSEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRESENTATION_LUTSEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString PRESENTATION_LUTSHAPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRESENTATION_LUTSHAPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.PRESENTATION_LUTSHAPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRESENTATION_LUTSHAPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_PRESENTATION_LUTSEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_PRESENTATION_LUTSEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_PRESENTATION_LUTSEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_PRESENTATION_LUTSEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString PRINT_JOB_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRINT_JOB_ID))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.PRINT_JOB_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRINT_JOB_ID) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString EXECUTION_STATUS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.EXECUTION_STATUS))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.EXECUTION_STATUS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.EXECUTION_STATUS) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString EXECUTION_STATUS_INFO
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.EXECUTION_STATUS_INFO))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.EXECUTION_STATUS_INFO }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.EXECUTION_STATUS_INFO) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateVR CREATION_DATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CREATION_DATE))
                {
                    DateVR newOb = new DateVR { Tag = new Tag { Id = TagHelper.CREATION_DATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CREATION_DATE) as DateVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR CREATION_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CREATION_TIME))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.CREATION_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CREATION_TIME) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ApplicationEntity ORIGINATOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ORIGINATOR))
                {
                    ApplicationEntity newOb = new ApplicationEntity { Tag = new Tag { Id = TagHelper.ORIGINATOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ORIGINATOR) as ApplicationEntity;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ApplicationEntity DESTINATION_AE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DESTINATION_AE))
                {
                    ApplicationEntity newOb = new ApplicationEntity { Tag = new Tag { Id = TagHelper.DESTINATION_AE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DESTINATION_AE) as ApplicationEntity;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString OWNER_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OWNER_ID))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.OWNER_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OWNER_ID) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString NUMBER_OF_FILMS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_FILMS))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.NUMBER_OF_FILMS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_FILMS) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_PRINT_JOB_SEQUENCE_PULL_STORED_PRINT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_PRINT_JOB_SEQUENCE_PULL_STORED_PRINT))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_PRINT_JOB_SEQUENCE_PULL_STORED_PRINT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_PRINT_JOB_SEQUENCE_PULL_STORED_PRINT) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString PRINTER_STATUS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRINTER_STATUS))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.PRINTER_STATUS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRINTER_STATUS) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString PRINTER_STATUS_INFO
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRINTER_STATUS_INFO))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.PRINTER_STATUS_INFO }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRINTER_STATUS_INFO) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString PRINTER_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRINTER_NAME))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.PRINTER_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRINTER_NAME) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString PRINT_QUEUE_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRINT_QUEUE_ID))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.PRINT_QUEUE_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRINT_QUEUE_ID) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString QUEUE_STATUS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.QUEUE_STATUS))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.QUEUE_STATUS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.QUEUE_STATUS) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PRINT_JOB_DESCRIPTION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRINT_JOB_DESCRIPTION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PRINT_JOB_DESCRIPTION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRINT_JOB_DESCRIPTION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_PRINT_JOB_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_PRINT_JOB_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_PRINT_JOB_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_PRINT_JOB_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PRINT_MANAGEMENT_CAPABILITIES_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRINT_MANAGEMENT_CAPABILITIES_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PRINT_MANAGEMENT_CAPABILITIES_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRINT_MANAGEMENT_CAPABILITIES_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PRINTER_CHARACTERISTICS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRINTER_CHARACTERISTICS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PRINTER_CHARACTERISTICS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRINTER_CHARACTERISTICS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence FILM_BOX_CONTENT_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FILM_BOX_CONTENT_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.FILM_BOX_CONTENT_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FILM_BOX_CONTENT_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence IMAGE_BOX_CONTENT_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_BOX_CONTENT_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.IMAGE_BOX_CONTENT_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_BOX_CONTENT_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ANNOTATION_CONTENT_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ANNOTATION_CONTENT_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ANNOTATION_CONTENT_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ANNOTATION_CONTENT_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence IMAGE_OVERLAY_BOX_CONTENT_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_OVERLAY_BOX_CONTENT_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.IMAGE_OVERLAY_BOX_CONTENT_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_OVERLAY_BOX_CONTENT_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PRESENTATION_LUTCONTENT_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRESENTATION_LUTCONTENT_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PRESENTATION_LUTCONTENT_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRESENTATION_LUTCONTENT_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PROPOSED_STUDY_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PROPOSED_STUDY_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PROPOSED_STUDY_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PROPOSED_STUDY_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ORIGINAL_IMAGE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ORIGINAL_IMAGE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ORIGINAL_IMAGE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ORIGINAL_IMAGE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString LABEL_USING_INFORMATION_EXTRACTED_FROM_INSTANCES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LABEL_USING_INFORMATION_EXTRACTED_FROM_INSTANCES))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.LABEL_USING_INFORMATION_EXTRACTED_FROM_INSTANCES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LABEL_USING_INFORMATION_EXTRACTED_FROM_INSTANCES) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnlimitedText LABEL_TEXT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LABEL_TEXT))
                {
                    UnlimitedText newOb = new UnlimitedText { Tag = new Tag { Id = TagHelper.LABEL_TEXT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LABEL_TEXT) as UnlimitedText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString LABEL_STYLE_SELECTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LABEL_STYLE_SELECTION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.LABEL_STYLE_SELECTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LABEL_STYLE_SELECTION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongText MEDIA_DISPOSITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MEDIA_DISPOSITION))
                {
                    LongText newOb = new LongText { Tag = new Tag { Id = TagHelper.MEDIA_DISPOSITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MEDIA_DISPOSITION) as LongText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongText BARCODE_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BARCODE_VALUE))
                {
                    LongText newOb = new LongText { Tag = new Tag { Id = TagHelper.BARCODE_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BARCODE_VALUE) as LongText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString BARCODE_SYMBOLOGY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BARCODE_SYMBOLOGY))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.BARCODE_SYMBOLOGY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BARCODE_SYMBOLOGY) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString ALLOW_MEDIA_SPLITTING
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ALLOW_MEDIA_SPLITTING))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.ALLOW_MEDIA_SPLITTING }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ALLOW_MEDIA_SPLITTING) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString INCLUDE_NON_DICOMOBJECTS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INCLUDE_NON_DICOMOBJECTS))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.INCLUDE_NON_DICOMOBJECTS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INCLUDE_NON_DICOMOBJECTS) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString INCLUDE_DISPLAY_APPLICATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INCLUDE_DISPLAY_APPLICATION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.INCLUDE_DISPLAY_APPLICATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INCLUDE_DISPLAY_APPLICATION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString PRESERVE_COMPOSITE_INSTANCES_AFTER_MEDIA_CREATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRESERVE_COMPOSITE_INSTANCES_AFTER_MEDIA_CREATION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.PRESERVE_COMPOSITE_INSTANCES_AFTER_MEDIA_CREATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRESERVE_COMPOSITE_INSTANCES_AFTER_MEDIA_CREATION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort TOTAL_NUMBER_OF_PIECES_OF_MEDIA_CREATED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TOTAL_NUMBER_OF_PIECES_OF_MEDIA_CREATED))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.TOTAL_NUMBER_OF_PIECES_OF_MEDIA_CREATED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TOTAL_NUMBER_OF_PIECES_OF_MEDIA_CREATED) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString REQUESTED_MEDIA_APPLICATION_PROFILE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REQUESTED_MEDIA_APPLICATION_PROFILE))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.REQUESTED_MEDIA_APPLICATION_PROFILE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REQUESTED_MEDIA_APPLICATION_PROFILE) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_STORAGE_MEDIA_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_STORAGE_MEDIA_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_STORAGE_MEDIA_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_STORAGE_MEDIA_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public AttributeTag FAILURE_ATTRIBUTES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FAILURE_ATTRIBUTES))
                {
                    AttributeTag newOb = new AttributeTag { Tag = new Tag { Id = TagHelper.FAILURE_ATTRIBUTES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FAILURE_ATTRIBUTES) as AttributeTag;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString ALLOW_LOSSY_COMPRESSION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ALLOW_LOSSY_COMPRESSION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.ALLOW_LOSSY_COMPRESSION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ALLOW_LOSSY_COMPRESSION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString REQUEST_PRIORITY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REQUEST_PRIORITY))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.REQUEST_PRIORITY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REQUEST_PRIORITY) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString RTIMAGE_LABEL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RTIMAGE_LABEL))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.RTIMAGE_LABEL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RTIMAGE_LABEL) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString RTIMAGE_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RTIMAGE_NAME))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.RTIMAGE_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RTIMAGE_NAME) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText RTIMAGE_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RTIMAGE_DESCRIPTION))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.RTIMAGE_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RTIMAGE_DESCRIPTION) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString REPORTED_VALUES_ORIGIN
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REPORTED_VALUES_ORIGIN))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.REPORTED_VALUES_ORIGIN }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REPORTED_VALUES_ORIGIN) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString RTIMAGE_PLANE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RTIMAGE_PLANE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.RTIMAGE_PLANE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RTIMAGE_PLANE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString XRAY_IMAGE_RECEPTOR_TRANSLATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.XRAY_IMAGE_RECEPTOR_TRANSLATION))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.XRAY_IMAGE_RECEPTOR_TRANSLATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.XRAY_IMAGE_RECEPTOR_TRANSLATION) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString XRAY_IMAGE_RECEPTOR_ANGLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.XRAY_IMAGE_RECEPTOR_ANGLE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.XRAY_IMAGE_RECEPTOR_ANGLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.XRAY_IMAGE_RECEPTOR_ANGLE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString RTIMAGE_ORIENTATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RTIMAGE_ORIENTATION))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.RTIMAGE_ORIENTATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RTIMAGE_ORIENTATION) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString IMAGE_PLANE_PIXEL_SPACING
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_PLANE_PIXEL_SPACING))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.IMAGE_PLANE_PIXEL_SPACING }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_PLANE_PIXEL_SPACING) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString RTIMAGE_POSITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RTIMAGE_POSITION))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.RTIMAGE_POSITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RTIMAGE_POSITION) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString RADIATION_MACHINE_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RADIATION_MACHINE_NAME))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.RADIATION_MACHINE_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RADIATION_MACHINE_NAME) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString RADIATION_MACHINE_SAD
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RADIATION_MACHINE_SAD))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.RADIATION_MACHINE_SAD }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RADIATION_MACHINE_SAD) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString RADIATION_MACHINE_SSD
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RADIATION_MACHINE_SSD))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.RADIATION_MACHINE_SSD }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RADIATION_MACHINE_SSD) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString RTIMAGE_SID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RTIMAGE_SID))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.RTIMAGE_SID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RTIMAGE_SID) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString SOURCE_TO_REFERENCE_OBJECT_DISTANCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOURCE_TO_REFERENCE_OBJECT_DISTANCE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.SOURCE_TO_REFERENCE_OBJECT_DISTANCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOURCE_TO_REFERENCE_OBJECT_DISTANCE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString FRACTION_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FRACTION_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.FRACTION_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FRACTION_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence EXPOSURE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.EXPOSURE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.EXPOSURE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.EXPOSURE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString METERSET_EXPOSURE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.METERSET_EXPOSURE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.METERSET_EXPOSURE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.METERSET_EXPOSURE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DIAPHRAGM_POSITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DIAPHRAGM_POSITION))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DIAPHRAGM_POSITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DIAPHRAGM_POSITION) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence FLUENCE_MAP_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FLUENCE_MAP_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.FLUENCE_MAP_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FLUENCE_MAP_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString FLUENCE_DATA_SOURCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FLUENCE_DATA_SOURCE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.FLUENCE_DATA_SOURCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FLUENCE_DATA_SOURCE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString FLUENCE_DATA_SCALE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FLUENCE_DATA_SCALE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.FLUENCE_DATA_SCALE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FLUENCE_DATA_SCALE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PRIMARY_FLUENCE_MODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRIMARY_FLUENCE_MODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PRIMARY_FLUENCE_MODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRIMARY_FLUENCE_MODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString FLUENCE_MODE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FLUENCE_MODE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.FLUENCE_MODE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FLUENCE_MODE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString FLUENCE_MODE_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FLUENCE_MODE_ID))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.FLUENCE_MODE_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FLUENCE_MODE_ID) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString DVHTYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DVHTYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.DVHTYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DVHTYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString DOSE_UNITS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DOSE_UNITS))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.DOSE_UNITS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DOSE_UNITS) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString DOSE_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DOSE_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.DOSE_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DOSE_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString DOSE_COMMENT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DOSE_COMMENT))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.DOSE_COMMENT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DOSE_COMMENT) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString NORMALIZATION_POINT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NORMALIZATION_POINT))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.NORMALIZATION_POINT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NORMALIZATION_POINT) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString DOSE_SUMMATION_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DOSE_SUMMATION_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.DOSE_SUMMATION_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DOSE_SUMMATION_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString GRID_FRAME_OFFSET_VECTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GRID_FRAME_OFFSET_VECTOR))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.GRID_FRAME_OFFSET_VECTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GRID_FRAME_OFFSET_VECTOR) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DOSE_GRID_SCALING
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DOSE_GRID_SCALING))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DOSE_GRID_SCALING }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DOSE_GRID_SCALING) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence RTDOSE_ROISEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RTDOSE_ROISEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.RTDOSE_ROISEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RTDOSE_ROISEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DOSE_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DOSE_VALUE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DOSE_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DOSE_VALUE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString TISSUE_HETEROGENEITY_CORRECTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TISSUE_HETEROGENEITY_CORRECTION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.TISSUE_HETEROGENEITY_CORRECTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TISSUE_HETEROGENEITY_CORRECTION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DVHNORMALIZATION_POINT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DVHNORMALIZATION_POINT))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DVHNORMALIZATION_POINT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DVHNORMALIZATION_POINT) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DVHNORMALIZATION_DOSE_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DVHNORMALIZATION_DOSE_VALUE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DVHNORMALIZATION_DOSE_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DVHNORMALIZATION_DOSE_VALUE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence DVHSEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DVHSEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.DVHSEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DVHSEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DVHDOSE_SCALING
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DVHDOSE_SCALING))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DVHDOSE_SCALING }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DVHDOSE_SCALING) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString DVHVOLUME_UNITS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DVHVOLUME_UNITS))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.DVHVOLUME_UNITS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DVHVOLUME_UNITS) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString DVHNUMBER_OF_BINS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DVHNUMBER_OF_BINS))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.DVHNUMBER_OF_BINS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DVHNUMBER_OF_BINS) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DVHDATA
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DVHDATA))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DVHDATA }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DVHDATA) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence DVHREFERENCED_ROISEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DVHREFERENCED_ROISEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.DVHREFERENCED_ROISEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DVHREFERENCED_ROISEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString DVHROICONTRIBUTION_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DVHROICONTRIBUTION_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.DVHROICONTRIBUTION_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DVHROICONTRIBUTION_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DVHMINIMUM_DOSE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DVHMINIMUM_DOSE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DVHMINIMUM_DOSE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DVHMINIMUM_DOSE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DVHMAXIMUM_DOSE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DVHMAXIMUM_DOSE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DVHMAXIMUM_DOSE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DVHMAXIMUM_DOSE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DVHMEAN_DOSE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DVHMEAN_DOSE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DVHMEAN_DOSE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DVHMEAN_DOSE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString STRUCTURE_SET_LABEL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STRUCTURE_SET_LABEL))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.STRUCTURE_SET_LABEL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STRUCTURE_SET_LABEL) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString STRUCTURE_SET_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STRUCTURE_SET_NAME))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.STRUCTURE_SET_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STRUCTURE_SET_NAME) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText STRUCTURE_SET_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STRUCTURE_SET_DESCRIPTION))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.STRUCTURE_SET_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STRUCTURE_SET_DESCRIPTION) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateVR STRUCTURE_SET_DATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STRUCTURE_SET_DATE))
                {
                    DateVR newOb = new DateVR { Tag = new Tag { Id = TagHelper.STRUCTURE_SET_DATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STRUCTURE_SET_DATE) as DateVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR STRUCTURE_SET_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STRUCTURE_SET_TIME))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.STRUCTURE_SET_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STRUCTURE_SET_TIME) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_FRAME_OF_REFERENCE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_FRAME_OF_REFERENCE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_FRAME_OF_REFERENCE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_FRAME_OF_REFERENCE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence RTREFERENCED_STUDY_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RTREFERENCED_STUDY_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.RTREFERENCED_STUDY_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RTREFERENCED_STUDY_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence RTREFERENCED_SERIES_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RTREFERENCED_SERIES_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.RTREFERENCED_SERIES_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RTREFERENCED_SERIES_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CONTOUR_IMAGE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTOUR_IMAGE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CONTOUR_IMAGE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTOUR_IMAGE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence STRUCTURE_SET_ROISEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.STRUCTURE_SET_ROISEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.STRUCTURE_SET_ROISEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.STRUCTURE_SET_ROISEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString ROINUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ROINUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.ROINUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ROINUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier REFERENCED_FRAME_OF_REFERENCE_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_FRAME_OF_REFERENCE_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.REFERENCED_FRAME_OF_REFERENCE_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_FRAME_OF_REFERENCE_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString ROINAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ROINAME))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.ROINAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ROINAME) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText ROIDESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ROIDESCRIPTION))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.ROIDESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ROIDESCRIPTION) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString ROIDISPLAY_COLOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ROIDISPLAY_COLOR))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.ROIDISPLAY_COLOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ROIDISPLAY_COLOR) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString ROIVOLUME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ROIVOLUME))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.ROIVOLUME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ROIVOLUME) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence RTRELATED_ROISEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RTRELATED_ROISEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.RTRELATED_ROISEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RTRELATED_ROISEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString RTROIRELATIONSHIP
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RTROIRELATIONSHIP))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.RTROIRELATIONSHIP }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RTROIRELATIONSHIP) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString ROIGENERATION_ALGORITHM
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ROIGENERATION_ALGORITHM))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.ROIGENERATION_ALGORITHM }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ROIGENERATION_ALGORITHM) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString ROIGENERATION_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ROIGENERATION_DESCRIPTION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.ROIGENERATION_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ROIGENERATION_DESCRIPTION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ROICONTOUR_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ROICONTOUR_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ROICONTOUR_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ROICONTOUR_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CONTOUR_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTOUR_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CONTOUR_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTOUR_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString CONTOUR_GEOMETRIC_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTOUR_GEOMETRIC_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.CONTOUR_GEOMETRIC_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTOUR_GEOMETRIC_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString CONTOUR_SLAB_THICKNESS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTOUR_SLAB_THICKNESS))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.CONTOUR_SLAB_THICKNESS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTOUR_SLAB_THICKNESS) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString CONTOUR_OFFSET_VECTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTOUR_OFFSET_VECTOR))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.CONTOUR_OFFSET_VECTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTOUR_OFFSET_VECTOR) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString NUMBER_OF_CONTOUR_POINTS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_CONTOUR_POINTS))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.NUMBER_OF_CONTOUR_POINTS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_CONTOUR_POINTS) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString CONTOUR_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTOUR_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.CONTOUR_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTOUR_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString ATTACHED_CONTOURS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ATTACHED_CONTOURS))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.ATTACHED_CONTOURS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ATTACHED_CONTOURS) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString CONTOUR_DATA
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTOUR_DATA))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.CONTOUR_DATA }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTOUR_DATA) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence RTROIOBSERVATIONS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RTROIOBSERVATIONS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.RTROIOBSERVATIONS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RTROIOBSERVATIONS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString OBSERVATION_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OBSERVATION_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.OBSERVATION_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OBSERVATION_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString REFERENCED_ROINUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_ROINUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.REFERENCED_ROINUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_ROINUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString ROIOBSERVATION_LABEL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ROIOBSERVATION_LABEL))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.ROIOBSERVATION_LABEL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ROIOBSERVATION_LABEL) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence RTROIIDENTIFICATION_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RTROIIDENTIFICATION_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.RTROIIDENTIFICATION_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RTROIIDENTIFICATION_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText ROIOBSERVATION_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ROIOBSERVATION_DESCRIPTION))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.ROIOBSERVATION_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ROIOBSERVATION_DESCRIPTION) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence RELATED_RTROIOBSERVATIONS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RELATED_RTROIOBSERVATIONS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.RELATED_RTROIOBSERVATIONS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RELATED_RTROIOBSERVATIONS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString RTROIINTERPRETED_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RTROIINTERPRETED_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.RTROIINTERPRETED_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RTROIINTERPRETED_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public PersonsName ROIINTERPRETER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ROIINTERPRETER))
                {
                    PersonsName newOb = new PersonsName { Tag = new Tag { Id = TagHelper.ROIINTERPRETER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ROIINTERPRETER) as PersonsName;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ROIPHYSICAL_PROPERTIES_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ROIPHYSICAL_PROPERTIES_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ROIPHYSICAL_PROPERTIES_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ROIPHYSICAL_PROPERTIES_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString ROIPHYSICAL_PROPERTY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ROIPHYSICAL_PROPERTY))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.ROIPHYSICAL_PROPERTY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ROIPHYSICAL_PROPERTY) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString ROIPHYSICAL_PROPERTY_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ROIPHYSICAL_PROPERTY_VALUE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.ROIPHYSICAL_PROPERTY_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ROIPHYSICAL_PROPERTY_VALUE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ROIELEMENTAL_COMPOSITION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ROIELEMENTAL_COMPOSITION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ROIELEMENTAL_COMPOSITION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ROIELEMENTAL_COMPOSITION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort ROIELEMENTAL_COMPOSITION_ATOMIC_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ROIELEMENTAL_COMPOSITION_ATOMIC_NUMBER))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.ROIELEMENTAL_COMPOSITION_ATOMIC_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ROIELEMENTAL_COMPOSITION_ATOMIC_NUMBER) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle ROIELEMENTAL_COMPOSITION_ATOMIC_MASS_FRACTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ROIELEMENTAL_COMPOSITION_ATOMIC_MASS_FRACTION))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.ROIELEMENTAL_COMPOSITION_ATOMIC_MASS_FRACTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ROIELEMENTAL_COMPOSITION_ATOMIC_MASS_FRACTION) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence FRAME_OF_REFERENCE_RELATIONSHIP_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FRAME_OF_REFERENCE_RELATIONSHIP_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.FRAME_OF_REFERENCE_RELATIONSHIP_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FRAME_OF_REFERENCE_RELATIONSHIP_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier RELATED_FRAME_OF_REFERENCE_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RELATED_FRAME_OF_REFERENCE_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.RELATED_FRAME_OF_REFERENCE_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RELATED_FRAME_OF_REFERENCE_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString FRAME_OF_REFERENCE_TRANSFORMATION_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FRAME_OF_REFERENCE_TRANSFORMATION_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.FRAME_OF_REFERENCE_TRANSFORMATION_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FRAME_OF_REFERENCE_TRANSFORMATION_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString FRAME_OF_REFERENCE_TRANSFORMATION_MATRIX
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FRAME_OF_REFERENCE_TRANSFORMATION_MATRIX))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.FRAME_OF_REFERENCE_TRANSFORMATION_MATRIX }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FRAME_OF_REFERENCE_TRANSFORMATION_MATRIX) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString FRAME_OF_REFERENCE_TRANSFORMATION_COMMENT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FRAME_OF_REFERENCE_TRANSFORMATION_COMMENT))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.FRAME_OF_REFERENCE_TRANSFORMATION_COMMENT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FRAME_OF_REFERENCE_TRANSFORMATION_COMMENT) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence MEASURED_DOSE_REFERENCE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MEASURED_DOSE_REFERENCE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.MEASURED_DOSE_REFERENCE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MEASURED_DOSE_REFERENCE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText MEASURED_DOSE_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MEASURED_DOSE_DESCRIPTION))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.MEASURED_DOSE_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MEASURED_DOSE_DESCRIPTION) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString MEASURED_DOSE_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MEASURED_DOSE_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.MEASURED_DOSE_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MEASURED_DOSE_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString MEASURED_DOSE_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MEASURED_DOSE_VALUE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.MEASURED_DOSE_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MEASURED_DOSE_VALUE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence TREATMENT_SESSION_BEAM_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TREATMENT_SESSION_BEAM_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.TREATMENT_SESSION_BEAM_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TREATMENT_SESSION_BEAM_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence TREATMENT_SESSION_ION_BEAM_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TREATMENT_SESSION_ION_BEAM_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.TREATMENT_SESSION_ION_BEAM_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TREATMENT_SESSION_ION_BEAM_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString CURRENT_FRACTION_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CURRENT_FRACTION_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.CURRENT_FRACTION_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CURRENT_FRACTION_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateVR TREATMENT_CONTROL_POINT_DATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TREATMENT_CONTROL_POINT_DATE))
                {
                    DateVR newOb = new DateVR { Tag = new Tag { Id = TagHelper.TREATMENT_CONTROL_POINT_DATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TREATMENT_CONTROL_POINT_DATE) as DateVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR TREATMENT_CONTROL_POINT_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TREATMENT_CONTROL_POINT_TIME))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.TREATMENT_CONTROL_POINT_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TREATMENT_CONTROL_POINT_TIME) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString TREATMENT_TERMINATION_STATUS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TREATMENT_TERMINATION_STATUS))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.TREATMENT_TERMINATION_STATUS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TREATMENT_TERMINATION_STATUS) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString TREATMENT_TERMINATION_CODE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TREATMENT_TERMINATION_CODE))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.TREATMENT_TERMINATION_CODE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TREATMENT_TERMINATION_CODE) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString TREATMENT_VERIFICATION_STATUS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TREATMENT_VERIFICATION_STATUS))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.TREATMENT_VERIFICATION_STATUS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TREATMENT_VERIFICATION_STATUS) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_TREATMENT_RECORD_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_TREATMENT_RECORD_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_TREATMENT_RECORD_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_TREATMENT_RECORD_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString SPECIFIED_PRIMARY_METERSET
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SPECIFIED_PRIMARY_METERSET))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.SPECIFIED_PRIMARY_METERSET }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SPECIFIED_PRIMARY_METERSET) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString SPECIFIED_SECONDARY_METERSET
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SPECIFIED_SECONDARY_METERSET))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.SPECIFIED_SECONDARY_METERSET }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SPECIFIED_SECONDARY_METERSET) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DELIVERED_PRIMARY_METERSET
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DELIVERED_PRIMARY_METERSET))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DELIVERED_PRIMARY_METERSET }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DELIVERED_PRIMARY_METERSET) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DELIVERED_SECONDARY_METERSET
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DELIVERED_SECONDARY_METERSET))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DELIVERED_SECONDARY_METERSET }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DELIVERED_SECONDARY_METERSET) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString SPECIFIED_TREATMENT_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SPECIFIED_TREATMENT_TIME))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.SPECIFIED_TREATMENT_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SPECIFIED_TREATMENT_TIME) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DELIVERED_TREATMENT_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DELIVERED_TREATMENT_TIME))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DELIVERED_TREATMENT_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DELIVERED_TREATMENT_TIME) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CONTROL_POINT_DELIVERY_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTROL_POINT_DELIVERY_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CONTROL_POINT_DELIVERY_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTROL_POINT_DELIVERY_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ION_CONTROL_POINT_DELIVERY_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ION_CONTROL_POINT_DELIVERY_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ION_CONTROL_POINT_DELIVERY_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ION_CONTROL_POINT_DELIVERY_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString SPECIFIED_METERSET
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SPECIFIED_METERSET))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.SPECIFIED_METERSET }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SPECIFIED_METERSET) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DELIVERED_METERSET
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DELIVERED_METERSET))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DELIVERED_METERSET }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DELIVERED_METERSET) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle METERSET_RATE_SET
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.METERSET_RATE_SET))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.METERSET_RATE_SET }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.METERSET_RATE_SET) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle METERSET_RATE_DELIVERED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.METERSET_RATE_DELIVERED))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.METERSET_RATE_DELIVERED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.METERSET_RATE_DELIVERED) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle SCAN_SPOT_METERSETS_DELIVERED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCAN_SPOT_METERSETS_DELIVERED))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.SCAN_SPOT_METERSETS_DELIVERED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCAN_SPOT_METERSETS_DELIVERED) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DOSE_RATE_DELIVERED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DOSE_RATE_DELIVERED))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DOSE_RATE_DELIVERED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DOSE_RATE_DELIVERED) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence TREATMENT_SUMMARY_CALCULATED_DOSE_REFERENCE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TREATMENT_SUMMARY_CALCULATED_DOSE_REFERENCE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.TREATMENT_SUMMARY_CALCULATED_DOSE_REFERENCE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TREATMENT_SUMMARY_CALCULATED_DOSE_REFERENCE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString CUMULATIVE_DOSE_TO_DOSE_REFERENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CUMULATIVE_DOSE_TO_DOSE_REFERENCE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.CUMULATIVE_DOSE_TO_DOSE_REFERENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CUMULATIVE_DOSE_TO_DOSE_REFERENCE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateVR FIRST_TREATMENT_DATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FIRST_TREATMENT_DATE))
                {
                    DateVR newOb = new DateVR { Tag = new Tag { Id = TagHelper.FIRST_TREATMENT_DATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FIRST_TREATMENT_DATE) as DateVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateVR MOST_RECENT_TREATMENT_DATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MOST_RECENT_TREATMENT_DATE))
                {
                    DateVR newOb = new DateVR { Tag = new Tag { Id = TagHelper.MOST_RECENT_TREATMENT_DATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MOST_RECENT_TREATMENT_DATE) as DateVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString NUMBER_OF_FRACTIONS_DELIVERED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_FRACTIONS_DELIVERED))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.NUMBER_OF_FRACTIONS_DELIVERED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_FRACTIONS_DELIVERED) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence OVERRIDE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERRIDE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.OVERRIDE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERRIDE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public AttributeTag PARAMETER_SEQUENCE_POINTER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PARAMETER_SEQUENCE_POINTER))
                {
                    AttributeTag newOb = new AttributeTag { Tag = new Tag { Id = TagHelper.PARAMETER_SEQUENCE_POINTER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PARAMETER_SEQUENCE_POINTER) as AttributeTag;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public AttributeTag OVERRIDE_PARAMETER_POINTER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERRIDE_PARAMETER_POINTER))
                {
                    AttributeTag newOb = new AttributeTag { Tag = new Tag { Id = TagHelper.OVERRIDE_PARAMETER_POINTER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERRIDE_PARAMETER_POINTER) as AttributeTag;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString PARAMETER_ITEM_INDEX
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PARAMETER_ITEM_INDEX))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.PARAMETER_ITEM_INDEX }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PARAMETER_ITEM_INDEX) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString MEASURED_DOSE_REFERENCE_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MEASURED_DOSE_REFERENCE_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.MEASURED_DOSE_REFERENCE_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MEASURED_DOSE_REFERENCE_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public AttributeTag PARAMETER_POINTER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PARAMETER_POINTER))
                {
                    AttributeTag newOb = new AttributeTag { Tag = new Tag { Id = TagHelper.PARAMETER_POINTER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PARAMETER_POINTER) as AttributeTag;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText OVERRIDE_REASON
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERRIDE_REASON))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.OVERRIDE_REASON }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERRIDE_REASON) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CORRECTED_PARAMETER_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CORRECTED_PARAMETER_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CORRECTED_PARAMETER_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CORRECTED_PARAMETER_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle CORRECTION_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CORRECTION_VALUE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.CORRECTION_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CORRECTION_VALUE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CALCULATED_DOSE_REFERENCE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CALCULATED_DOSE_REFERENCE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CALCULATED_DOSE_REFERENCE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CALCULATED_DOSE_REFERENCE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString CALCULATED_DOSE_REFERENCE_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CALCULATED_DOSE_REFERENCE_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.CALCULATED_DOSE_REFERENCE_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CALCULATED_DOSE_REFERENCE_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText CALCULATED_DOSE_REFERENCE_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CALCULATED_DOSE_REFERENCE_DESCRIPTION))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.CALCULATED_DOSE_REFERENCE_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CALCULATED_DOSE_REFERENCE_DESCRIPTION) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString CALCULATED_DOSE_REFERENCE_DOSE_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CALCULATED_DOSE_REFERENCE_DOSE_VALUE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.CALCULATED_DOSE_REFERENCE_DOSE_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CALCULATED_DOSE_REFERENCE_DOSE_VALUE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString START_METERSET
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.START_METERSET))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.START_METERSET }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.START_METERSET) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString END_METERSET
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.END_METERSET))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.END_METERSET }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.END_METERSET) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_MEASURED_DOSE_REFERENCE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_MEASURED_DOSE_REFERENCE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_MEASURED_DOSE_REFERENCE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_MEASURED_DOSE_REFERENCE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString REFERENCED_MEASURED_DOSE_REFERENCE_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_MEASURED_DOSE_REFERENCE_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.REFERENCED_MEASURED_DOSE_REFERENCE_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_MEASURED_DOSE_REFERENCE_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_CALCULATED_DOSE_REFERENCE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_CALCULATED_DOSE_REFERENCE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_CALCULATED_DOSE_REFERENCE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_CALCULATED_DOSE_REFERENCE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString REFERENCED_CALCULATED_DOSE_REFERENCE_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_CALCULATED_DOSE_REFERENCE_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.REFERENCED_CALCULATED_DOSE_REFERENCE_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_CALCULATED_DOSE_REFERENCE_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence BEAM_LIMITING_DEVICE_LEAF_PAIRS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BEAM_LIMITING_DEVICE_LEAF_PAIRS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.BEAM_LIMITING_DEVICE_LEAF_PAIRS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BEAM_LIMITING_DEVICE_LEAF_PAIRS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence RECORDED_WEDGE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RECORDED_WEDGE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.RECORDED_WEDGE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RECORDED_WEDGE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence RECORDED_COMPENSATOR_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RECORDED_COMPENSATOR_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.RECORDED_COMPENSATOR_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RECORDED_COMPENSATOR_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence RECORDED_BLOCK_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RECORDED_BLOCK_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.RECORDED_BLOCK_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RECORDED_BLOCK_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence TREATMENT_SUMMARY_MEASURED_DOSE_REFERENCE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TREATMENT_SUMMARY_MEASURED_DOSE_REFERENCE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.TREATMENT_SUMMARY_MEASURED_DOSE_REFERENCE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TREATMENT_SUMMARY_MEASURED_DOSE_REFERENCE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence RECORDED_SNOUT_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RECORDED_SNOUT_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.RECORDED_SNOUT_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RECORDED_SNOUT_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence RECORDED_RANGE_SHIFTER_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RECORDED_RANGE_SHIFTER_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.RECORDED_RANGE_SHIFTER_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RECORDED_RANGE_SHIFTER_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence RECORDED_LATERAL_SPREADING_DEVICE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RECORDED_LATERAL_SPREADING_DEVICE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.RECORDED_LATERAL_SPREADING_DEVICE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RECORDED_LATERAL_SPREADING_DEVICE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence RECORDED_RANGE_MODULATOR_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RECORDED_RANGE_MODULATOR_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.RECORDED_RANGE_MODULATOR_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RECORDED_RANGE_MODULATOR_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence RECORDED_SOURCE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RECORDED_SOURCE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.RECORDED_SOURCE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RECORDED_SOURCE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString SOURCE_SERIAL_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOURCE_SERIAL_NUMBER))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.SOURCE_SERIAL_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOURCE_SERIAL_NUMBER) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence TREATMENT_SESSION_APPLICATION_SETUP_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TREATMENT_SESSION_APPLICATION_SETUP_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.TREATMENT_SESSION_APPLICATION_SETUP_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TREATMENT_SESSION_APPLICATION_SETUP_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString APPLICATION_SETUP_CHECK
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.APPLICATION_SETUP_CHECK))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.APPLICATION_SETUP_CHECK }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.APPLICATION_SETUP_CHECK) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence RECORDED_BRACHY_ACCESSORY_DEVICE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RECORDED_BRACHY_ACCESSORY_DEVICE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.RECORDED_BRACHY_ACCESSORY_DEVICE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RECORDED_BRACHY_ACCESSORY_DEVICE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString REFERENCED_BRACHY_ACCESSORY_DEVICE_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_BRACHY_ACCESSORY_DEVICE_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.REFERENCED_BRACHY_ACCESSORY_DEVICE_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_BRACHY_ACCESSORY_DEVICE_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence RECORDED_CHANNEL_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RECORDED_CHANNEL_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.RECORDED_CHANNEL_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RECORDED_CHANNEL_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString SPECIFIED_CHANNEL_TOTAL_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SPECIFIED_CHANNEL_TOTAL_TIME))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.SPECIFIED_CHANNEL_TOTAL_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SPECIFIED_CHANNEL_TOTAL_TIME) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DELIVERED_CHANNEL_TOTAL_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DELIVERED_CHANNEL_TOTAL_TIME))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DELIVERED_CHANNEL_TOTAL_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DELIVERED_CHANNEL_TOTAL_TIME) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString SPECIFIED_NUMBER_OF_PULSES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SPECIFIED_NUMBER_OF_PULSES))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.SPECIFIED_NUMBER_OF_PULSES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SPECIFIED_NUMBER_OF_PULSES) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString DELIVERED_NUMBER_OF_PULSES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DELIVERED_NUMBER_OF_PULSES))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.DELIVERED_NUMBER_OF_PULSES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DELIVERED_NUMBER_OF_PULSES) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString SPECIFIED_PULSE_REPETITION_INTERVAL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SPECIFIED_PULSE_REPETITION_INTERVAL))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.SPECIFIED_PULSE_REPETITION_INTERVAL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SPECIFIED_PULSE_REPETITION_INTERVAL) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DELIVERED_PULSE_REPETITION_INTERVAL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DELIVERED_PULSE_REPETITION_INTERVAL))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DELIVERED_PULSE_REPETITION_INTERVAL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DELIVERED_PULSE_REPETITION_INTERVAL) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence RECORDED_SOURCE_APPLICATOR_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RECORDED_SOURCE_APPLICATOR_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.RECORDED_SOURCE_APPLICATOR_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RECORDED_SOURCE_APPLICATOR_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString REFERENCED_SOURCE_APPLICATOR_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_SOURCE_APPLICATOR_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.REFERENCED_SOURCE_APPLICATOR_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_SOURCE_APPLICATOR_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence RECORDED_CHANNEL_SHIELD_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RECORDED_CHANNEL_SHIELD_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.RECORDED_CHANNEL_SHIELD_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RECORDED_CHANNEL_SHIELD_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString REFERENCED_CHANNEL_SHIELD_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_CHANNEL_SHIELD_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.REFERENCED_CHANNEL_SHIELD_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_CHANNEL_SHIELD_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence BRACHY_CONTROL_POINT_DELIVERED_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BRACHY_CONTROL_POINT_DELIVERED_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.BRACHY_CONTROL_POINT_DELIVERED_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BRACHY_CONTROL_POINT_DELIVERED_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateVR SAFE_POSITION_EXIT_DATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SAFE_POSITION_EXIT_DATE))
                {
                    DateVR newOb = new DateVR { Tag = new Tag { Id = TagHelper.SAFE_POSITION_EXIT_DATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SAFE_POSITION_EXIT_DATE) as DateVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR SAFE_POSITION_EXIT_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SAFE_POSITION_EXIT_TIME))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.SAFE_POSITION_EXIT_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SAFE_POSITION_EXIT_TIME) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateVR SAFE_POSITION_RETURN_DATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SAFE_POSITION_RETURN_DATE))
                {
                    DateVR newOb = new DateVR { Tag = new Tag { Id = TagHelper.SAFE_POSITION_RETURN_DATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SAFE_POSITION_RETURN_DATE) as DateVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR SAFE_POSITION_RETURN_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SAFE_POSITION_RETURN_TIME))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.SAFE_POSITION_RETURN_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SAFE_POSITION_RETURN_TIME) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString CURRENT_TREATMENT_STATUS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CURRENT_TREATMENT_STATUS))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.CURRENT_TREATMENT_STATUS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CURRENT_TREATMENT_STATUS) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText TREATMENT_STATUS_COMMENT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TREATMENT_STATUS_COMMENT))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.TREATMENT_STATUS_COMMENT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TREATMENT_STATUS_COMMENT) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence FRACTION_GROUP_SUMMARY_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FRACTION_GROUP_SUMMARY_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.FRACTION_GROUP_SUMMARY_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FRACTION_GROUP_SUMMARY_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString REFERENCED_FRACTION_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_FRACTION_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.REFERENCED_FRACTION_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_FRACTION_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString FRACTION_GROUP_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FRACTION_GROUP_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.FRACTION_GROUP_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FRACTION_GROUP_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString BEAM_STOPPER_POSITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BEAM_STOPPER_POSITION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.BEAM_STOPPER_POSITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BEAM_STOPPER_POSITION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence FRACTION_STATUS_SUMMARY_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FRACTION_STATUS_SUMMARY_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.FRACTION_STATUS_SUMMARY_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FRACTION_STATUS_SUMMARY_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateVR TREATMENT_DATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TREATMENT_DATE))
                {
                    DateVR newOb = new DateVR { Tag = new Tag { Id = TagHelper.TREATMENT_DATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TREATMENT_DATE) as DateVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR TREATMENT_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TREATMENT_TIME))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.TREATMENT_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TREATMENT_TIME) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString RTPLAN_LABEL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RTPLAN_LABEL))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.RTPLAN_LABEL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RTPLAN_LABEL) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString RTPLAN_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RTPLAN_NAME))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.RTPLAN_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RTPLAN_NAME) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText RTPLAN_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RTPLAN_DESCRIPTION))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.RTPLAN_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RTPLAN_DESCRIPTION) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateVR RTPLAN_DATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RTPLAN_DATE))
                {
                    DateVR newOb = new DateVR { Tag = new Tag { Id = TagHelper.RTPLAN_DATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RTPLAN_DATE) as DateVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR RTPLAN_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RTPLAN_TIME))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.RTPLAN_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RTPLAN_TIME) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString TREATMENT_PROTOCOLS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TREATMENT_PROTOCOLS))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.TREATMENT_PROTOCOLS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TREATMENT_PROTOCOLS) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString PLAN_INTENT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PLAN_INTENT))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.PLAN_INTENT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PLAN_INTENT) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString TREATMENT_SITES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TREATMENT_SITES))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.TREATMENT_SITES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TREATMENT_SITES) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString RTPLAN_GEOMETRY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RTPLAN_GEOMETRY))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.RTPLAN_GEOMETRY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RTPLAN_GEOMETRY) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText PRESCRIPTION_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRESCRIPTION_DESCRIPTION))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.PRESCRIPTION_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRESCRIPTION_DESCRIPTION) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence DOSE_REFERENCE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DOSE_REFERENCE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.DOSE_REFERENCE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DOSE_REFERENCE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString DOSE_REFERENCE_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DOSE_REFERENCE_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.DOSE_REFERENCE_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DOSE_REFERENCE_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UniqueIdentifier DOSE_REFERENCE_UID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DOSE_REFERENCE_UID))
                {
                    UniqueIdentifier newOb = new UniqueIdentifier { Tag = new Tag { Id = TagHelper.DOSE_REFERENCE_UID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DOSE_REFERENCE_UID) as UniqueIdentifier;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString DOSE_REFERENCE_STRUCTURE_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DOSE_REFERENCE_STRUCTURE_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.DOSE_REFERENCE_STRUCTURE_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DOSE_REFERENCE_STRUCTURE_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString NOMINAL_BEAM_ENERGY_UNIT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NOMINAL_BEAM_ENERGY_UNIT))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.NOMINAL_BEAM_ENERGY_UNIT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NOMINAL_BEAM_ENERGY_UNIT) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString DOSE_REFERENCE_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DOSE_REFERENCE_DESCRIPTION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.DOSE_REFERENCE_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DOSE_REFERENCE_DESCRIPTION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DOSE_REFERENCE_POINT_COORDINATES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DOSE_REFERENCE_POINT_COORDINATES))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DOSE_REFERENCE_POINT_COORDINATES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DOSE_REFERENCE_POINT_COORDINATES) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString NOMINAL_PRIOR_DOSE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NOMINAL_PRIOR_DOSE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.NOMINAL_PRIOR_DOSE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NOMINAL_PRIOR_DOSE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString DOSE_REFERENCE_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DOSE_REFERENCE_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.DOSE_REFERENCE_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DOSE_REFERENCE_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString CONSTRAINT_WEIGHT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONSTRAINT_WEIGHT))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.CONSTRAINT_WEIGHT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONSTRAINT_WEIGHT) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DELIVERY_WARNING_DOSE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DELIVERY_WARNING_DOSE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DELIVERY_WARNING_DOSE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DELIVERY_WARNING_DOSE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DELIVERY_MAXIMUM_DOSE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DELIVERY_MAXIMUM_DOSE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DELIVERY_MAXIMUM_DOSE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DELIVERY_MAXIMUM_DOSE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString TARGET_MINIMUM_DOSE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TARGET_MINIMUM_DOSE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.TARGET_MINIMUM_DOSE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TARGET_MINIMUM_DOSE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString TARGET_PRESCRIPTION_DOSE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TARGET_PRESCRIPTION_DOSE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.TARGET_PRESCRIPTION_DOSE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TARGET_PRESCRIPTION_DOSE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString TARGET_MAXIMUM_DOSE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TARGET_MAXIMUM_DOSE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.TARGET_MAXIMUM_DOSE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TARGET_MAXIMUM_DOSE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString TARGET_UNDERDOSE_VOLUME_FRACTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TARGET_UNDERDOSE_VOLUME_FRACTION))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.TARGET_UNDERDOSE_VOLUME_FRACTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TARGET_UNDERDOSE_VOLUME_FRACTION) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString ORGAN_AT_RISK_FULL_VOLUME_DOSE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ORGAN_AT_RISK_FULL_VOLUME_DOSE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.ORGAN_AT_RISK_FULL_VOLUME_DOSE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ORGAN_AT_RISK_FULL_VOLUME_DOSE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString ORGAN_AT_RISK_LIMIT_DOSE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ORGAN_AT_RISK_LIMIT_DOSE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.ORGAN_AT_RISK_LIMIT_DOSE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ORGAN_AT_RISK_LIMIT_DOSE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString ORGAN_AT_RISK_MAXIMUM_DOSE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ORGAN_AT_RISK_MAXIMUM_DOSE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.ORGAN_AT_RISK_MAXIMUM_DOSE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ORGAN_AT_RISK_MAXIMUM_DOSE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString ORGAN_AT_RISK_OVERDOSE_VOLUME_FRACTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ORGAN_AT_RISK_OVERDOSE_VOLUME_FRACTION))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.ORGAN_AT_RISK_OVERDOSE_VOLUME_FRACTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ORGAN_AT_RISK_OVERDOSE_VOLUME_FRACTION) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence TOLERANCE_TABLE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TOLERANCE_TABLE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.TOLERANCE_TABLE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TOLERANCE_TABLE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString TOLERANCE_TABLE_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TOLERANCE_TABLE_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.TOLERANCE_TABLE_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TOLERANCE_TABLE_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString TOLERANCE_TABLE_LABEL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TOLERANCE_TABLE_LABEL))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.TOLERANCE_TABLE_LABEL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TOLERANCE_TABLE_LABEL) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString GANTRY_ANGLE_TOLERANCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GANTRY_ANGLE_TOLERANCE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.GANTRY_ANGLE_TOLERANCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GANTRY_ANGLE_TOLERANCE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString BEAM_LIMITING_DEVICE_ANGLE_TOLERANCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BEAM_LIMITING_DEVICE_ANGLE_TOLERANCE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.BEAM_LIMITING_DEVICE_ANGLE_TOLERANCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BEAM_LIMITING_DEVICE_ANGLE_TOLERANCE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence BEAM_LIMITING_DEVICE_TOLERANCE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BEAM_LIMITING_DEVICE_TOLERANCE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.BEAM_LIMITING_DEVICE_TOLERANCE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BEAM_LIMITING_DEVICE_TOLERANCE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString BEAM_LIMITING_DEVICE_POSITION_TOLERANCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BEAM_LIMITING_DEVICE_POSITION_TOLERANCE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.BEAM_LIMITING_DEVICE_POSITION_TOLERANCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BEAM_LIMITING_DEVICE_POSITION_TOLERANCE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle SNOUT_POSITION_TOLERANCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SNOUT_POSITION_TOLERANCE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.SNOUT_POSITION_TOLERANCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SNOUT_POSITION_TOLERANCE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString PATIENT_SUPPORT_ANGLE_TOLERANCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_SUPPORT_ANGLE_TOLERANCE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.PATIENT_SUPPORT_ANGLE_TOLERANCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_SUPPORT_ANGLE_TOLERANCE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString TABLE_TOP_ECCENTRIC_ANGLE_TOLERANCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TABLE_TOP_ECCENTRIC_ANGLE_TOLERANCE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.TABLE_TOP_ECCENTRIC_ANGLE_TOLERANCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TABLE_TOP_ECCENTRIC_ANGLE_TOLERANCE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle TABLE_TOP_PITCH_ANGLE_TOLERANCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TABLE_TOP_PITCH_ANGLE_TOLERANCE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.TABLE_TOP_PITCH_ANGLE_TOLERANCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TABLE_TOP_PITCH_ANGLE_TOLERANCE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle TABLE_TOP_ROLL_ANGLE_TOLERANCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TABLE_TOP_ROLL_ANGLE_TOLERANCE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.TABLE_TOP_ROLL_ANGLE_TOLERANCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TABLE_TOP_ROLL_ANGLE_TOLERANCE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString TABLE_TOP_VERTICAL_POSITION_TOLERANCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TABLE_TOP_VERTICAL_POSITION_TOLERANCE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.TABLE_TOP_VERTICAL_POSITION_TOLERANCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TABLE_TOP_VERTICAL_POSITION_TOLERANCE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString TABLE_TOP_LONGITUDINAL_POSITION_TOLERANCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TABLE_TOP_LONGITUDINAL_POSITION_TOLERANCE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.TABLE_TOP_LONGITUDINAL_POSITION_TOLERANCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TABLE_TOP_LONGITUDINAL_POSITION_TOLERANCE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString TABLE_TOP_LATERAL_POSITION_TOLERANCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TABLE_TOP_LATERAL_POSITION_TOLERANCE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.TABLE_TOP_LATERAL_POSITION_TOLERANCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TABLE_TOP_LATERAL_POSITION_TOLERANCE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString RTPLAN_RELATIONSHIP
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RTPLAN_RELATIONSHIP))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.RTPLAN_RELATIONSHIP }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RTPLAN_RELATIONSHIP) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence FRACTION_GROUP_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FRACTION_GROUP_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.FRACTION_GROUP_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FRACTION_GROUP_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString FRACTION_GROUP_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FRACTION_GROUP_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.FRACTION_GROUP_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FRACTION_GROUP_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString FRACTION_GROUP_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FRACTION_GROUP_DESCRIPTION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.FRACTION_GROUP_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FRACTION_GROUP_DESCRIPTION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString NUMBER_OF_FRACTIONS_PLANNED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_FRACTIONS_PLANNED))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.NUMBER_OF_FRACTIONS_PLANNED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_FRACTIONS_PLANNED) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString NUMBER_OF_FRACTION_PATTERN_DIGITS_PER_DAY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_FRACTION_PATTERN_DIGITS_PER_DAY))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.NUMBER_OF_FRACTION_PATTERN_DIGITS_PER_DAY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_FRACTION_PATTERN_DIGITS_PER_DAY) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString REPEAT_FRACTION_CYCLE_LENGTH
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REPEAT_FRACTION_CYCLE_LENGTH))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.REPEAT_FRACTION_CYCLE_LENGTH }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REPEAT_FRACTION_CYCLE_LENGTH) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongText FRACTION_PATTERN
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FRACTION_PATTERN))
                {
                    LongText newOb = new LongText { Tag = new Tag { Id = TagHelper.FRACTION_PATTERN }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FRACTION_PATTERN) as LongText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString NUMBER_OF_BEAMS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_BEAMS))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.NUMBER_OF_BEAMS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_BEAMS) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString BEAM_DOSE_SPECIFICATION_POINT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BEAM_DOSE_SPECIFICATION_POINT))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.BEAM_DOSE_SPECIFICATION_POINT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BEAM_DOSE_SPECIFICATION_POINT) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString BEAM_DOSE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BEAM_DOSE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.BEAM_DOSE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BEAM_DOSE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString BEAM_METERSET
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BEAM_METERSET))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.BEAM_METERSET }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BEAM_METERSET) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle BEAM_DOSE_POINT_DEPTH
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BEAM_DOSE_POINT_DEPTH))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.BEAM_DOSE_POINT_DEPTH }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BEAM_DOSE_POINT_DEPTH) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle BEAM_DOSE_POINT_EQUIVALENT_DEPTH
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BEAM_DOSE_POINT_EQUIVALENT_DEPTH))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.BEAM_DOSE_POINT_EQUIVALENT_DEPTH }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BEAM_DOSE_POINT_EQUIVALENT_DEPTH) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle BEAM_DOSE_POINT_SSD
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BEAM_DOSE_POINT_SSD))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.BEAM_DOSE_POINT_SSD }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BEAM_DOSE_POINT_SSD) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString NUMBER_OF_BRACHY_APPLICATION_SETUPS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_BRACHY_APPLICATION_SETUPS))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.NUMBER_OF_BRACHY_APPLICATION_SETUPS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_BRACHY_APPLICATION_SETUPS) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString BRACHY_APPLICATION_SETUP_DOSE_SPECIFICATION_POINT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BRACHY_APPLICATION_SETUP_DOSE_SPECIFICATION_POINT))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.BRACHY_APPLICATION_SETUP_DOSE_SPECIFICATION_POINT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BRACHY_APPLICATION_SETUP_DOSE_SPECIFICATION_POINT) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString BRACHY_APPLICATION_SETUP_DOSE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BRACHY_APPLICATION_SETUP_DOSE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.BRACHY_APPLICATION_SETUP_DOSE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BRACHY_APPLICATION_SETUP_DOSE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence BEAM_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BEAM_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.BEAM_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BEAM_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString TREATMENT_MACHINE_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TREATMENT_MACHINE_NAME))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.TREATMENT_MACHINE_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TREATMENT_MACHINE_NAME) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString PRIMARY_DOSIMETER_UNIT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PRIMARY_DOSIMETER_UNIT))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.PRIMARY_DOSIMETER_UNIT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PRIMARY_DOSIMETER_UNIT) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString SOURCE_AXIS_DISTANCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOURCE_AXIS_DISTANCE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.SOURCE_AXIS_DISTANCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOURCE_AXIS_DISTANCE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence BEAM_LIMITING_DEVICE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BEAM_LIMITING_DEVICE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.BEAM_LIMITING_DEVICE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BEAM_LIMITING_DEVICE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString RTBEAM_LIMITING_DEVICE_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RTBEAM_LIMITING_DEVICE_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.RTBEAM_LIMITING_DEVICE_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RTBEAM_LIMITING_DEVICE_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString SOURCE_TO_BEAM_LIMITING_DEVICE_DISTANCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOURCE_TO_BEAM_LIMITING_DEVICE_DISTANCE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.SOURCE_TO_BEAM_LIMITING_DEVICE_DISTANCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOURCE_TO_BEAM_LIMITING_DEVICE_DISTANCE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle ISOCENTER_TO_BEAM_LIMITING_DEVICE_DISTANCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ISOCENTER_TO_BEAM_LIMITING_DEVICE_DISTANCE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.ISOCENTER_TO_BEAM_LIMITING_DEVICE_DISTANCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ISOCENTER_TO_BEAM_LIMITING_DEVICE_DISTANCE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString NUMBER_OF_LEAF_JAW_PAIRS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_LEAF_JAW_PAIRS))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.NUMBER_OF_LEAF_JAW_PAIRS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_LEAF_JAW_PAIRS) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString LEAF_POSITION_BOUNDARIES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LEAF_POSITION_BOUNDARIES))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.LEAF_POSITION_BOUNDARIES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LEAF_POSITION_BOUNDARIES) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString BEAM_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BEAM_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.BEAM_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BEAM_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString BEAM_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BEAM_NAME))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.BEAM_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BEAM_NAME) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText BEAM_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BEAM_DESCRIPTION))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.BEAM_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BEAM_DESCRIPTION) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString BEAM_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BEAM_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.BEAM_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BEAM_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString RADIATION_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RADIATION_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.RADIATION_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RADIATION_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString HIGH_DOSE_TECHNIQUE_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.HIGH_DOSE_TECHNIQUE_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.HIGH_DOSE_TECHNIQUE_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.HIGH_DOSE_TECHNIQUE_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString REFERENCE_IMAGE_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCE_IMAGE_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.REFERENCE_IMAGE_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCE_IMAGE_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PLANNED_VERIFICATION_IMAGE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PLANNED_VERIFICATION_IMAGE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PLANNED_VERIFICATION_IMAGE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PLANNED_VERIFICATION_IMAGE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString IMAGING_DEVICE_SPECIFIC_ACQUISITION_PARAMETERS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGING_DEVICE_SPECIFIC_ACQUISITION_PARAMETERS))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.IMAGING_DEVICE_SPECIFIC_ACQUISITION_PARAMETERS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGING_DEVICE_SPECIFIC_ACQUISITION_PARAMETERS) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString TREATMENT_DELIVERY_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TREATMENT_DELIVERY_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.TREATMENT_DELIVERY_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TREATMENT_DELIVERY_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString NUMBER_OF_WEDGES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_WEDGES))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.NUMBER_OF_WEDGES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_WEDGES) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence WEDGE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.WEDGE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.WEDGE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.WEDGE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString WEDGE_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.WEDGE_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.WEDGE_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.WEDGE_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString WEDGE_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.WEDGE_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.WEDGE_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.WEDGE_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString WEDGE_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.WEDGE_ID))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.WEDGE_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.WEDGE_ID) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString WEDGE_ANGLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.WEDGE_ANGLE))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.WEDGE_ANGLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.WEDGE_ANGLE) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString WEDGE_FACTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.WEDGE_FACTOR))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.WEDGE_FACTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.WEDGE_FACTOR) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle TOTAL_WEDGE_TRAY_WATER_EQUIVALENT_THICKNESS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TOTAL_WEDGE_TRAY_WATER_EQUIVALENT_THICKNESS))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.TOTAL_WEDGE_TRAY_WATER_EQUIVALENT_THICKNESS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TOTAL_WEDGE_TRAY_WATER_EQUIVALENT_THICKNESS) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString WEDGE_ORIENTATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.WEDGE_ORIENTATION))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.WEDGE_ORIENTATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.WEDGE_ORIENTATION) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle ISOCENTER_TO_WEDGE_TRAY_DISTANCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ISOCENTER_TO_WEDGE_TRAY_DISTANCE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.ISOCENTER_TO_WEDGE_TRAY_DISTANCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ISOCENTER_TO_WEDGE_TRAY_DISTANCE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString SOURCE_TO_WEDGE_TRAY_DISTANCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOURCE_TO_WEDGE_TRAY_DISTANCE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.SOURCE_TO_WEDGE_TRAY_DISTANCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOURCE_TO_WEDGE_TRAY_DISTANCE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle WEDGE_THIN_EDGE_POSITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.WEDGE_THIN_EDGE_POSITION))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.WEDGE_THIN_EDGE_POSITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.WEDGE_THIN_EDGE_POSITION) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString BOLUS_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BOLUS_ID))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.BOLUS_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BOLUS_ID) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText BOLUS_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BOLUS_DESCRIPTION))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.BOLUS_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BOLUS_DESCRIPTION) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString NUMBER_OF_COMPENSATORS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_COMPENSATORS))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.NUMBER_OF_COMPENSATORS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_COMPENSATORS) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString MATERIAL_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MATERIAL_ID))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.MATERIAL_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MATERIAL_ID) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString TOTAL_COMPENSATOR_TRAY_FACTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TOTAL_COMPENSATOR_TRAY_FACTOR))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.TOTAL_COMPENSATOR_TRAY_FACTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TOTAL_COMPENSATOR_TRAY_FACTOR) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence COMPENSATOR_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COMPENSATOR_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.COMPENSATOR_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COMPENSATOR_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString COMPENSATOR_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COMPENSATOR_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.COMPENSATOR_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COMPENSATOR_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString COMPENSATOR_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COMPENSATOR_ID))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.COMPENSATOR_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COMPENSATOR_ID) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString SOURCE_TO_COMPENSATOR_TRAY_DISTANCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOURCE_TO_COMPENSATOR_TRAY_DISTANCE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.SOURCE_TO_COMPENSATOR_TRAY_DISTANCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOURCE_TO_COMPENSATOR_TRAY_DISTANCE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString COMPENSATOR_ROWS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COMPENSATOR_ROWS))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.COMPENSATOR_ROWS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COMPENSATOR_ROWS) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString COMPENSATOR_COLUMNS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COMPENSATOR_COLUMNS))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.COMPENSATOR_COLUMNS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COMPENSATOR_COLUMNS) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString COMPENSATOR_PIXEL_SPACING
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COMPENSATOR_PIXEL_SPACING))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.COMPENSATOR_PIXEL_SPACING }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COMPENSATOR_PIXEL_SPACING) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString COMPENSATOR_POSITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COMPENSATOR_POSITION))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.COMPENSATOR_POSITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COMPENSATOR_POSITION) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString COMPENSATOR_TRANSMISSION_DATA
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COMPENSATOR_TRANSMISSION_DATA))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.COMPENSATOR_TRANSMISSION_DATA }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COMPENSATOR_TRANSMISSION_DATA) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString COMPENSATOR_THICKNESS_DATA
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COMPENSATOR_THICKNESS_DATA))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.COMPENSATOR_THICKNESS_DATA }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COMPENSATOR_THICKNESS_DATA) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString NUMBER_OF_BOLI
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_BOLI))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.NUMBER_OF_BOLI }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_BOLI) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString COMPENSATOR_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COMPENSATOR_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.COMPENSATOR_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COMPENSATOR_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString NUMBER_OF_BLOCKS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_BLOCKS))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.NUMBER_OF_BLOCKS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_BLOCKS) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString TOTAL_BLOCK_TRAY_FACTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TOTAL_BLOCK_TRAY_FACTOR))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.TOTAL_BLOCK_TRAY_FACTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TOTAL_BLOCK_TRAY_FACTOR) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle TOTAL_BLOCK_TRAY_WATER_EQUIVALENT_THICKNESS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TOTAL_BLOCK_TRAY_WATER_EQUIVALENT_THICKNESS))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.TOTAL_BLOCK_TRAY_WATER_EQUIVALENT_THICKNESS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TOTAL_BLOCK_TRAY_WATER_EQUIVALENT_THICKNESS) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence BLOCK_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BLOCK_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.BLOCK_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BLOCK_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString BLOCK_TRAY_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BLOCK_TRAY_ID))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.BLOCK_TRAY_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BLOCK_TRAY_ID) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString SOURCE_TO_BLOCK_TRAY_DISTANCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOURCE_TO_BLOCK_TRAY_DISTANCE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.SOURCE_TO_BLOCK_TRAY_DISTANCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOURCE_TO_BLOCK_TRAY_DISTANCE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle ISOCENTER_TO_BLOCK_TRAY_DISTANCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ISOCENTER_TO_BLOCK_TRAY_DISTANCE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.ISOCENTER_TO_BLOCK_TRAY_DISTANCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ISOCENTER_TO_BLOCK_TRAY_DISTANCE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString BLOCK_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BLOCK_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.BLOCK_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BLOCK_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString ACCESSORY_CODE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ACCESSORY_CODE))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.ACCESSORY_CODE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ACCESSORY_CODE) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString BLOCK_DIVERGENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BLOCK_DIVERGENCE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.BLOCK_DIVERGENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BLOCK_DIVERGENCE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString BLOCK_MOUNTING_POSITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BLOCK_MOUNTING_POSITION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.BLOCK_MOUNTING_POSITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BLOCK_MOUNTING_POSITION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString BLOCK_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BLOCK_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.BLOCK_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BLOCK_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString BLOCK_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BLOCK_NAME))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.BLOCK_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BLOCK_NAME) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString BLOCK_THICKNESS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BLOCK_THICKNESS))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.BLOCK_THICKNESS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BLOCK_THICKNESS) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString BLOCK_TRANSMISSION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BLOCK_TRANSMISSION))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.BLOCK_TRANSMISSION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BLOCK_TRANSMISSION) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString BLOCK_NUMBER_OF_POINTS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BLOCK_NUMBER_OF_POINTS))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.BLOCK_NUMBER_OF_POINTS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BLOCK_NUMBER_OF_POINTS) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString BLOCK_DATA
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BLOCK_DATA))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.BLOCK_DATA }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BLOCK_DATA) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence APPLICATOR_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.APPLICATOR_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.APPLICATOR_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.APPLICATOR_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString APPLICATOR_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.APPLICATOR_ID))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.APPLICATOR_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.APPLICATOR_ID) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString APPLICATOR_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.APPLICATOR_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.APPLICATOR_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.APPLICATOR_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString APPLICATOR_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.APPLICATOR_DESCRIPTION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.APPLICATOR_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.APPLICATOR_DESCRIPTION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString CUMULATIVE_DOSE_REFERENCE_COEFFICIENT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CUMULATIVE_DOSE_REFERENCE_COEFFICIENT))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.CUMULATIVE_DOSE_REFERENCE_COEFFICIENT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CUMULATIVE_DOSE_REFERENCE_COEFFICIENT) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString FINAL_CUMULATIVE_METERSET_WEIGHT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FINAL_CUMULATIVE_METERSET_WEIGHT))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.FINAL_CUMULATIVE_METERSET_WEIGHT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FINAL_CUMULATIVE_METERSET_WEIGHT) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString NUMBER_OF_CONTROL_POINTS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_CONTROL_POINTS))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.NUMBER_OF_CONTROL_POINTS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_CONTROL_POINTS) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CONTROL_POINT_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTROL_POINT_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CONTROL_POINT_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTROL_POINT_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString CONTROL_POINT_INDEX
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTROL_POINT_INDEX))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.CONTROL_POINT_INDEX }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTROL_POINT_INDEX) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString NOMINAL_BEAM_ENERGY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NOMINAL_BEAM_ENERGY))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.NOMINAL_BEAM_ENERGY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NOMINAL_BEAM_ENERGY) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString DOSE_RATE_SET
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DOSE_RATE_SET))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.DOSE_RATE_SET }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DOSE_RATE_SET) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence WEDGE_POSITION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.WEDGE_POSITION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.WEDGE_POSITION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.WEDGE_POSITION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString WEDGE_POSITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.WEDGE_POSITION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.WEDGE_POSITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.WEDGE_POSITION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence BEAM_LIMITING_DEVICE_POSITION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BEAM_LIMITING_DEVICE_POSITION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.BEAM_LIMITING_DEVICE_POSITION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BEAM_LIMITING_DEVICE_POSITION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString LEAF_JAW_POSITIONS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LEAF_JAW_POSITIONS))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.LEAF_JAW_POSITIONS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LEAF_JAW_POSITIONS) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString GANTRY_ANGLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GANTRY_ANGLE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.GANTRY_ANGLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GANTRY_ANGLE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString GANTRY_ROTATION_DIRECTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GANTRY_ROTATION_DIRECTION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.GANTRY_ROTATION_DIRECTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GANTRY_ROTATION_DIRECTION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString BEAM_LIMITING_DEVICE_ANGLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BEAM_LIMITING_DEVICE_ANGLE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.BEAM_LIMITING_DEVICE_ANGLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BEAM_LIMITING_DEVICE_ANGLE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString BEAM_LIMITING_DEVICE_ROTATION_DIRECTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BEAM_LIMITING_DEVICE_ROTATION_DIRECTION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.BEAM_LIMITING_DEVICE_ROTATION_DIRECTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BEAM_LIMITING_DEVICE_ROTATION_DIRECTION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString PATIENT_SUPPORT_ANGLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_SUPPORT_ANGLE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.PATIENT_SUPPORT_ANGLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_SUPPORT_ANGLE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString PATIENT_SUPPORT_ROTATION_DIRECTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_SUPPORT_ROTATION_DIRECTION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.PATIENT_SUPPORT_ROTATION_DIRECTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_SUPPORT_ROTATION_DIRECTION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString TABLE_TOP_ECCENTRIC_AXIS_DISTANCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TABLE_TOP_ECCENTRIC_AXIS_DISTANCE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.TABLE_TOP_ECCENTRIC_AXIS_DISTANCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TABLE_TOP_ECCENTRIC_AXIS_DISTANCE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString TABLE_TOP_ECCENTRIC_ANGLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TABLE_TOP_ECCENTRIC_ANGLE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.TABLE_TOP_ECCENTRIC_ANGLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TABLE_TOP_ECCENTRIC_ANGLE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString TABLE_TOP_ECCENTRIC_ROTATION_DIRECTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TABLE_TOP_ECCENTRIC_ROTATION_DIRECTION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.TABLE_TOP_ECCENTRIC_ROTATION_DIRECTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TABLE_TOP_ECCENTRIC_ROTATION_DIRECTION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString TABLE_TOP_VERTICAL_POSITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TABLE_TOP_VERTICAL_POSITION))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.TABLE_TOP_VERTICAL_POSITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TABLE_TOP_VERTICAL_POSITION) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString TABLE_TOP_LONGITUDINAL_POSITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TABLE_TOP_LONGITUDINAL_POSITION))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.TABLE_TOP_LONGITUDINAL_POSITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TABLE_TOP_LONGITUDINAL_POSITION) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString TABLE_TOP_LATERAL_POSITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TABLE_TOP_LATERAL_POSITION))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.TABLE_TOP_LATERAL_POSITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TABLE_TOP_LATERAL_POSITION) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString ISOCENTER_POSITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ISOCENTER_POSITION))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.ISOCENTER_POSITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ISOCENTER_POSITION) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString SURFACE_ENTRY_POINT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SURFACE_ENTRY_POINT))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.SURFACE_ENTRY_POINT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SURFACE_ENTRY_POINT) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString SOURCE_TO_SURFACE_DISTANCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOURCE_TO_SURFACE_DISTANCE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.SOURCE_TO_SURFACE_DISTANCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOURCE_TO_SURFACE_DISTANCE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString CUMULATIVE_METERSET_WEIGHT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CUMULATIVE_METERSET_WEIGHT))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.CUMULATIVE_METERSET_WEIGHT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CUMULATIVE_METERSET_WEIGHT) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle TABLE_TOP_PITCH_ANGLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TABLE_TOP_PITCH_ANGLE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.TABLE_TOP_PITCH_ANGLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TABLE_TOP_PITCH_ANGLE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString TABLE_TOP_PITCH_ROTATION_DIRECTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TABLE_TOP_PITCH_ROTATION_DIRECTION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.TABLE_TOP_PITCH_ROTATION_DIRECTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TABLE_TOP_PITCH_ROTATION_DIRECTION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle TABLE_TOP_ROLL_ANGLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TABLE_TOP_ROLL_ANGLE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.TABLE_TOP_ROLL_ANGLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TABLE_TOP_ROLL_ANGLE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString TABLE_TOP_ROLL_ROTATION_DIRECTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TABLE_TOP_ROLL_ROTATION_DIRECTION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.TABLE_TOP_ROLL_ROTATION_DIRECTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TABLE_TOP_ROLL_ROTATION_DIRECTION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle HEAD_FIXATION_ANGLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.HEAD_FIXATION_ANGLE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.HEAD_FIXATION_ANGLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.HEAD_FIXATION_ANGLE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle GANTRY_PITCH_ANGLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GANTRY_PITCH_ANGLE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.GANTRY_PITCH_ANGLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GANTRY_PITCH_ANGLE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString GANTRY_PITCH_ROTATION_DIRECTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GANTRY_PITCH_ROTATION_DIRECTION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.GANTRY_PITCH_ROTATION_DIRECTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GANTRY_PITCH_ROTATION_DIRECTION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle GANTRY_PITCH_ANGLE_TOLERANCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GANTRY_PITCH_ANGLE_TOLERANCE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.GANTRY_PITCH_ANGLE_TOLERANCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GANTRY_PITCH_ANGLE_TOLERANCE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PATIENT_SETUP_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_SETUP_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PATIENT_SETUP_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_SETUP_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString PATIENT_SETUP_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_SETUP_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.PATIENT_SETUP_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_SETUP_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString PATIENT_SETUP_LABEL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_SETUP_LABEL))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.PATIENT_SETUP_LABEL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_SETUP_LABEL) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString PATIENT_ADDITIONAL_POSITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_ADDITIONAL_POSITION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.PATIENT_ADDITIONAL_POSITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_ADDITIONAL_POSITION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence FIXATION_DEVICE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FIXATION_DEVICE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.FIXATION_DEVICE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FIXATION_DEVICE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString FIXATION_DEVICE_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FIXATION_DEVICE_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.FIXATION_DEVICE_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FIXATION_DEVICE_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString FIXATION_DEVICE_LABEL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FIXATION_DEVICE_LABEL))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.FIXATION_DEVICE_LABEL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FIXATION_DEVICE_LABEL) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText FIXATION_DEVICE_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FIXATION_DEVICE_DESCRIPTION))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.FIXATION_DEVICE_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FIXATION_DEVICE_DESCRIPTION) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString FIXATION_DEVICE_POSITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FIXATION_DEVICE_POSITION))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.FIXATION_DEVICE_POSITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FIXATION_DEVICE_POSITION) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle FIXATION_DEVICE_PITCH_ANGLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FIXATION_DEVICE_PITCH_ANGLE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.FIXATION_DEVICE_PITCH_ANGLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FIXATION_DEVICE_PITCH_ANGLE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle FIXATION_DEVICE_ROLL_ANGLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FIXATION_DEVICE_ROLL_ANGLE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.FIXATION_DEVICE_ROLL_ANGLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FIXATION_DEVICE_ROLL_ANGLE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SHIELDING_DEVICE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SHIELDING_DEVICE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SHIELDING_DEVICE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SHIELDING_DEVICE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SHIELDING_DEVICE_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SHIELDING_DEVICE_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SHIELDING_DEVICE_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SHIELDING_DEVICE_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString SHIELDING_DEVICE_LABEL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SHIELDING_DEVICE_LABEL))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.SHIELDING_DEVICE_LABEL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SHIELDING_DEVICE_LABEL) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText SHIELDING_DEVICE_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SHIELDING_DEVICE_DESCRIPTION))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.SHIELDING_DEVICE_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SHIELDING_DEVICE_DESCRIPTION) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString SHIELDING_DEVICE_POSITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SHIELDING_DEVICE_POSITION))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.SHIELDING_DEVICE_POSITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SHIELDING_DEVICE_POSITION) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SETUP_TECHNIQUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SETUP_TECHNIQUE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SETUP_TECHNIQUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SETUP_TECHNIQUE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText SETUP_TECHNIQUE_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SETUP_TECHNIQUE_DESCRIPTION))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.SETUP_TECHNIQUE_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SETUP_TECHNIQUE_DESCRIPTION) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SETUP_DEVICE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SETUP_DEVICE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SETUP_DEVICE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SETUP_DEVICE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SETUP_DEVICE_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SETUP_DEVICE_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SETUP_DEVICE_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SETUP_DEVICE_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString SETUP_DEVICE_LABEL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SETUP_DEVICE_LABEL))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.SETUP_DEVICE_LABEL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SETUP_DEVICE_LABEL) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText SETUP_DEVICE_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SETUP_DEVICE_DESCRIPTION))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.SETUP_DEVICE_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SETUP_DEVICE_DESCRIPTION) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString SETUP_DEVICE_PARAMETER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SETUP_DEVICE_PARAMETER))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.SETUP_DEVICE_PARAMETER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SETUP_DEVICE_PARAMETER) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText SETUP_REFERENCE_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SETUP_REFERENCE_DESCRIPTION))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.SETUP_REFERENCE_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SETUP_REFERENCE_DESCRIPTION) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString TABLE_TOP_VERTICAL_SETUP_DISPLACEMENT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TABLE_TOP_VERTICAL_SETUP_DISPLACEMENT))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.TABLE_TOP_VERTICAL_SETUP_DISPLACEMENT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TABLE_TOP_VERTICAL_SETUP_DISPLACEMENT) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString TABLE_TOP_LONGITUDINAL_SETUP_DISPLACEMENT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TABLE_TOP_LONGITUDINAL_SETUP_DISPLACEMENT))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.TABLE_TOP_LONGITUDINAL_SETUP_DISPLACEMENT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TABLE_TOP_LONGITUDINAL_SETUP_DISPLACEMENT) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString TABLE_TOP_LATERAL_SETUP_DISPLACEMENT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TABLE_TOP_LATERAL_SETUP_DISPLACEMENT))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.TABLE_TOP_LATERAL_SETUP_DISPLACEMENT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TABLE_TOP_LATERAL_SETUP_DISPLACEMENT) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString BRACHY_TREATMENT_TECHNIQUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BRACHY_TREATMENT_TECHNIQUE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.BRACHY_TREATMENT_TECHNIQUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BRACHY_TREATMENT_TECHNIQUE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString BRACHY_TREATMENT_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BRACHY_TREATMENT_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.BRACHY_TREATMENT_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BRACHY_TREATMENT_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence TREATMENT_MACHINE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TREATMENT_MACHINE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.TREATMENT_MACHINE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TREATMENT_MACHINE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SOURCE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOURCE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SOURCE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOURCE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString SOURCE_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOURCE_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.SOURCE_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOURCE_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SOURCE_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOURCE_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SOURCE_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOURCE_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString SOURCE_MANUFACTURER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOURCE_MANUFACTURER))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.SOURCE_MANUFACTURER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOURCE_MANUFACTURER) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString ACTIVE_SOURCE_DIAMETER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ACTIVE_SOURCE_DIAMETER))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.ACTIVE_SOURCE_DIAMETER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ACTIVE_SOURCE_DIAMETER) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString ACTIVE_SOURCE_LENGTH
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ACTIVE_SOURCE_LENGTH))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.ACTIVE_SOURCE_LENGTH }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ACTIVE_SOURCE_LENGTH) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString SOURCE_ENCAPSULATION_NOMINAL_THICKNESS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOURCE_ENCAPSULATION_NOMINAL_THICKNESS))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.SOURCE_ENCAPSULATION_NOMINAL_THICKNESS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOURCE_ENCAPSULATION_NOMINAL_THICKNESS) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString SOURCE_ENCAPSULATION_NOMINAL_TRANSMISSION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOURCE_ENCAPSULATION_NOMINAL_TRANSMISSION))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.SOURCE_ENCAPSULATION_NOMINAL_TRANSMISSION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOURCE_ENCAPSULATION_NOMINAL_TRANSMISSION) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString SOURCE_ISOTOPE_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOURCE_ISOTOPE_NAME))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.SOURCE_ISOTOPE_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOURCE_ISOTOPE_NAME) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString SOURCE_ISOTOPE_HALF_LIFE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOURCE_ISOTOPE_HALF_LIFE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.SOURCE_ISOTOPE_HALF_LIFE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOURCE_ISOTOPE_HALF_LIFE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SOURCE_STRENGTH_UNITS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOURCE_STRENGTH_UNITS))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SOURCE_STRENGTH_UNITS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOURCE_STRENGTH_UNITS) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString REFERENCE_AIR_KERMA_RATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCE_AIR_KERMA_RATE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.REFERENCE_AIR_KERMA_RATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCE_AIR_KERMA_RATE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString SOURCE_STRENGTH
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOURCE_STRENGTH))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.SOURCE_STRENGTH }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOURCE_STRENGTH) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateVR SOURCE_STRENGTH_REFERENCE_DATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOURCE_STRENGTH_REFERENCE_DATE))
                {
                    DateVR newOb = new DateVR { Tag = new Tag { Id = TagHelper.SOURCE_STRENGTH_REFERENCE_DATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOURCE_STRENGTH_REFERENCE_DATE) as DateVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR SOURCE_STRENGTH_REFERENCE_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOURCE_STRENGTH_REFERENCE_TIME))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.SOURCE_STRENGTH_REFERENCE_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOURCE_STRENGTH_REFERENCE_TIME) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence APPLICATION_SETUP_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.APPLICATION_SETUP_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.APPLICATION_SETUP_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.APPLICATION_SETUP_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString APPLICATION_SETUP_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.APPLICATION_SETUP_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.APPLICATION_SETUP_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.APPLICATION_SETUP_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString APPLICATION_SETUP_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.APPLICATION_SETUP_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.APPLICATION_SETUP_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.APPLICATION_SETUP_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString APPLICATION_SETUP_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.APPLICATION_SETUP_NAME))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.APPLICATION_SETUP_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.APPLICATION_SETUP_NAME) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString APPLICATION_SETUP_MANUFACTURER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.APPLICATION_SETUP_MANUFACTURER))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.APPLICATION_SETUP_MANUFACTURER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.APPLICATION_SETUP_MANUFACTURER) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString TEMPLATE_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TEMPLATE_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.TEMPLATE_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TEMPLATE_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString TEMPLATE_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TEMPLATE_TYPE))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.TEMPLATE_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TEMPLATE_TYPE) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString TEMPLATE_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TEMPLATE_NAME))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.TEMPLATE_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TEMPLATE_NAME) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString TOTAL_REFERENCE_AIR_KERMA
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TOTAL_REFERENCE_AIR_KERMA))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.TOTAL_REFERENCE_AIR_KERMA }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TOTAL_REFERENCE_AIR_KERMA) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence BRACHY_ACCESSORY_DEVICE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BRACHY_ACCESSORY_DEVICE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.BRACHY_ACCESSORY_DEVICE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BRACHY_ACCESSORY_DEVICE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString BRACHY_ACCESSORY_DEVICE_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BRACHY_ACCESSORY_DEVICE_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.BRACHY_ACCESSORY_DEVICE_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BRACHY_ACCESSORY_DEVICE_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString BRACHY_ACCESSORY_DEVICE_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BRACHY_ACCESSORY_DEVICE_ID))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.BRACHY_ACCESSORY_DEVICE_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BRACHY_ACCESSORY_DEVICE_ID) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString BRACHY_ACCESSORY_DEVICE_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BRACHY_ACCESSORY_DEVICE_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.BRACHY_ACCESSORY_DEVICE_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BRACHY_ACCESSORY_DEVICE_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString BRACHY_ACCESSORY_DEVICE_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BRACHY_ACCESSORY_DEVICE_NAME))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.BRACHY_ACCESSORY_DEVICE_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BRACHY_ACCESSORY_DEVICE_NAME) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString BRACHY_ACCESSORY_DEVICE_NOMINAL_THICKNESS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BRACHY_ACCESSORY_DEVICE_NOMINAL_THICKNESS))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.BRACHY_ACCESSORY_DEVICE_NOMINAL_THICKNESS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BRACHY_ACCESSORY_DEVICE_NOMINAL_THICKNESS) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString BRACHY_ACCESSORY_DEVICE_NOMINAL_TRANSMISSION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BRACHY_ACCESSORY_DEVICE_NOMINAL_TRANSMISSION))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.BRACHY_ACCESSORY_DEVICE_NOMINAL_TRANSMISSION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BRACHY_ACCESSORY_DEVICE_NOMINAL_TRANSMISSION) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CHANNEL_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CHANNEL_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CHANNEL_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CHANNEL_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString CHANNEL_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CHANNEL_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.CHANNEL_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CHANNEL_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString CHANNEL_LENGTH
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CHANNEL_LENGTH))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.CHANNEL_LENGTH }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CHANNEL_LENGTH) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString CHANNEL_TOTAL_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CHANNEL_TOTAL_TIME))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.CHANNEL_TOTAL_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CHANNEL_TOTAL_TIME) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SOURCE_MOVEMENT_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOURCE_MOVEMENT_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SOURCE_MOVEMENT_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOURCE_MOVEMENT_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString NUMBER_OF_PULSES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_PULSES))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.NUMBER_OF_PULSES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_PULSES) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString PULSE_REPETITION_INTERVAL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PULSE_REPETITION_INTERVAL))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.PULSE_REPETITION_INTERVAL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PULSE_REPETITION_INTERVAL) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString SOURCE_APPLICATOR_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOURCE_APPLICATOR_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.SOURCE_APPLICATOR_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOURCE_APPLICATOR_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString SOURCE_APPLICATOR_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOURCE_APPLICATOR_ID))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.SOURCE_APPLICATOR_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOURCE_APPLICATOR_ID) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SOURCE_APPLICATOR_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOURCE_APPLICATOR_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SOURCE_APPLICATOR_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOURCE_APPLICATOR_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString SOURCE_APPLICATOR_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOURCE_APPLICATOR_NAME))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.SOURCE_APPLICATOR_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOURCE_APPLICATOR_NAME) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString SOURCE_APPLICATOR_LENGTH
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOURCE_APPLICATOR_LENGTH))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.SOURCE_APPLICATOR_LENGTH }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOURCE_APPLICATOR_LENGTH) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString SOURCE_APPLICATOR_MANUFACTURER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOURCE_APPLICATOR_MANUFACTURER))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.SOURCE_APPLICATOR_MANUFACTURER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOURCE_APPLICATOR_MANUFACTURER) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString SOURCE_APPLICATOR_WALL_NOMINAL_THICKNESS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOURCE_APPLICATOR_WALL_NOMINAL_THICKNESS))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.SOURCE_APPLICATOR_WALL_NOMINAL_THICKNESS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOURCE_APPLICATOR_WALL_NOMINAL_THICKNESS) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString SOURCE_APPLICATOR_WALL_NOMINAL_TRANSMISSION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOURCE_APPLICATOR_WALL_NOMINAL_TRANSMISSION))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.SOURCE_APPLICATOR_WALL_NOMINAL_TRANSMISSION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOURCE_APPLICATOR_WALL_NOMINAL_TRANSMISSION) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString SOURCE_APPLICATOR_STEP_SIZE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOURCE_APPLICATOR_STEP_SIZE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.SOURCE_APPLICATOR_STEP_SIZE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOURCE_APPLICATOR_STEP_SIZE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString TRANSFER_TUBE_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TRANSFER_TUBE_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.TRANSFER_TUBE_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TRANSFER_TUBE_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString TRANSFER_TUBE_LENGTH
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TRANSFER_TUBE_LENGTH))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.TRANSFER_TUBE_LENGTH }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TRANSFER_TUBE_LENGTH) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CHANNEL_SHIELD_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CHANNEL_SHIELD_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CHANNEL_SHIELD_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CHANNEL_SHIELD_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString CHANNEL_SHIELD_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CHANNEL_SHIELD_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.CHANNEL_SHIELD_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CHANNEL_SHIELD_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString CHANNEL_SHIELD_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CHANNEL_SHIELD_ID))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.CHANNEL_SHIELD_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CHANNEL_SHIELD_ID) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString CHANNEL_SHIELD_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CHANNEL_SHIELD_NAME))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.CHANNEL_SHIELD_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CHANNEL_SHIELD_NAME) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString CHANNEL_SHIELD_NOMINAL_THICKNESS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CHANNEL_SHIELD_NOMINAL_THICKNESS))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.CHANNEL_SHIELD_NOMINAL_THICKNESS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CHANNEL_SHIELD_NOMINAL_THICKNESS) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString CHANNEL_SHIELD_NOMINAL_TRANSMISSION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CHANNEL_SHIELD_NOMINAL_TRANSMISSION))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.CHANNEL_SHIELD_NOMINAL_TRANSMISSION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CHANNEL_SHIELD_NOMINAL_TRANSMISSION) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString FINAL_CUMULATIVE_TIME_WEIGHT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FINAL_CUMULATIVE_TIME_WEIGHT))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.FINAL_CUMULATIVE_TIME_WEIGHT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FINAL_CUMULATIVE_TIME_WEIGHT) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence BRACHY_CONTROL_POINT_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BRACHY_CONTROL_POINT_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.BRACHY_CONTROL_POINT_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BRACHY_CONTROL_POINT_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString CONTROL_POINT_RELATIVE_POSITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTROL_POINT_RELATIVE_POSITION))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.CONTROL_POINT_RELATIVE_POSITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTROL_POINT_RELATIVE_POSITION) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString CONTROL_POINT3DPOSITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTROL_POINT3DPOSITION))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.CONTROL_POINT3DPOSITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTROL_POINT3DPOSITION) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString CUMULATIVE_TIME_WEIGHT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CUMULATIVE_TIME_WEIGHT))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.CUMULATIVE_TIME_WEIGHT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CUMULATIVE_TIME_WEIGHT) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString COMPENSATOR_DIVERGENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COMPENSATOR_DIVERGENCE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.COMPENSATOR_DIVERGENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COMPENSATOR_DIVERGENCE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString COMPENSATOR_MOUNTING_POSITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COMPENSATOR_MOUNTING_POSITION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.COMPENSATOR_MOUNTING_POSITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COMPENSATOR_MOUNTING_POSITION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString SOURCE_TO_COMPENSATOR_DISTANCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SOURCE_TO_COMPENSATOR_DISTANCE))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.SOURCE_TO_COMPENSATOR_DISTANCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SOURCE_TO_COMPENSATOR_DISTANCE) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle TOTAL_COMPENSATOR_TRAY_WATER_EQUIVALENT_THICKNESS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TOTAL_COMPENSATOR_TRAY_WATER_EQUIVALENT_THICKNESS))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.TOTAL_COMPENSATOR_TRAY_WATER_EQUIVALENT_THICKNESS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TOTAL_COMPENSATOR_TRAY_WATER_EQUIVALENT_THICKNESS) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle ISOCENTER_TO_COMPENSATOR_TRAY_DISTANCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ISOCENTER_TO_COMPENSATOR_TRAY_DISTANCE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.ISOCENTER_TO_COMPENSATOR_TRAY_DISTANCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ISOCENTER_TO_COMPENSATOR_TRAY_DISTANCE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle COMPENSATOR_COLUMN_OFFSET
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COMPENSATOR_COLUMN_OFFSET))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.COMPENSATOR_COLUMN_OFFSET }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COMPENSATOR_COLUMN_OFFSET) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle ISOCENTER_TO_COMPENSATOR_DISTANCES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ISOCENTER_TO_COMPENSATOR_DISTANCES))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.ISOCENTER_TO_COMPENSATOR_DISTANCES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ISOCENTER_TO_COMPENSATOR_DISTANCES) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle COMPENSATOR_RELATIVE_STOPPING_POWER_RATIO
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COMPENSATOR_RELATIVE_STOPPING_POWER_RATIO))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.COMPENSATOR_RELATIVE_STOPPING_POWER_RATIO }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COMPENSATOR_RELATIVE_STOPPING_POWER_RATIO) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle COMPENSATOR_MILLING_TOOL_DIAMETER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COMPENSATOR_MILLING_TOOL_DIAMETER))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.COMPENSATOR_MILLING_TOOL_DIAMETER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COMPENSATOR_MILLING_TOOL_DIAMETER) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ION_RANGE_COMPENSATOR_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ION_RANGE_COMPENSATOR_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ION_RANGE_COMPENSATOR_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ION_RANGE_COMPENSATOR_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongText COMPENSATOR_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COMPENSATOR_DESCRIPTION))
                {
                    LongText newOb = new LongText { Tag = new Tag { Id = TagHelper.COMPENSATOR_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COMPENSATOR_DESCRIPTION) as LongText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString RADIATION_MASS_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RADIATION_MASS_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.RADIATION_MASS_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RADIATION_MASS_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString RADIATION_ATOMIC_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RADIATION_ATOMIC_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.RADIATION_ATOMIC_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RADIATION_ATOMIC_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public SignedShort RADIATION_CHARGE_STATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RADIATION_CHARGE_STATE))
                {
                    SignedShort newOb = new SignedShort { Tag = new Tag { Id = TagHelper.RADIATION_CHARGE_STATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RADIATION_CHARGE_STATE) as SignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString SCAN_MODE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCAN_MODE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.SCAN_MODE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCAN_MODE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle VIRTUAL_SOURCE_AXIS_DISTANCES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VIRTUAL_SOURCE_AXIS_DISTANCES))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.VIRTUAL_SOURCE_AXIS_DISTANCES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VIRTUAL_SOURCE_AXIS_DISTANCES) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SNOUT_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SNOUT_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SNOUT_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SNOUT_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle SNOUT_POSITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SNOUT_POSITION))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.SNOUT_POSITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SNOUT_POSITION) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString SNOUT_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SNOUT_ID))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.SNOUT_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SNOUT_ID) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString NUMBER_OF_RANGE_SHIFTERS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_RANGE_SHIFTERS))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.NUMBER_OF_RANGE_SHIFTERS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_RANGE_SHIFTERS) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence RANGE_SHIFTER_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RANGE_SHIFTER_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.RANGE_SHIFTER_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RANGE_SHIFTER_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString RANGE_SHIFTER_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RANGE_SHIFTER_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.RANGE_SHIFTER_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RANGE_SHIFTER_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString RANGE_SHIFTER_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RANGE_SHIFTER_ID))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.RANGE_SHIFTER_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RANGE_SHIFTER_ID) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString RANGE_SHIFTER_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RANGE_SHIFTER_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.RANGE_SHIFTER_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RANGE_SHIFTER_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString RANGE_SHIFTER_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RANGE_SHIFTER_DESCRIPTION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.RANGE_SHIFTER_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RANGE_SHIFTER_DESCRIPTION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString NUMBER_OF_LATERAL_SPREADING_DEVICES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_LATERAL_SPREADING_DEVICES))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.NUMBER_OF_LATERAL_SPREADING_DEVICES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_LATERAL_SPREADING_DEVICES) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence LATERAL_SPREADING_DEVICE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LATERAL_SPREADING_DEVICE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.LATERAL_SPREADING_DEVICE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LATERAL_SPREADING_DEVICE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString LATERAL_SPREADING_DEVICE_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LATERAL_SPREADING_DEVICE_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.LATERAL_SPREADING_DEVICE_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LATERAL_SPREADING_DEVICE_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString LATERAL_SPREADING_DEVICE_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LATERAL_SPREADING_DEVICE_ID))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.LATERAL_SPREADING_DEVICE_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LATERAL_SPREADING_DEVICE_ID) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString LATERAL_SPREADING_DEVICE_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LATERAL_SPREADING_DEVICE_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.LATERAL_SPREADING_DEVICE_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LATERAL_SPREADING_DEVICE_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString LATERAL_SPREADING_DEVICE_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LATERAL_SPREADING_DEVICE_DESCRIPTION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.LATERAL_SPREADING_DEVICE_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LATERAL_SPREADING_DEVICE_DESCRIPTION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle LATERAL_SPREADING_DEVICE_WATER_EQUIVALENT_THICKNESS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LATERAL_SPREADING_DEVICE_WATER_EQUIVALENT_THICKNESS))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.LATERAL_SPREADING_DEVICE_WATER_EQUIVALENT_THICKNESS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LATERAL_SPREADING_DEVICE_WATER_EQUIVALENT_THICKNESS) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString NUMBER_OF_RANGE_MODULATORS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_RANGE_MODULATORS))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.NUMBER_OF_RANGE_MODULATORS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_RANGE_MODULATORS) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence RANGE_MODULATOR_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RANGE_MODULATOR_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.RANGE_MODULATOR_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RANGE_MODULATOR_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString RANGE_MODULATOR_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RANGE_MODULATOR_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.RANGE_MODULATOR_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RANGE_MODULATOR_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString RANGE_MODULATOR_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RANGE_MODULATOR_ID))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.RANGE_MODULATOR_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RANGE_MODULATOR_ID) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString RANGE_MODULATOR_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RANGE_MODULATOR_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.RANGE_MODULATOR_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RANGE_MODULATOR_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString RANGE_MODULATOR_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RANGE_MODULATOR_DESCRIPTION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.RANGE_MODULATOR_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RANGE_MODULATOR_DESCRIPTION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString BEAM_CURRENT_MODULATION_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BEAM_CURRENT_MODULATION_ID))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.BEAM_CURRENT_MODULATION_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BEAM_CURRENT_MODULATION_ID) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString PATIENT_SUPPORT_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_SUPPORT_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.PATIENT_SUPPORT_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_SUPPORT_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString PATIENT_SUPPORT_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_SUPPORT_ID))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.PATIENT_SUPPORT_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_SUPPORT_ID) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString PATIENT_SUPPORT_ACCESSORY_CODE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PATIENT_SUPPORT_ACCESSORY_CODE))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.PATIENT_SUPPORT_ACCESSORY_CODE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PATIENT_SUPPORT_ACCESSORY_CODE) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle FIXATION_LIGHT_AZIMUTHAL_ANGLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FIXATION_LIGHT_AZIMUTHAL_ANGLE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.FIXATION_LIGHT_AZIMUTHAL_ANGLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FIXATION_LIGHT_AZIMUTHAL_ANGLE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle FIXATION_LIGHT_POLAR_ANGLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FIXATION_LIGHT_POLAR_ANGLE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.FIXATION_LIGHT_POLAR_ANGLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FIXATION_LIGHT_POLAR_ANGLE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle METERSET_RATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.METERSET_RATE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.METERSET_RATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.METERSET_RATE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence RANGE_SHIFTER_SETTINGS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RANGE_SHIFTER_SETTINGS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.RANGE_SHIFTER_SETTINGS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RANGE_SHIFTER_SETTINGS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString RANGE_SHIFTER_SETTING
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RANGE_SHIFTER_SETTING))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.RANGE_SHIFTER_SETTING }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RANGE_SHIFTER_SETTING) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle ISOCENTER_TO_RANGE_SHIFTER_DISTANCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ISOCENTER_TO_RANGE_SHIFTER_DISTANCE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.ISOCENTER_TO_RANGE_SHIFTER_DISTANCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ISOCENTER_TO_RANGE_SHIFTER_DISTANCE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle RANGE_SHIFTER_WATER_EQUIVALENT_THICKNESS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RANGE_SHIFTER_WATER_EQUIVALENT_THICKNESS))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.RANGE_SHIFTER_WATER_EQUIVALENT_THICKNESS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RANGE_SHIFTER_WATER_EQUIVALENT_THICKNESS) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence LATERAL_SPREADING_DEVICE_SETTINGS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LATERAL_SPREADING_DEVICE_SETTINGS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.LATERAL_SPREADING_DEVICE_SETTINGS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LATERAL_SPREADING_DEVICE_SETTINGS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString LATERAL_SPREADING_DEVICE_SETTING
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.LATERAL_SPREADING_DEVICE_SETTING))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.LATERAL_SPREADING_DEVICE_SETTING }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.LATERAL_SPREADING_DEVICE_SETTING) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle ISOCENTER_TO_LATERAL_SPREADING_DEVICE_DISTANCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ISOCENTER_TO_LATERAL_SPREADING_DEVICE_DISTANCE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.ISOCENTER_TO_LATERAL_SPREADING_DEVICE_DISTANCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ISOCENTER_TO_LATERAL_SPREADING_DEVICE_DISTANCE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence RANGE_MODULATOR_SETTINGS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RANGE_MODULATOR_SETTINGS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.RANGE_MODULATOR_SETTINGS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RANGE_MODULATOR_SETTINGS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle RANGE_MODULATOR_GATING_START_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RANGE_MODULATOR_GATING_START_VALUE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.RANGE_MODULATOR_GATING_START_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RANGE_MODULATOR_GATING_START_VALUE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle RANGE_MODULATOR_GATING_STOP_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RANGE_MODULATOR_GATING_STOP_VALUE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.RANGE_MODULATOR_GATING_STOP_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RANGE_MODULATOR_GATING_STOP_VALUE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle RANGE_MODULATOR_GATING_START_WATER_EQUIVALENT_THICKNESS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RANGE_MODULATOR_GATING_START_WATER_EQUIVALENT_THICKNESS))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.RANGE_MODULATOR_GATING_START_WATER_EQUIVALENT_THICKNESS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RANGE_MODULATOR_GATING_START_WATER_EQUIVALENT_THICKNESS) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle RANGE_MODULATOR_GATING_STOP_WATER_EQUIVALENT_THICKNESS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RANGE_MODULATOR_GATING_STOP_WATER_EQUIVALENT_THICKNESS))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.RANGE_MODULATOR_GATING_STOP_WATER_EQUIVALENT_THICKNESS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RANGE_MODULATOR_GATING_STOP_WATER_EQUIVALENT_THICKNESS) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle ISOCENTER_TO_RANGE_MODULATOR_DISTANCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ISOCENTER_TO_RANGE_MODULATOR_DISTANCE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.ISOCENTER_TO_RANGE_MODULATOR_DISTANCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ISOCENTER_TO_RANGE_MODULATOR_DISTANCE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString SCAN_SPOT_TUNE_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCAN_SPOT_TUNE_ID))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.SCAN_SPOT_TUNE_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCAN_SPOT_TUNE_ID) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString NUMBER_OF_SCAN_SPOT_POSITIONS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_SCAN_SPOT_POSITIONS))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.NUMBER_OF_SCAN_SPOT_POSITIONS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_SCAN_SPOT_POSITIONS) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle SCAN_SPOT_POSITION_MAP
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCAN_SPOT_POSITION_MAP))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.SCAN_SPOT_POSITION_MAP }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCAN_SPOT_POSITION_MAP) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle SCAN_SPOT_METERSET_WEIGHTS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCAN_SPOT_METERSET_WEIGHTS))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.SCAN_SPOT_METERSET_WEIGHTS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCAN_SPOT_METERSET_WEIGHTS) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle SCANNING_SPOT_SIZE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SCANNING_SPOT_SIZE))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.SCANNING_SPOT_SIZE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SCANNING_SPOT_SIZE) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString NUMBER_OF_PAINTINGS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_PAINTINGS))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.NUMBER_OF_PAINTINGS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_PAINTINGS) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ION_TOLERANCE_TABLE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ION_TOLERANCE_TABLE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ION_TOLERANCE_TABLE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ION_TOLERANCE_TABLE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ION_BEAM_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ION_BEAM_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ION_BEAM_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ION_BEAM_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ION_BEAM_LIMITING_DEVICE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ION_BEAM_LIMITING_DEVICE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ION_BEAM_LIMITING_DEVICE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ION_BEAM_LIMITING_DEVICE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ION_BLOCK_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ION_BLOCK_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ION_BLOCK_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ION_BLOCK_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ION_CONTROL_POINT_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ION_CONTROL_POINT_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ION_CONTROL_POINT_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ION_CONTROL_POINT_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ION_WEDGE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ION_WEDGE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ION_WEDGE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ION_WEDGE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence ION_WEDGE_POSITION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ION_WEDGE_POSITION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.ION_WEDGE_POSITION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ION_WEDGE_POSITION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_SETUP_IMAGE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_SETUP_IMAGE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_SETUP_IMAGE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_SETUP_IMAGE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText SETUP_IMAGE_COMMENT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SETUP_IMAGE_COMMENT))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.SETUP_IMAGE_COMMENT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SETUP_IMAGE_COMMENT) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence MOTION_SYNCHRONIZATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MOTION_SYNCHRONIZATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.MOTION_SYNCHRONIZATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MOTION_SYNCHRONIZATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public FloatingPointSingle CONTROL_POINT_ORIENTATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CONTROL_POINT_ORIENTATION))
                {
                    FloatingPointSingle newOb = new FloatingPointSingle { Tag = new Tag { Id = TagHelper.CONTROL_POINT_ORIENTATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CONTROL_POINT_ORIENTATION) as FloatingPointSingle;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence GENERAL_ACCESSORY_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GENERAL_ACCESSORY_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.GENERAL_ACCESSORY_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GENERAL_ACCESSORY_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString GENERAL_ACCESSORY_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GENERAL_ACCESSORY_ID))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.GENERAL_ACCESSORY_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GENERAL_ACCESSORY_ID) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText GENERAL_ACCESSORY_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GENERAL_ACCESSORY_DESCRIPTION))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.GENERAL_ACCESSORY_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GENERAL_ACCESSORY_DESCRIPTION) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString GENERAL_ACCESSORY_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GENERAL_ACCESSORY_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.GENERAL_ACCESSORY_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GENERAL_ACCESSORY_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString GENERAL_ACCESSORY_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.GENERAL_ACCESSORY_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.GENERAL_ACCESSORY_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.GENERAL_ACCESSORY_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_RTPLAN_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_RTPLAN_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_RTPLAN_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_RTPLAN_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_BEAM_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_BEAM_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_BEAM_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_BEAM_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString REFERENCED_BEAM_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_BEAM_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.REFERENCED_BEAM_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_BEAM_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString REFERENCED_REFERENCE_IMAGE_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_REFERENCE_IMAGE_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.REFERENCED_REFERENCE_IMAGE_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_REFERENCE_IMAGE_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString START_CUMULATIVE_METERSET_WEIGHT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.START_CUMULATIVE_METERSET_WEIGHT))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.START_CUMULATIVE_METERSET_WEIGHT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.START_CUMULATIVE_METERSET_WEIGHT) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString END_CUMULATIVE_METERSET_WEIGHT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.END_CUMULATIVE_METERSET_WEIGHT))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.END_CUMULATIVE_METERSET_WEIGHT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.END_CUMULATIVE_METERSET_WEIGHT) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_BRACHY_APPLICATION_SETUP_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_BRACHY_APPLICATION_SETUP_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_BRACHY_APPLICATION_SETUP_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_BRACHY_APPLICATION_SETUP_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString REFERENCED_BRACHY_APPLICATION_SETUP_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_BRACHY_APPLICATION_SETUP_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.REFERENCED_BRACHY_APPLICATION_SETUP_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_BRACHY_APPLICATION_SETUP_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString REFERENCED_SOURCE_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_SOURCE_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.REFERENCED_SOURCE_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_SOURCE_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_FRACTION_GROUP_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_FRACTION_GROUP_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_FRACTION_GROUP_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_FRACTION_GROUP_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString REFERENCED_FRACTION_GROUP_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_FRACTION_GROUP_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.REFERENCED_FRACTION_GROUP_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_FRACTION_GROUP_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_VERIFICATION_IMAGE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_VERIFICATION_IMAGE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_VERIFICATION_IMAGE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_VERIFICATION_IMAGE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_REFERENCE_IMAGE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_REFERENCE_IMAGE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_REFERENCE_IMAGE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_REFERENCE_IMAGE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_DOSE_REFERENCE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_DOSE_REFERENCE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_DOSE_REFERENCE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_DOSE_REFERENCE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString REFERENCED_DOSE_REFERENCE_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_DOSE_REFERENCE_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.REFERENCED_DOSE_REFERENCE_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_DOSE_REFERENCE_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence BRACHY_REFERENCED_DOSE_REFERENCE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.BRACHY_REFERENCED_DOSE_REFERENCE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.BRACHY_REFERENCED_DOSE_REFERENCE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.BRACHY_REFERENCED_DOSE_REFERENCE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_STRUCTURE_SET_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_STRUCTURE_SET_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_STRUCTURE_SET_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_STRUCTURE_SET_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString REFERENCED_PATIENT_SETUP_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_PATIENT_SETUP_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.REFERENCED_PATIENT_SETUP_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_PATIENT_SETUP_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_DOSE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_DOSE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_DOSE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_DOSE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString REFERENCED_TOLERANCE_TABLE_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_TOLERANCE_TABLE_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.REFERENCED_TOLERANCE_TABLE_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_TOLERANCE_TABLE_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_BOLUS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_BOLUS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_BOLUS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_BOLUS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString REFERENCED_WEDGE_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_WEDGE_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.REFERENCED_WEDGE_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_WEDGE_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString REFERENCED_COMPENSATOR_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_COMPENSATOR_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.REFERENCED_COMPENSATOR_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_COMPENSATOR_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString REFERENCED_BLOCK_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_BLOCK_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.REFERENCED_BLOCK_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_BLOCK_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString REFERENCED_CONTROL_POINT_INDEX
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_CONTROL_POINT_INDEX))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.REFERENCED_CONTROL_POINT_INDEX }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_CONTROL_POINT_INDEX) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_CONTROL_POINT_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_CONTROL_POINT_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_CONTROL_POINT_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_CONTROL_POINT_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString REFERENCED_START_CONTROL_POINT_INDEX
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_START_CONTROL_POINT_INDEX))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.REFERENCED_START_CONTROL_POINT_INDEX }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_START_CONTROL_POINT_INDEX) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString REFERENCED_STOP_CONTROL_POINT_INDEX
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_STOP_CONTROL_POINT_INDEX))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.REFERENCED_STOP_CONTROL_POINT_INDEX }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_STOP_CONTROL_POINT_INDEX) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString REFERENCED_RANGE_SHIFTER_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_RANGE_SHIFTER_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.REFERENCED_RANGE_SHIFTER_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_RANGE_SHIFTER_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString REFERENCED_LATERAL_SPREADING_DEVICE_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_LATERAL_SPREADING_DEVICE_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.REFERENCED_LATERAL_SPREADING_DEVICE_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_LATERAL_SPREADING_DEVICE_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString REFERENCED_RANGE_MODULATOR_NUMBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_RANGE_MODULATOR_NUMBER))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.REFERENCED_RANGE_MODULATOR_NUMBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_RANGE_MODULATOR_NUMBER) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString APPROVAL_STATUS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.APPROVAL_STATUS))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.APPROVAL_STATUS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.APPROVAL_STATUS) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateVR REVIEW_DATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REVIEW_DATE))
                {
                    DateVR newOb = new DateVR { Tag = new Tag { Id = TagHelper.REVIEW_DATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REVIEW_DATE) as DateVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR REVIEW_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REVIEW_TIME))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.REVIEW_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REVIEW_TIME) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public PersonsName REVIEWER_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REVIEWER_NAME))
                {
                    PersonsName newOb = new PersonsName { Tag = new Tag { Id = TagHelper.REVIEWER_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REVIEWER_NAME) as PersonsName;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongText ARBITRARY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ARBITRARY))
                {
                    LongText newOb = new LongText { Tag = new Tag { Id = TagHelper.ARBITRARY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ARBITRARY) as LongText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongText TEXT_COMMENTS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TEXT_COMMENTS))
                {
                    LongText newOb = new LongText { Tag = new Tag { Id = TagHelper.TEXT_COMMENTS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TEXT_COMMENTS) as LongText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString RESULTS_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RESULTS_ID))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.RESULTS_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RESULTS_ID) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString RESULTS_IDISSUER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RESULTS_IDISSUER))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.RESULTS_IDISSUER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RESULTS_IDISSUER) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence REFERENCED_INTERPRETATION_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCED_INTERPRETATION_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.REFERENCED_INTERPRETATION_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCED_INTERPRETATION_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateVR INTERPRETATION_RECORDED_DATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INTERPRETATION_RECORDED_DATE))
                {
                    DateVR newOb = new DateVR { Tag = new Tag { Id = TagHelper.INTERPRETATION_RECORDED_DATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INTERPRETATION_RECORDED_DATE) as DateVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR INTERPRETATION_RECORDED_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INTERPRETATION_RECORDED_TIME))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.INTERPRETATION_RECORDED_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INTERPRETATION_RECORDED_TIME) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public PersonsName INTERPRETATION_RECORDER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INTERPRETATION_RECORDER))
                {
                    PersonsName newOb = new PersonsName { Tag = new Tag { Id = TagHelper.INTERPRETATION_RECORDER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INTERPRETATION_RECORDER) as PersonsName;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString REFERENCE_TO_RECORDED_SOUND
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.REFERENCE_TO_RECORDED_SOUND))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.REFERENCE_TO_RECORDED_SOUND }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.REFERENCE_TO_RECORDED_SOUND) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateVR INTERPRETATION_TRANSCRIPTION_DATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INTERPRETATION_TRANSCRIPTION_DATE))
                {
                    DateVR newOb = new DateVR { Tag = new Tag { Id = TagHelper.INTERPRETATION_TRANSCRIPTION_DATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INTERPRETATION_TRANSCRIPTION_DATE) as DateVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR INTERPRETATION_TRANSCRIPTION_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INTERPRETATION_TRANSCRIPTION_TIME))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.INTERPRETATION_TRANSCRIPTION_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INTERPRETATION_TRANSCRIPTION_TIME) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public PersonsName INTERPRETATION_TRANSCRIBER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INTERPRETATION_TRANSCRIBER))
                {
                    PersonsName newOb = new PersonsName { Tag = new Tag { Id = TagHelper.INTERPRETATION_TRANSCRIBER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INTERPRETATION_TRANSCRIBER) as PersonsName;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText INTERPRETATION_TEXT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INTERPRETATION_TEXT))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.INTERPRETATION_TEXT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INTERPRETATION_TEXT) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public PersonsName INTERPRETATION_AUTHOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INTERPRETATION_AUTHOR))
                {
                    PersonsName newOb = new PersonsName { Tag = new Tag { Id = TagHelper.INTERPRETATION_AUTHOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INTERPRETATION_AUTHOR) as PersonsName;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence INTERPRETATION_APPROVER_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INTERPRETATION_APPROVER_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.INTERPRETATION_APPROVER_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INTERPRETATION_APPROVER_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DateVR INTERPRETATION_APPROVAL_DATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INTERPRETATION_APPROVAL_DATE))
                {
                    DateVR newOb = new DateVR { Tag = new Tag { Id = TagHelper.INTERPRETATION_APPROVAL_DATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INTERPRETATION_APPROVAL_DATE) as DateVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public TimeVR INTERPRETATION_APPROVAL_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INTERPRETATION_APPROVAL_TIME))
                {
                    TimeVR newOb = new TimeVR { Tag = new Tag { Id = TagHelper.INTERPRETATION_APPROVAL_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INTERPRETATION_APPROVAL_TIME) as TimeVR;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public PersonsName PHYSICIAN_APPROVING_INTERPRETATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PHYSICIAN_APPROVING_INTERPRETATION))
                {
                    PersonsName newOb = new PersonsName { Tag = new Tag { Id = TagHelper.PHYSICIAN_APPROVING_INTERPRETATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PHYSICIAN_APPROVING_INTERPRETATION) as PersonsName;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongText INTERPRETATION_DIAGNOSIS_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INTERPRETATION_DIAGNOSIS_DESCRIPTION))
                {
                    LongText newOb = new LongText { Tag = new Tag { Id = TagHelper.INTERPRETATION_DIAGNOSIS_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INTERPRETATION_DIAGNOSIS_DESCRIPTION) as LongText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence INTERPRETATION_DIAGNOSIS_CODE_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INTERPRETATION_DIAGNOSIS_CODE_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.INTERPRETATION_DIAGNOSIS_CODE_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INTERPRETATION_DIAGNOSIS_CODE_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence RESULTS_DISTRIBUTION_LIST_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RESULTS_DISTRIBUTION_LIST_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.RESULTS_DISTRIBUTION_LIST_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RESULTS_DISTRIBUTION_LIST_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public PersonsName DISTRIBUTION_NAME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DISTRIBUTION_NAME))
                {
                    PersonsName newOb = new PersonsName { Tag = new Tag { Id = TagHelper.DISTRIBUTION_NAME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DISTRIBUTION_NAME) as PersonsName;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString DISTRIBUTION_ADDRESS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DISTRIBUTION_ADDRESS))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.DISTRIBUTION_ADDRESS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DISTRIBUTION_ADDRESS) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString INTERPRETATION_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INTERPRETATION_ID))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.INTERPRETATION_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INTERPRETATION_ID) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString INTERPRETATION_IDISSUER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INTERPRETATION_IDISSUER))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.INTERPRETATION_IDISSUER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INTERPRETATION_IDISSUER) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString INTERPRETATION_TYPE_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INTERPRETATION_TYPE_ID))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.INTERPRETATION_TYPE_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INTERPRETATION_TYPE_ID) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString INTERPRETATION_STATUS_ID
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.INTERPRETATION_STATUS_ID))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.INTERPRETATION_STATUS_ID }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.INTERPRETATION_STATUS_ID) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText IMPRESSIONS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMPRESSIONS))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.IMPRESSIONS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMPRESSIONS) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortText RESULTS_COMMENTS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.RESULTS_COMMENTS))
                {
                    ShortText newOb = new ShortText { Tag = new Tag { Id = TagHelper.RESULTS_COMMENTS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.RESULTS_COMMENTS) as ShortText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence MACPARAMETERS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MACPARAMETERS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.MACPARAMETERS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MACPARAMETERS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort CURVE_DIMENSIONS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CURVE_DIMENSIONS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.CURVE_DIMENSIONS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CURVE_DIMENSIONS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort NUMBER_OF_POINTS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_POINTS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.NUMBER_OF_POINTS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_POINTS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString TYPE_OF_DATA
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TYPE_OF_DATA))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.TYPE_OF_DATA }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TYPE_OF_DATA) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString CURVE_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CURVE_DESCRIPTION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.CURVE_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CURVE_DESCRIPTION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString AXIS_UNITS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.AXIS_UNITS))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.AXIS_UNITS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.AXIS_UNITS) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString AXIS_LABELS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.AXIS_LABELS))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.AXIS_LABELS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.AXIS_LABELS) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort DATA_VALUE_REPRESENTATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DATA_VALUE_REPRESENTATION))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.DATA_VALUE_REPRESENTATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DATA_VALUE_REPRESENTATION) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort MINIMUM_COORDINATE_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MINIMUM_COORDINATE_VALUE))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.MINIMUM_COORDINATE_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MINIMUM_COORDINATE_VALUE) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort MAXIMUM_COORDINATE_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.MAXIMUM_COORDINATE_VALUE))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.MAXIMUM_COORDINATE_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.MAXIMUM_COORDINATE_VALUE) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString CURVE_RANGE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CURVE_RANGE))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.CURVE_RANGE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CURVE_RANGE) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort CURVE_DATA_DESCRIPTOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CURVE_DATA_DESCRIPTOR))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.CURVE_DATA_DESCRIPTOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CURVE_DATA_DESCRIPTOR) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort COORDINATE_START_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COORDINATE_START_VALUE))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.COORDINATE_START_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COORDINATE_START_VALUE) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort COORDINATE_STEP_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COORDINATE_STEP_VALUE))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.COORDINATE_STEP_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COORDINATE_STEP_VALUE) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString CURVE_ACTIVATION_LAYER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CURVE_ACTIVATION_LAYER))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.CURVE_ACTIVATION_LAYER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CURVE_ACTIVATION_LAYER) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort AUDIO_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.AUDIO_TYPE))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.AUDIO_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.AUDIO_TYPE) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort AUDIO_SAMPLE_FORMAT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.AUDIO_SAMPLE_FORMAT))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.AUDIO_SAMPLE_FORMAT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.AUDIO_SAMPLE_FORMAT) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort NUMBER_OF_CHANNELS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_CHANNELS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.NUMBER_OF_CHANNELS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_CHANNELS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong NUMBER_OF_SAMPLES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_SAMPLES))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.NUMBER_OF_SAMPLES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_SAMPLES) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong SAMPLE_RATE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SAMPLE_RATE))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.SAMPLE_RATE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SAMPLE_RATE) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedLong TOTAL_TIME
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.TOTAL_TIME))
                {
                    UnsignedLong newOb = new UnsignedLong { Tag = new Tag { Id = TagHelper.TOTAL_TIME }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.TOTAL_TIME) as UnsignedLong;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DICOMElement AUDIO_SAMPLE_DATA
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.AUDIO_SAMPLE_DATA))
                {
                    DICOMElement newOb = new DICOMElement { Tag = new Tag { Id = TagHelper.AUDIO_SAMPLE_DATA }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.AUDIO_SAMPLE_DATA) as DICOMElement;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongText AUDIO_COMMENTS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.AUDIO_COMMENTS))
                {
                    LongText newOb = new LongText { Tag = new Tag { Id = TagHelper.AUDIO_COMMENTS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.AUDIO_COMMENTS) as LongText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString CURVE_LABEL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CURVE_LABEL))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.CURVE_LABEL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CURVE_LABEL) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence CURVE_REFERENCED_OVERLAY_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CURVE_REFERENCED_OVERLAY_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.CURVE_REFERENCED_OVERLAY_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CURVE_REFERENCED_OVERLAY_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort CURVE_REFERENCED_OVERLAY_GROUP
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CURVE_REFERENCED_OVERLAY_GROUP))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.CURVE_REFERENCED_OVERLAY_GROUP }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CURVE_REFERENCED_OVERLAY_GROUP) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DICOMElement CURVE_DATA
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CURVE_DATA))
                {
                    DICOMElement newOb = new DICOMElement { Tag = new Tag { Id = TagHelper.CURVE_DATA }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CURVE_DATA) as DICOMElement;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence SHARED_FUNCTIONAL_GROUPS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SHARED_FUNCTIONAL_GROUPS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.SHARED_FUNCTIONAL_GROUPS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SHARED_FUNCTIONAL_GROUPS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence PER_FRAME_FUNCTIONAL_GROUPS_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PER_FRAME_FUNCTIONAL_GROUPS_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.PER_FRAME_FUNCTIONAL_GROUPS_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PER_FRAME_FUNCTIONAL_GROUPS_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence WAVEFORM_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.WAVEFORM_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.WAVEFORM_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.WAVEFORM_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DICOMElement CHANNEL_MINIMUM_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CHANNEL_MINIMUM_VALUE))
                {
                    DICOMElement newOb = new DICOMElement { Tag = new Tag { Id = TagHelper.CHANNEL_MINIMUM_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CHANNEL_MINIMUM_VALUE) as DICOMElement;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DICOMElement CHANNEL_MAXIMUM_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.CHANNEL_MAXIMUM_VALUE))
                {
                    DICOMElement newOb = new DICOMElement { Tag = new Tag { Id = TagHelper.CHANNEL_MAXIMUM_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.CHANNEL_MAXIMUM_VALUE) as DICOMElement;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort WAVEFORM_BITS_ALLOCATED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.WAVEFORM_BITS_ALLOCATED))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.WAVEFORM_BITS_ALLOCATED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.WAVEFORM_BITS_ALLOCATED) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString WAVEFORM_SAMPLE_INTERPRETATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.WAVEFORM_SAMPLE_INTERPRETATION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.WAVEFORM_SAMPLE_INTERPRETATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.WAVEFORM_SAMPLE_INTERPRETATION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DICOMElement WAVEFORM_PADDING_VALUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.WAVEFORM_PADDING_VALUE))
                {
                    DICOMElement newOb = new DICOMElement { Tag = new Tag { Id = TagHelper.WAVEFORM_PADDING_VALUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.WAVEFORM_PADDING_VALUE) as DICOMElement;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DICOMElement WAVEFORM_DATA
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.WAVEFORM_DATA))
                {
                    DICOMElement newOb = new DICOMElement { Tag = new Tag { Id = TagHelper.WAVEFORM_DATA }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.WAVEFORM_DATA) as DICOMElement;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public OtherFloatString FIRST_ORDER_PHASE_CORRECTION_ANGLE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.FIRST_ORDER_PHASE_CORRECTION_ANGLE))
                {
                    OtherFloatString newOb = new OtherFloatString { Tag = new Tag { Id = TagHelper.FIRST_ORDER_PHASE_CORRECTION_ANGLE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.FIRST_ORDER_PHASE_CORRECTION_ANGLE) as OtherFloatString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public OtherFloatString SPECTROSCOPY_DATA
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SPECTROSCOPY_DATA))
                {
                    OtherFloatString newOb = new OtherFloatString { Tag = new Tag { Id = TagHelper.SPECTROSCOPY_DATA }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SPECTROSCOPY_DATA) as OtherFloatString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort OVERLAY_ROWS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERLAY_ROWS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.OVERLAY_ROWS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERLAY_ROWS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort OVERLAY_COLUMNS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERLAY_COLUMNS))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.OVERLAY_COLUMNS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERLAY_COLUMNS) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort OVERLAY_PLANES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERLAY_PLANES))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.OVERLAY_PLANES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERLAY_PLANES) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString NUMBER_OF_FRAMES_IN_OVERLAY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.NUMBER_OF_FRAMES_IN_OVERLAY))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.NUMBER_OF_FRAMES_IN_OVERLAY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.NUMBER_OF_FRAMES_IN_OVERLAY) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString OVERLAY_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERLAY_DESCRIPTION))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.OVERLAY_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERLAY_DESCRIPTION) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString OVERLAY_TYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERLAY_TYPE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.OVERLAY_TYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERLAY_TYPE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString OVERLAY_SUBTYPE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERLAY_SUBTYPE))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.OVERLAY_SUBTYPE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERLAY_SUBTYPE) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public SignedShort OVERLAY_ORIGIN
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERLAY_ORIGIN))
                {
                    SignedShort newOb = new SignedShort { Tag = new Tag { Id = TagHelper.OVERLAY_ORIGIN }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERLAY_ORIGIN) as SignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort IMAGE_FRAME_ORIGIN
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.IMAGE_FRAME_ORIGIN))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.IMAGE_FRAME_ORIGIN }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.IMAGE_FRAME_ORIGIN) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort OVERLAY_PLANE_ORIGIN
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERLAY_PLANE_ORIGIN))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.OVERLAY_PLANE_ORIGIN }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERLAY_PLANE_ORIGIN) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString OVERLAY_COMPRESSION_CODE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERLAY_COMPRESSION_CODE))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.OVERLAY_COMPRESSION_CODE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERLAY_COMPRESSION_CODE) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString OVERLAY_COMPRESSION_ORIGINATOR
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERLAY_COMPRESSION_ORIGINATOR))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.OVERLAY_COMPRESSION_ORIGINATOR }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERLAY_COMPRESSION_ORIGINATOR) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public ShortString OVERLAY_COMPRESSION_LABEL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERLAY_COMPRESSION_LABEL))
                {
                    ShortString newOb = new ShortString { Tag = new Tag { Id = TagHelper.OVERLAY_COMPRESSION_LABEL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERLAY_COMPRESSION_LABEL) as ShortString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString OVERLAY_COMPRESSION_DESCRIPTION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERLAY_COMPRESSION_DESCRIPTION))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.OVERLAY_COMPRESSION_DESCRIPTION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERLAY_COMPRESSION_DESCRIPTION) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public AttributeTag OVERLAY_COMPRESSION_STEP_POINTERS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERLAY_COMPRESSION_STEP_POINTERS))
                {
                    AttributeTag newOb = new AttributeTag { Tag = new Tag { Id = TagHelper.OVERLAY_COMPRESSION_STEP_POINTERS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERLAY_COMPRESSION_STEP_POINTERS) as AttributeTag;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort OVERLAY_REPEAT_INTERVAL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERLAY_REPEAT_INTERVAL))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.OVERLAY_REPEAT_INTERVAL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERLAY_REPEAT_INTERVAL) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort OVERLAY_BITS_GROUPED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERLAY_BITS_GROUPED))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.OVERLAY_BITS_GROUPED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERLAY_BITS_GROUPED) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort OVERLAY_BITS_ALLOCATED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERLAY_BITS_ALLOCATED))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.OVERLAY_BITS_ALLOCATED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERLAY_BITS_ALLOCATED) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort OVERLAY_BIT_POSITION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERLAY_BIT_POSITION))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.OVERLAY_BIT_POSITION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERLAY_BIT_POSITION) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString OVERLAY_FORMAT
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERLAY_FORMAT))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.OVERLAY_FORMAT }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERLAY_FORMAT) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort OVERLAY_LOCATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERLAY_LOCATION))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.OVERLAY_LOCATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERLAY_LOCATION) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString OVERLAY_CODE_LABEL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERLAY_CODE_LABEL))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.OVERLAY_CODE_LABEL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERLAY_CODE_LABEL) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort OVERLAY_NUMBER_OF_TABLES
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERLAY_NUMBER_OF_TABLES))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.OVERLAY_NUMBER_OF_TABLES }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERLAY_NUMBER_OF_TABLES) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public AttributeTag OVERLAY_CODE_TABLE_LOCATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERLAY_CODE_TABLE_LOCATION))
                {
                    AttributeTag newOb = new AttributeTag { Tag = new Tag { Id = TagHelper.OVERLAY_CODE_TABLE_LOCATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERLAY_CODE_TABLE_LOCATION) as AttributeTag;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort OVERLAY_BITS_FOR_CODE_WORD
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERLAY_BITS_FOR_CODE_WORD))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.OVERLAY_BITS_FOR_CODE_WORD }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERLAY_BITS_FOR_CODE_WORD) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public CodeString OVERLAY_ACTIVATION_LAYER
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERLAY_ACTIVATION_LAYER))
                {
                    CodeString newOb = new CodeString { Tag = new Tag { Id = TagHelper.OVERLAY_ACTIVATION_LAYER }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERLAY_ACTIVATION_LAYER) as CodeString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort OVERLAY_DESCRIPTOR_GRAY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERLAY_DESCRIPTOR_GRAY))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.OVERLAY_DESCRIPTOR_GRAY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERLAY_DESCRIPTOR_GRAY) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort OVERLAY_DESCRIPTOR_RED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERLAY_DESCRIPTOR_RED))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.OVERLAY_DESCRIPTOR_RED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERLAY_DESCRIPTOR_RED) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort OVERLAY_DESCRIPTOR_GREEN
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERLAY_DESCRIPTOR_GREEN))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.OVERLAY_DESCRIPTOR_GREEN }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERLAY_DESCRIPTOR_GREEN) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort OVERLAY_DESCRIPTOR_BLUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERLAY_DESCRIPTOR_BLUE))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.OVERLAY_DESCRIPTOR_BLUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERLAY_DESCRIPTOR_BLUE) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort OVERLAYS_GRAY
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERLAYS_GRAY))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.OVERLAYS_GRAY }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERLAYS_GRAY) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort OVERLAYS_RED
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERLAYS_RED))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.OVERLAYS_RED }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERLAYS_RED) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort OVERLAYS_GREEN
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERLAYS_GREEN))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.OVERLAYS_GREEN }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERLAYS_GREEN) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort OVERLAYS_BLUE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERLAYS_BLUE))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.OVERLAYS_BLUE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERLAYS_BLUE) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public IntegerString ROIAREA
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ROIAREA))
                {
                    IntegerString newOb = new IntegerString { Tag = new Tag { Id = TagHelper.ROIAREA }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ROIAREA) as IntegerString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString ROIMEAN
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ROIMEAN))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.ROIMEAN }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ROIMEAN) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DecimalString ROISTANDARD_DEVIATION
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.ROISTANDARD_DEVIATION))
                {
                    DecimalString newOb = new DecimalString { Tag = new Tag { Id = TagHelper.ROISTANDARD_DEVIATION }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.ROISTANDARD_DEVIATION) as DecimalString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongString OVERLAY_LABEL
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERLAY_LABEL))
                {
                    LongString newOb = new LongString { Tag = new Tag { Id = TagHelper.OVERLAY_LABEL }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERLAY_LABEL) as LongString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DICOMElement OVERLAY_DATA
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERLAY_DATA))
                {
                    DICOMElement newOb = new DICOMElement { Tag = new Tag { Id = TagHelper.OVERLAY_DATA }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERLAY_DATA) as DICOMElement;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public LongText OVERLAY_COMMENTS
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.OVERLAY_COMMENTS))
                {
                    LongText newOb = new LongText { Tag = new Tag { Id = TagHelper.OVERLAY_COMMENTS }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.OVERLAY_COMMENTS) as LongText;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DICOMElement PIXEL_DATA
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.PIXEL_DATA))
                {
                    DICOMElement newOb = new DICOMElement { Tag = new Tag { Id = TagHelper.PIXEL_DATA }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.PIXEL_DATA) as DICOMElement;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public OtherWordString COEFFICIENTS_SDVN
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COEFFICIENTS_SDVN))
                {
                    OtherWordString newOb = new OtherWordString { Tag = new Tag { Id = TagHelper.COEFFICIENTS_SDVN }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COEFFICIENTS_SDVN) as OtherWordString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public OtherWordString COEFFICIENTS_SDHN
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COEFFICIENTS_SDHN))
                {
                    OtherWordString newOb = new OtherWordString { Tag = new Tag { Id = TagHelper.COEFFICIENTS_SDHN }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COEFFICIENTS_SDHN) as OtherWordString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public OtherWordString COEFFICIENTS_SDDN
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.COEFFICIENTS_SDDN))
                {
                    OtherWordString newOb = new OtherWordString { Tag = new Tag { Id = TagHelper.COEFFICIENTS_SDDN }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.COEFFICIENTS_SDDN) as OtherWordString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DICOMElement VARIABLE_PIXEL_DATA
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VARIABLE_PIXEL_DATA))
                {
                    DICOMElement newOb = new DICOMElement { Tag = new Tag { Id = TagHelper.VARIABLE_PIXEL_DATA }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VARIABLE_PIXEL_DATA) as DICOMElement;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public UnsignedShort VARIABLE_NEXT_DATA_GROUP
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VARIABLE_NEXT_DATA_GROUP))
                {
                    UnsignedShort newOb = new UnsignedShort { Tag = new Tag { Id = TagHelper.VARIABLE_NEXT_DATA_GROUP }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VARIABLE_NEXT_DATA_GROUP) as UnsignedShort;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public OtherWordString VARIABLE_COEFFICIENTS_SDVN
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VARIABLE_COEFFICIENTS_SDVN))
                {
                    OtherWordString newOb = new OtherWordString { Tag = new Tag { Id = TagHelper.VARIABLE_COEFFICIENTS_SDVN }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VARIABLE_COEFFICIENTS_SDVN) as OtherWordString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public OtherWordString VARIABLE_COEFFICIENTS_SDHN
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VARIABLE_COEFFICIENTS_SDHN))
                {
                    OtherWordString newOb = new OtherWordString { Tag = new Tag { Id = TagHelper.VARIABLE_COEFFICIENTS_SDHN }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VARIABLE_COEFFICIENTS_SDHN) as OtherWordString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public OtherWordString VARIABLE_COEFFICIENTS_SDDN
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.VARIABLE_COEFFICIENTS_SDDN))
                {
                    OtherWordString newOb = new OtherWordString { Tag = new Tag { Id = TagHelper.VARIABLE_COEFFICIENTS_SDDN }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.VARIABLE_COEFFICIENTS_SDDN) as OtherWordString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public Sequence DIGITAL_SIGNATURES_SEQUENCE
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DIGITAL_SIGNATURES_SEQUENCE))
                {
                    Sequence newOb = new Sequence { Tag = new Tag { Id = TagHelper.DIGITAL_SIGNATURES_SEQUENCE }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DIGITAL_SIGNATURES_SEQUENCE) as Sequence;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public OtherByteString DATA_SET_TRAILING_PADDING
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.DATA_SET_TRAILING_PADDING))
                {
                    OtherByteString newOb = new OtherByteString { Tag = new Tag { Id = TagHelper.DATA_SET_TRAILING_PADDING }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.DATA_SET_TRAILING_PADDING) as OtherByteString;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DICOMElement SEQUENCE_ITEM
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SEQUENCE_ITEM))
                {
                    DICOMElement newOb = new DICOMElement { Tag = new Tag { Id = TagHelper.SEQUENCE_ITEM }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SEQUENCE_ITEM) as DICOMElement;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DICOMElement SEQUENCE_ITEM_DELIMITATION_ITEM
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SEQUENCE_ITEM_DELIMITATION_ITEM))
                {
                    DICOMElement newOb = new DICOMElement { Tag = new Tag { Id = TagHelper.SEQUENCE_ITEM_DELIMITATION_ITEM }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SEQUENCE_ITEM_DELIMITATION_ITEM) as DICOMElement;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }
        public DICOMElement SEQUENCE_DELIMITATION_ITEM
        {
            get
            {
                if (!DicomObjects.Exists(d => d.Tag.Id == TagHelper.SEQUENCE_DELIMITATION_ITEM))
                {
                    DICOMElement newOb = new DICOMElement { Tag = new Tag { Id = TagHelper.SEQUENCE_DELIMITATION_ITEM }, IsLittleEndian = this.isLittleEndian };
                    this.AddObject(newOb);
                    return newOb;
                }
                else
                {
                    return DicomObjects.First(d => d.Tag.Id == TagHelper.SEQUENCE_DELIMITATION_ITEM) as DICOMElement;
                }
            }
            set
            {
                this.AddObject(value);
            }
        }

    }
}

//Copyright © 2012 Rex Cardan, Ph.D


