<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ImageResizer.Plugins.AzureReader</name>
    </assembly>
    <members>
        <member name="M:ImageResizer.Plugins.AzureReader.AzureReader.Pipeline_PostRewrite(System.Web.IHttpModule,System.Web.HttpContext,ImageResizer.Configuration.IUrlEventArgs)">
            <summary>
            In case there is no querystring attached to the file (thus no operations on the fly) we can
            redirect directly to the blob. This let us take advantage of the CDN (if configured).
            </summary>
            <param name="sender"></param>
            <param name="context"></param>
            <param name="e"></param>
        </member>
        <member name="M:ImageResizer.Plugins.AzureReader.AzureReader.GetIssues">
            <summary>
            Provides the diagnostics system with a list of configuration issues
            </summary>
            <returns></returns>
        </member>
        <member name="P:ImageResizer.Plugins.AzureReader.AzureReader.FailedToRegisterVpp">
            <summary>
            True if the provider attempted to register itself as a VirtualPathProvider and failed due to limited security clearance.
            False if it did not attempt, or if it succeeded.
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.AzureReader.AzureReader.RegisterAsVirtualPathProvider">
            <summary>
            True to register the plugin as  VPP, false to register it as a VIP. VIPs are only visible to the ImageResizer pipeline - i.e, only processed images are visible. 
            </summary>
        </member>
        <member name="M:ImageResizer.Plugins.AzureReader.AzureVirtualPathProvider.IsPathVirtual(System.String)">
            <summary>
            Determines whether a specified virtual path is within the virtual file system.
            </summary>
            <param name="virtualPath">An absolute virtual path.</param>
            <returns>
            True if the virtual path is within the virtual file sytem; otherwise, false.
            </returns>
        </member>
        <member name="M:ImageResizer.Plugins.AzureReader.AzureVirtualPathProvider.FileExists(System.String)">
            <summary>
            Internal usage only
            </summary>
            <param name="virtualPath"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Plugins.AzureReader.AzureVirtualPathProvider.GetFile(System.String)">
            <summary>
            For internal use only
            </summary>
            <param name="virtualPath"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Plugins.AzureReader.AzureVirtualPathProvider.FileExists(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Returns true if the specified file is within the azure virtual directory prefix, and if it exists. Returns true even if the file doesn't exist when LazyExistenceCheck=true
            </summary>
            <param name="virtualPath"></param>
            <param name="queryString"></param>
            <returns></returns>
        </member>
        <member name="P:ImageResizer.Plugins.AzureReader.AzureVirtualPathProvider.VirtualFilesystemPrefix">
            <summary>
            Requests starting with this path will be handled by this virtual path provider.
            Can be in app-relative form: "~/azure/". Will be translated to domain-relative form.
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.AzureReader.AzureVirtualPathProvider.LazyExistenceCheck">
            <summary>
            If true, 
            </summary>
        </member>
        <member name="M:ImageResizer.Plugins.AzureReader.AzureFile.Open">
            <summary>
            Attempts to download the blob into a MemoryStream instance and return it. Throws a FileNotFoundException if the blob doesn't exist.
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
