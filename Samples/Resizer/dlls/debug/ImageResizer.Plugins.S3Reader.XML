<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ImageResizer.Plugins.S3Reader</name>
    </assembly>
    <members>
        <member name="M:ImageResizer.Plugins.S3Reader.S3Reader.Uninstall(ImageResizer.Configuration.Config)">
            <summary>
            This plugin can only be removed if it was installed as an IVirtualImageProvider (vpp="false")
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="P:ImageResizer.Plugins.S3Reader.S3Reader.S3config">
            <summary>
            Configure S3 authentication and encryption details
            </summary>
        </member>
        <member name="M:ImageResizer.Plugins.S3Reader.S3File.UpdateMetadata">
            <summary>
            Updates the exists and modified date
            </summary>
        </member>
        <member name="T:ImageResizer.Plugins.S3Reader.S3VirtualPathProvider">
            <summary>
            Allows clients to request objects located on another amazon S3 server through this server. Allows URL rewriting.
            </summary>
        </member>
        <member name="M:ImageResizer.Plugins.S3Reader.S3VirtualPathProvider.FilterPath(System.String)">
            <summary>
            Execites the PreS3RequestFilter event and returns the result.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Plugins.S3Reader.S3VirtualPathProvider.#ctor(LitS3.S3Service,System.String,System.TimeSpan,System.TimeSpan,ImageResizer.Plugins.S3Reader.S3VirtualPathProvider.RewriteBucketAndKeyPath,System.Boolean)">
            <summary>
            Create and configure a virtual path provider. 
            </summary>
            <param name="service">Provide the authentication and ecryption settings. For public buckets, no settings are required. UseSSL should be false for best performance. </param>
            <param name="virtualFilesystemPrefix">The virtual folder to allow client access of s3 from.</param>
            <param name="absoluteMetadataExpiration"></param>
            <param name="slidingMetadataExpiration"></param>
            <param name="bucketFilterCallback">You should validate that the requested bucket is your own. If you only want one bucket, just prefix your bucket to the path.</param>
            <param name="fastMode">If true, existence of bucket and key is assumed as long as prefix is present. Also, no modified date information is provided to the image resizer, so the cache never gets updated. Requires 1 request instead of 2 to download the image.</param>
        </member>
        <member name="M:ImageResizer.Plugins.S3Reader.S3VirtualPathProvider.#ctor(ImageResizer.Plugins.S3Reader.S3VirtualPathProvider.RewriteBucketAndKeyPath,System.Boolean)">
            <summary>
            Default settings: UseSSL=false, VirtualFileSystemPrefix = "~/s3", SlidingExpiration = 1h, AbsoluteExpiration = maxvalue
            No bucket filtering is performed, so any amazon-hosted bucket can be accessed through this provider unless you add a bucket filter.
            </summary>
            <param name="bucketFilterCallback">You should validate that the requested bucket is your own. If you only want one bucket, just prefix your bucket to the path.</param>
            <param name="fastMode">If true, existence of bucket and key is assumed as long as prefix is present. Also, no modified date information is provided to the image resizer, so the cache never gets updated. Requires 1 request instead of 2 to download the image.</param>
        </member>
        <member name="M:ImageResizer.Plugins.S3Reader.S3VirtualPathProvider.IsPathVirtual(System.String)">
            <summary>
              Determines whether a specified virtual path is within
              the virtual file system.
            </summary>
            <param name="virtualPath">An absolute virtual path.</param>
            <returns>
              true if the virtual path is within the 
              virtual file sytem; otherwise, false.
            </returns>
        </member>
        <member name="E:ImageResizer.Plugins.S3Reader.S3VirtualPathProvider.PreS3RequestFilter">
            <summary>
            Important! You should handle this event and throw an exception if a bucket that you do not own is requested. Otherwise other people's buckets could be accessed using your server.
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.S3Reader.S3VirtualPathProvider.VirtualFilesystemPrefix">
            <summary>
            Requests starting with this path will be handled by this virtual path provider. Should be in app-relative form: "~/s3/". Will be converted to root-relative form upon assigment. Trailing slash required, auto-added.
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.S3Reader.S3VirtualPathProvider.MetadataAbsoluteExpiration">
            <summary>
            Existence and modified date metadata about files is cached for, at longest, this amount of time after it is first stored.
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.S3Reader.S3VirtualPathProvider.MetadataSlidingExpiration">
            <summary>
            Existence and modified date metadata about files is cached for this long after it is last accessed.
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.S3Reader.S3VirtualPathProvider.Service">
            <summary>
            Gets and sets the S3Service object that specifies connection details such as authentication, encryption, etc.
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.S3Reader.S3VirtualPathProvider.FastMode">
            <summary>
            If true, existence of bucket and key is assumed as long as prefix is present.
            Defaults to true. Also, no modified date information is provided, so the cache never gets updated. Requires 1 request instead of 2 to download the image.
            </summary>
        </member>
        <member name="T:ImageResizer.Plugins.S3Reader.S3VirtualPathProvider.EmptyCacheDependency">
            Since we can't watch S3. If you want to invalidate the cache through code or sql, modify this class. For the ASP.NET cache, not the image resizer disk cache.
        </member>
        <member name="T:ImageResizer.Plugins.S3Reader.S3PathEventArgs">
            <summary>
            Class to allow modifying the bucket and key request path
            </summary>
        </member>
        <member name="M:ImageResizer.Plugins.S3Reader.S3PathEventArgs.#ctor(System.String)">
            <summary>
            Create a new instance of S3PathEventArgs for modifying the bucket and key of incoming requests
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:ImageResizer.Plugins.S3Reader.S3PathEventArgs.AssertBucketMatches(System.String[])">
            <summary>
            Stops the request if it doesn't match one of the allowed buckets.
            Amazon S3 is case-sensitive. Thus, comparisons are case sensitive as well. To minimize headache, a different exception is thrown when only case differs.
            </summary>
            <param name="buckets"></param>
        </member>
        <member name="M:ImageResizer.Plugins.S3Reader.S3PathEventArgs.ThrowException">
            <summary>
            Throws an HTTP 403 Not Authorized exception. Call this if an invalid bucket request comes through.
            </summary>
        </member>
        <member name="M:ImageResizer.Plugins.S3Reader.S3PathEventArgs.ThrowInvalidCaseException">
            <summary>
            Like ThrowException, but hints that the bucket casing is wrong.
            </summary>
        </member>
        <member name="M:ImageResizer.Plugins.S3Reader.S3PathEventArgs.PrefixBucket(System.String)">
            <summary>
            Prefixes the specified bucket to the requested path.
            </summary>
            <param name="bucket"></param>
        </member>
        <member name="P:ImageResizer.Plugins.S3Reader.S3PathEventArgs.Path">
            <summary>
            Path contains the bucket and key in the form "bucket/key".
            Where key may contain additional forward slashes.
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.S3Reader.S3PathEventArgs.Bucket">
            <summary>
            Parses the bucket from Path
            </summary>
            <returns></returns>
        </member>
        <member name="P:ImageResizer.Plugins.S3Reader.S3PathEventArgs.Key">
            <summary>
            Parses the key from Path
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
